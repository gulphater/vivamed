!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l={},c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},v=function(e){return null!=e&&e===e.window},y={type:!0,src:!0,nonce:!0,noModule:!0};function m(e,t,n){var i,o,a=(n=n||r).createElement("script");if(a.text=e,t)for(i in y)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&a.setAttribute(i,o);n.head.appendChild(a).parentNode.removeChild(a)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[c.call(e)]||"object":typeof e}var b="3.4.1",w=function(e,t){return new w.fn.init(e,t)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!g(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}w.fn=w.prototype={jquery:b,constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},w.extend=w.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||g(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(l&&r&&(w.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||w.isPlainObject(n)?n:{},i=!1,a[t]=w.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},w.extend({expando:"jQuery"+(b+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==c.call(e)||(t=i(e))&&("function"!=typeof(n=f.call(t,"constructor")&&t.constructor)||p.call(n)!==d))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){m(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?w.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,s=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return a.apply([],s)},guid:1,support:h}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});var E=function(e){var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,v,y,m,x,b="sizzle"+1*new Date,w=e.document,T=0,C=0,E=ue(),S=ue(),k=ue(),N=ue(),A=function(e,t){return e===t&&(f=!0),0},D={}.hasOwnProperty,j=[],q=j.pop,L=j.push,H=j.push,O=j.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",W="\\["+M+"*("+I+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+M+"*\\]",$=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",F=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),_=new RegExp("^"+M+"*,"+M+"*"),z=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp(M+"|>"),X=new RegExp($),V=new RegExp("^"+I+"$"),G={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){p()},ae=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(j=O.call(w.childNodes),w.childNodes),j[w.childNodes.length].nodeType}catch(t){H={apply:j.length?function(e,t){L.apply(e,O.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,i){var o,s,l,c,f,h,y,m=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&((t?t.ownerDocument||t:w)!==d&&p(t),t=t||d,g)){if(11!==T&&(f=Z.exec(e)))if(o=f[1]){if(9===T){if(!(l=t.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(m&&(l=m.getElementById(o))&&x(t,l)&&l.id===o)return r.push(l),r}else{if(f[2])return H.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return H.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!N[e+" "]&&(!v||!v.test(e))&&(1!==T||"object"!==t.nodeName.toLowerCase())){if(y=e,m=t,1===T&&U.test(e)){for((c=t.getAttribute("id"))?c=c.replace(re,ie):t.setAttribute("id",c=b),s=(h=a(e)).length;s--;)h[s]="#"+c+" "+xe(h[s]);y=h.join(","),m=ee.test(e)&&ye(t.parentNode)||t}try{return H.apply(r,m.querySelectorAll(y)),r}catch(t){N(e,!0)}finally{c===b&&t.removeAttribute("id")}}}return u(e.replace(B,"$1"),t,r,i)}function ue(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function le(e){return e[b]=!0,e}function ce(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ve(e){return le(function(t){return t=+t,le(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},p=se.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement&&(h=(d=a).documentElement,g=!o(d),w!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ce(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=K.test(d.getElementsByClassName),n.getById=ce(function(e){return h.appendChild(e).id=b,!d.getElementsByName||!d.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],v=[],(n.qsa=K.test(d.querySelectorAll))&&(ce(function(e){h.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+b+"-]").length||v.push("~="),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||v.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(n.matchesSelector=K.test(m=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce(function(e){n.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),y.push("!=",$)}),v=v.length&&new RegExp(v.join("|")),y=y.length&&new RegExp(y.join("|")),t=K.test(h.compareDocumentPosition),x=t||K.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&x(w,e)?-1:t===d||t.ownerDocument===w&&x(w,t)?1:c?P(c,e)-P(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===d?-1:t===d?1:i?-1:o?1:c?P(c,e)-P(c,t):0;if(i===o)return pe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?pe(a[r],s[r]):a[r]===w?-1:s[r]===w?1:0}),d},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),n.matchesSelector&&g&&!N[t+" "]&&(!y||!y.test(t))&&(!v||!v.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){N(t,!0)}return 0<se(t,d,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),x(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&D.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(A),f){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return c=null,e},i=se.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=se.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=se.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&-1<i.indexOf(n):"$="===t?n&&i.slice(-n.length)===n:"~="===t?-1<(" "+i.replace(F," ")+" ").indexOf(n):"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==a?"nextSibling":"previousSibling",v=t.parentNode,y=s&&t.nodeName.toLowerCase(),m=!u&&!s,x=!1;if(v){if(o){for(;g;){for(p=t;p=p[g];)if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?v.firstChild:v.lastChild],a&&m){for(x=(d=(l=(c=(f=(p=v)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],p=d&&v.childNodes[d];p=++d&&p&&p[g]||(x=d=0)||h.pop();)if(1===p.nodeType&&++x&&p===t){c[e]=[T,d,x];break}}else if(m&&(x=d=(l=(c=(f=(p=t)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===x)for(;(p=++d&&p&&p[g]||(x=d=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==y:1!==p.nodeType)||!++x||(m&&((c=(f=p[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,x]),p!==t)););return(x-=i)===r||x%r==0&&0<=x/r}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[b]?i(t):1<i.length?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=P(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:le(function(e){var t=[],n=[],r=s(e.replace(B,"$1"));return r[b]?le(function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:le(function(e){return function(t){return 0<se(e,t).length}}),contains:le(function(e){return e=e.replace(te,ne),function(t){return-1<(t.textContent||i(t)).indexOf(e)}}),lang:le(function(e){return V.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=de(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function me(){}function xe(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var l,c,f,p=[T,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(c=(f=t[b]||(t[b]={}))[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=c[o])&&l[0]===T&&l[1]===s)return p[2]=l[2];if((c[o]=p)[2]=e(t,n,u))return!0}return!1}}function we(e){return 1<e.length?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Te(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Ce(e,t,n,r,i,o){return r&&!r[b]&&(r=Ce(r)),i&&!i[b]&&(i=Ce(i,o)),le(function(o,a,s,u){var l,c,f,p=[],d=[],h=a.length,g=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),v=!e||!o&&t?g:Te(g,p,e,s,u),y=n?i||(o?e:h||r)?[]:a:v;if(n&&n(v,y,s,u),r)for(l=Te(y,d),r(l,[],s,u),c=l.length;c--;)(f=l[c])&&(y[d[c]]=!(v[d[c]]=f));if(o){if(i||e){if(i){for(l=[],c=y.length;c--;)(f=y[c])&&l.push(v[c]=f);i(null,y=[],l,u)}for(c=y.length;c--;)(f=y[c])&&-1<(l=i?P(o,f):p[c])&&(o[l]=!(a[l]=f))}}else y=Te(y===a?y.splice(h,y.length):y),i?i(null,a,y,u):H.apply(a,y)})}function Ee(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,c=be(function(e){return e===t},s,!0),f=be(function(e){return-1<P(t,e)},s,!0),p=[function(e,n,r){var i=!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])p=[be(we(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[b]){for(i=++u;i<o&&!r.relative[e[i].type];i++);return Ce(1<u&&we(p),1<u&&xe(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(B,"$1"),n,u<i&&Ee(e.slice(u,i)),i<o&&Ee(e=e.slice(i)),i<o&&xe(e))}p.push(n)}return we(p)}return me.prototype=r.filters=r.pseudos,r.setFilters=new me,a=se.tokenize=function(e,t){var n,i,o,a,s,u,l,c=S[e+" "];if(c)return t?0:c.slice(0);for(s=e,u=[],l=r.preFilter;s;){for(a in n&&!(i=_.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=z.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(B," ")}),s=s.slice(n.length)),r.filter)!(i=G[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):S(e,u).slice(0)},s=se.compile=function(e,t){var n,i,o,s,u,c,f=[],h=[],v=k[e+" "];if(!v){for(t||(t=a(e)),n=t.length;n--;)(v=Ee(t[n]))[b]?f.push(v):h.push(v);(v=k(e,(i=h,s=0<(o=f).length,u=0<i.length,c=function(e,t,n,a,c){var f,h,v,y=0,m="0",x=e&&[],b=[],w=l,C=e||u&&r.find.TAG("*",c),E=T+=null==w?1:Math.random()||.1,S=C.length;for(c&&(l=t===d||t||c);m!==S&&null!=(f=C[m]);m++){if(u&&f){for(h=0,t||f.ownerDocument===d||(p(f),n=!g);v=i[h++];)if(v(f,t||d,n)){a.push(f);break}c&&(T=E)}s&&((f=!v&&f)&&y--,e&&x.push(f))}if(y+=m,s&&m!==y){for(h=0;v=o[h++];)v(x,b,t,n);if(e){if(0<y)for(;m--;)x[m]||b[m]||(b[m]=q.call(a));b=Te(b)}H.apply(a,b),c&&!e&&0<b.length&&1<y+o.length&&se.uniqueSort(a)}return c&&(T=E,l=w),x},s?le(c):c))).selector=e}return v},u=se.select=function(e,t,n,i){var o,u,l,c,f,p="function"==typeof e&&e,d=!i&&a(e=p.selector||e);if(n=n||[],1===d.length){if(2<(u=d[0]=d[0].slice(0)).length&&"ID"===(l=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=G.needsContext.test(e)?0:u.length;o--&&(l=u[o],!r.relative[c=l.type]);)if((f=r.find[c])&&(i=f(l.matches[0].replace(te,ne),ee.test(u[0].type)&&ye(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&xe(u)))return H.apply(n,i),n;break}}return(p||s(e,d))(i,t,!g,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=b.split("").sort(A).join("")===b,n.detectDuplicates=!!f,p(),n.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(e);w.find=E,w.expr=E.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=E.uniqueSort,w.text=E.getText,w.isXMLDoc=E.isXML,w.contains=E.contains,w.escapeSelector=E.escape;var S=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&w(e).is(n))break;r.push(e)}return r},k=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=w.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,t,n){return g(t)?w.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?w.grep(e,function(e){return e===t!==n}):"string"!=typeof t?w.grep(e,function(e){return-1<u.call(t,e)!==n}):w.filter(t,e,n)}w.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?w.find.matchesSelector(r,e)?[r]:[]:w.find.matches(e,w.grep(t,function(e){return 1===e.nodeType}))},w.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(w(e).filter(function(){for(t=0;t<r;t++)if(w.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)w.find(e,i[t],n);return 1<r?w.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&N.test(e)?w(e):e||[],!1).length}});var q,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(w.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,!0)),D.test(i[1])&&w.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=r.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,q=w(r);var H=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&w(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&w.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?w.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(w(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(A(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},function(e,t){w.fn[e]=function(n,r){var i=w.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=w.filter(r,i)),1<this.length&&(O[e]||w.uniqueSort(i),H.test(e)&&i.reverse()),this.pushStack(i)}});var R=/[^\x20\t\r\n\f]+/g;function M(e){return e}function I(e){throw e}function W(e,t,n,r){var i;try{e&&g(i=e.promise)?i.call(e).done(t).fail(n):e&&g(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}w.Callbacks=function(e){var t,n;e="string"==typeof e?(t=e,n={},w.each(t.match(R)||[],function(e,t){n[t]=!0}),n):w.extend({},e);var r,i,o,a,s=[],u=[],l=-1,c=function(){for(a=a||e.once,o=r=!0;u.length;l=-1)for(i=u.shift();++l<s.length;)!1===s[l].apply(i[0],i[1])&&e.stopOnFalse&&(l=s.length,i=!1);e.memory||(i=!1),r=!1,a&&(s=i?[]:"")},f={add:function(){return s&&(i&&!r&&(l=s.length-1,u.push(i)),function t(n){w.each(n,function(n,r){g(r)?e.unique&&f.has(r)||s.push(r):r&&r.length&&"string"!==x(r)&&t(r)})}(arguments),i&&!r&&c()),this},remove:function(){return w.each(arguments,function(e,t){for(var n;-1<(n=w.inArray(t,s,n));)s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<w.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=i="",this},disabled:function(){return!s},lock:function(){return a=u=[],i||r||(s=i=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),r||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},w.extend({Deferred:function(t){var n=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return w.Deferred(function(t){w.each(n,function(n,r){var i=g(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&g(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){var o=0;function a(t,n,r,i){return function(){var s=this,u=arguments,l=function(){var e,l;if(!(t<o)){if((e=r.apply(s,u))===n.promise())throw new TypeError("Thenable self-resolution");l=e&&("object"==typeof e||"function"==typeof e)&&e.then,g(l)?i?l.call(e,a(o,n,M,i),a(o,n,I,i)):(o++,l.call(e,a(o,n,M,i),a(o,n,I,i),a(o,n,M,n.notifyWith))):(r!==M&&(s=void 0,u=[e]),(i||n.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(e){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(e,c.stackTrace),o<=t+1&&(r!==I&&(s=void 0,u=[e]),n.rejectWith(s,u))}};t?c():(w.Deferred.getStackHook&&(c.stackTrace=w.Deferred.getStackHook()),e.setTimeout(c))}}return w.Deferred(function(e){n[0][3].add(a(0,e,g(i)?i:M,e.notifyWith)),n[1][3].add(a(0,e,g(t)?t:M)),n[2][3].add(a(0,e,g(r)?r:I))}).promise()},promise:function(e){return null!=e?w.extend(e,i):i}},o={};return w.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=o.call(arguments),a=w.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=1<arguments.length?o.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&(W(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||g(i[n]&&i[n].then)))return a.then();for(;n--;)W(i[n],s(n),a.reject);return a.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;w.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&$.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},w.readyException=function(t){e.setTimeout(function(){throw t})};var F=w.Deferred();function B(){r.removeEventListener("DOMContentLoaded",B),e.removeEventListener("load",B),w.ready()}w.fn.ready=function(e){return F.then(e).catch(function(e){w.readyException(e)}),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0)!==e&&0<--w.readyWait||F.resolveWith(r,[w])}}),w.ready.then=F.then,"complete"===r.readyState||"loading"!==r.readyState&&!r.documentElement.doScroll?e.setTimeout(w.ready):(r.addEventListener("DOMContentLoaded",B),e.addEventListener("load",B));var _=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===x(n))for(s in i=!0,n)_(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,g(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(w(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function V(e){return e.replace(z,"ms-").replace(U,X)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=w.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(R)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||w.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var Q=new Y,J=new Y,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function ee(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:K.test(i)?JSON.parse(i):i)}catch(e){}J.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return J.hasData(e)||Q.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=J.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=V(r.slice(5)),ee(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){J.set(this,e)}):_(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=J.get(o,e))?n:void 0!==(n=ee(o,e))?n:void 0;this.each(function(){J.set(this,e,t)})},null,t,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){J.remove(this,e)})}}),w.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,w.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),r=n.length,i=n.shift(),o=w._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){w.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:w.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each(function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)})},dequeue:function(e){return this.each(function(){w.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=w.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ie=r.documentElement,oe=function(e){return w.contains(e.ownerDocument,e)},ae={composed:!0};ie.getRootNode&&(oe=function(e){return w.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===w.css(e,"display")},ue=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function le(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return w.css(e,t,"")},u=s(),l=n&&n[3]||(w.cssNumber[t]?"":"px"),c=e.nodeType&&(w.cssNumber[t]||"px"!==l&&+u)&&ne.exec(w.css(e,t));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;a--;)w.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,w.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ce={};function fe(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(l[c]=Q.get(r,"display")||null,l[c]||(r.style.display="")),""===r.style.display&&se(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ce[s])||(o=a.body.appendChild(a.createElement(s)),u=w.css(o,"display"),o.parentNode.removeChild(o),"none"===u&&(u="block"),ce[s]=u)))):"none"!==n&&(l[c]="none",Q.set(r,"display",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}w.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?w(this).show():w(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?w.merge([e],n):n}function ye(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var me,xe,be=/<|&#?\w+;/;function we(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===x(o))w.merge(p,o.nodeType?[o]:o);else if(be.test(o)){for(a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+w.htmlPrefilter(o)+u[2],c=u[0];c--;)a=a.lastChild;w.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));for(f.textContent="",d=0;o=p[d++];)if(r&&-1<w.inArray(o,r))i&&i.push(o);else if(l=oe(o),a=ve(f.appendChild(o),"script"),l&&ye(a),n)for(c=0;o=a[c++];)he.test(o.type||"")&&n.push(o);return f}me=r.createDocumentFragment().appendChild(r.createElement("div")),(xe=r.createElement("input")).setAttribute("type","radio"),xe.setAttribute("checked","checked"),xe.setAttribute("name","t"),me.appendChild(xe),h.checkClone=me.cloneNode(!0).cloneNode(!0).lastChild.checked,me.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!me.cloneNode(!0).lastChild.defaultValue;var Te=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function ke(){return!1}function Ne(e,t){return e===function(){try{return r.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ae(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ke;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return w().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=w.guid++)),e.each(function(){w.event.add(this,t,i,r,n)})}function De(e,t,n){n?(Q.set(e,t,!1),w.event.add(e,t,{namespace:!1,handler:function(e){var r,i,a=Q.get(this,t);if(1&e.isTrigger&&this[t]){if(a.length)(w.event.special[t]||{}).delegateType&&e.stopPropagation();else if(a=o.call(arguments),Q.set(this,t,a),r=n(this,t),this[t](),a!==(i=Q.get(this,t))||r?Q.set(this,t,!1):i={},a!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else a.length&&(Q.set(this,t,{value:w.event.trigger(w.extend(a[0],w.Event.prototype),a.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,t)&&w.event.add(e,t,Se)}w.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.get(e);if(v)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&w.find.matchesSelector(ie,i),n.guid||(n.guid=w.guid++),(u=v.events)||(u=v.events={}),(a=v.handle)||(a=v.handle=function(t){return void 0!==w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(R)||[""]).length;l--;)d=g=(s=Ee.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=w.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=w.event.special[d]||{},c=w.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&w.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),w.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.hasData(e)&&Q.get(e);if(v&&(u=v.events)){for(l=(t=(t||"").match(R)||[""]).length;l--;)if(d=g=(s=Ee.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d){for(f=w.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||w.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)w.event.remove(e,d+t[l],n,r,!0);w.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=w.event.fix(e),u=new Array(arguments.length),l=(Q.get(this,"events")||{})[s.type]||[],c=w.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=w.event.handlers.call(this,s,l),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((w.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<w(i,this).index(l):w.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click",Se),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&Q.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},w.event.addProp),w.each({focus:"focusin",blur:"focusout"},function(e,t){w.event.special[e]={setup:function(){return De(this,e,Ne),!1},trigger:function(){return De(this,e),!0},delegateType:t}}),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||w.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),w.fn.extend({on:function(e,t,n,r){return Ae(this,e,t,n,r)},one:function(e,t,n,r){return Ae(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,w(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){w.event.remove(this,e,n,t)})}});var je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,qe=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,He=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&w(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),a=Q.set(t,o),l=o.events))for(i in delete a.handle,a.events={},l)for(n=0,r=l[i].length;n<r;n++)w.event.add(t,i,l[i][n]);J.hasData(e)&&(s=J.access(e),u=w.extend({},s),J.set(t,u))}}function Ie(e,t,n,r){t=a.apply([],t);var i,o,s,u,l,c,f=0,p=e.length,d=p-1,v=t[0],y=g(v);if(y||1<p&&"string"==typeof v&&!h.checkClone&&Le.test(v))return e.each(function(i){var o=e.eq(i);y&&(t[0]=v.call(this,i,o.html())),Ie(o,t,n,r)});if(p&&(o=(i=we(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=(s=w.map(ve(i,"script"),Pe)).length;f<p;f++)l=i,f!==d&&(l=w.clone(l,!0,!0),u&&w.merge(s,ve(l,"script"))),n.call(e[f],l,f);if(u)for(c=s[s.length-1].ownerDocument,w.map(s,Re),f=0;f<u;f++)l=s[f],he.test(l.type||"")&&!Q.access(l,"globalEval")&&w.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?w._evalUrl&&!l.noModule&&w._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):m(l.textContent.replace(He,""),l,c))}return e}function We(e,t,n){for(var r,i=t?w.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||w.cleanData(ve(r)),r.parentNode&&(n&&oe(r)&&ye(ve(r,"script")),r.parentNode.removeChild(r));return e}w.extend({htmlPrefilter:function(e){return e.replace(je,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=oe(e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(a=ve(c),r=0,i=(o=ve(e)).length;r<i;r++)s=o[r],"input"===(l=(u=a[r]).nodeName.toLowerCase())&&pe.test(s.type)?u.checked=s.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ve(e),a=a||ve(c),r=0,i=o.length;r<i;r++)Me(o[r],a[r]);else Me(e,c);return 0<(a=ve(c,"script")).length&&ye(a,!f&&ve(e,"script")),c},cleanData:function(e){for(var t,n,r,i=w.event.special,o=0;void 0!==(n=e[o]);o++)if(G(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?w.event.remove(n,r):w.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),w.fn.extend({detach:function(e){return We(this,e,!0)},remove:function(e){return We(this,e)},text:function(e){return _(this,function(e){return void 0===e?w.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ie(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)})},prepend:function(){return Ie(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return w.clone(this,e,t)})},html:function(e){return _(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!qe.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Ie(this,arguments,function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(ve(this)),n&&n.replaceChild(t,this))},e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){w.fn[e]=function(e){for(var n,r=[],i=w(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),w(i[a])[t](n),s.apply(r,n.get());return this.pushStack(r)}});var $e=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Fe=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Be=new RegExp(re.join("|"),"i");function _e(e,t,n){var r,i,o,a,s=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||oe(e)||(a=w.style(e,t)),!h.pixelBoxStyles()&&$e.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(l).appendChild(c);var t=e.getComputedStyle(c);i="1%"!==t.top,u=12===n(t.marginLeft),c.style.right="60%",s=36===n(t.right),o=36===n(t.width),c.style.position="absolute",a=12===n(c.offsetWidth/3),ie.removeChild(l),c=null}}function n(e){return Math.round(parseFloat(e))}var i,o,a,s,u,l=r.createElement("div"),c=r.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===c.style.backgroundClip,w.extend(h,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),a}}))}();var Ue=["Webkit","Moz","ms"],Xe=r.createElement("div").style,Ve={};function Ge(e){return w.cssProps[e]||Ve[e]||(e in Xe?e:Ve[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;n--;)if((e=Ue[n]+t)in Xe)return e}(e)||e)}var Ye=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function Ze(e,t,n){var r=ne.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function et(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=w.css(e,n+re[a],!0,i)),r?("content"===n&&(u-=w.css(e,"padding"+re[a],!0,i)),"margin"!==n&&(u-=w.css(e,"border"+re[a]+"Width",!0,i))):(u+=w.css(e,"padding"+re[a],!0,i),"padding"!==n?u+=w.css(e,"border"+re[a]+"Width",!0,i):s+=w.css(e,"border"+re[a]+"Width",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function tt(e,t,n){var r=Fe(e),i=(!h.boxSizingReliable()||n)&&"border-box"===w.css(e,"boxSizing",!1,r),o=i,a=_e(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if($e.test(a)){if(!n)return a;a="auto"}return(!h.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===w.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===w.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+et(e,t,n||(i?"border":"content"),o,r,a)+"px"}function nt(e,t,n,r,i){return new nt.prototype.init(e,t,n,r,i)}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=_e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=Qe.test(t),l=e.style;if(u||(t=Ge(s)),a=w.cssHooks[t]||w.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"==(o=typeof n)&&(i=ne.exec(n))&&i[1]&&(n=le(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(w.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return Qe.test(t)||(t=Ge(s)),(a=w.cssHooks[t]||w.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=_e(e,t,r)),"normal"===i&&t in Ke&&(i=Ke[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),w.each(["height","width"],function(e,t){w.cssHooks[t]={get:function(e,n,r){if(n)return!Ye.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?tt(e,t,r):ue(e,Je,function(){return tt(e,t,r)})},set:function(e,n,r){var i,o=Fe(e),a=!h.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===w.css(e,"boxSizing",!1,o),u=r?et(e,t,r,s,o):0;return s&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-et(e,t,"border",!1,o)-.5)),u&&(i=ne.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),Ze(0,n,u)}}}),w.cssHooks.marginLeft=ze(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(_e(e,"marginLeft"))||e.getBoundingClientRect().left-ue(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),w.each({margin:"",padding:"",border:"Width"},function(e,t){w.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+re[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(w.cssHooks[e+t].set=Ze)}),w.fn.extend({css:function(e,t){return _(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Fe(e),i=t.length;a<i;a++)o[t[a]]=w.css(e,t[a],!1,r);return o}return void 0!==n?w.style(e,t,n):w.css(e,t)},e,t,1<arguments.length)}}),((w.Tween=nt).prototype={constructor:nt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(w.cssNumber[n]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,n=nt.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):nt.propHooks._default.set(this),this}}).init.prototype=nt.prototype,(nt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||!w.cssHooks[e.prop]&&null==e.elem.style[Ge(e.prop)]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=nt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},w.fx=nt.prototype.init,w.fx.step={};var rt,it,ot,at,st=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function lt(){it&&(!1===r.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(lt):e.setTimeout(lt,w.fx.interval),w.fx.tick())}function ct(){return e.setTimeout(function(){rt=void 0}),rt=Date.now()}function ft(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=re[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function pt(e,t,n){for(var r,i=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function dt(e,t,n){var r,i,o=0,a=dt.prefilters.length,s=w.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=rt||ct(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(e,[l,r,n]),r<1&&a?n:(a||s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:rt||ct(),duration:n.duration,tweens:[],createTween:function(t,n){var r=w.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),c=l.props;for(function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=V(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=w.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);o<a;o++)if(r=dt.prefilters[o].call(l,e,c,l.opts))return g(r.stop)&&(w._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return w.map(c,pt,l),g(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),w.fx.timer(w.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}w.Animation=w.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ne.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(R);for(var n,r=0,i=e.length;r<i;r++)n=e[r],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&se(e),v=Q.get(e,"fxshow");for(r in n.queue||(null==(a=w._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,w.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],st.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||w.style(e,r)}if((u=!w.isEmptyObject(t))||!w.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=v&&v.display)&&(l=Q.get(e,"display")),"none"===(c=w.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=w.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===w.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(v?"hidden"in v&&(g=v.hidden):v=Q.access(e,"fxshow",{display:l}),o&&(v.hidden=!g),g&&fe([e],!0),p.done(function(){for(r in g||fe([e]),Q.remove(e,"fxshow"),d)w.style(e,r,d[r])})),u=pt(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),w.speed=function(e,t,n){var r=e&&"object"==typeof e?w.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return w.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in w.fx.speeds?r.duration=w.fx.speeds[r.duration]:r.duration=w.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&w.dequeue(this,r.queue)},r},w.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=w.isEmptyObject(e),o=w.speed(t,n,r),a=function(){var t=dt(this,w.extend({},e),o);(i||Q.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=w.timers,a=Q.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ut.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||w.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Q.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=w.timers,a=r?r.length:0;for(n.finish=!0,w.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),w.each(["toggle","show","hide"],function(e,t){var n=w.fn[t];w.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ft(t,!0),e,r,i)}}),w.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){w.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),w.timers=[],w.fx.tick=function(){var e,t=0,n=w.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||w.fx.stop(),rt=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){it||(it=!0,lt())},w.fx.stop=function(){it=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(t,n){return t=w.fx&&w.fx.speeds[t]||t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},ot=r.createElement("input"),at=r.createElement("select").appendChild(r.createElement("option")),ot.type="checkbox",h.checkOn=""!==ot.value,h.optSelected=at.selected,(ot=r.createElement("input")).value="t",ot.type="radio",h.radioValue="t"===ot.value;var ht,gt=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return _(this,w.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){w.removeAttr(this,e)})}}),w.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?w.prop(e,t,n):(1===o&&w.isXMLDoc(e)||(i=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=w.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(R);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(/\w+/g),function(e,t){var n=gt[t]||w.find.attr;gt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=gt[a],gt[a]=i,i=null!=n(e,t,r)?a:null,gt[a]=o),i}});var vt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function mt(e){return(e.match(R)||[]).join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}w.fn.extend({prop:function(e,t){return _(this,w.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[w.propFix[e]||e]})}}),w.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&w.isXMLDoc(e)||(t=w.propFix[t]||t,i=w.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){w.propFix[this.toLowerCase()]=this}),w.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).addClass(e.call(this,t,xt(this)))});if((t=bt(e)).length)for(;n=this[u++];)if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).removeClass(e.call(this,t,xt(this)))});if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[u++];)if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){for(a=0;o=t[a++];)for(;-1<r.indexOf(" "+o+" ");)r=r.replace(" "+o+" "," ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){w(this).toggleClass(e.call(this,n,xt(this),t),t)}):this.each(function(){var t,i,o,a;if(r)for(i=0,o=w(this),a=bt(e);t=a[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=xt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&-1<(" "+mt(xt(n))+" ").indexOf(t))return!0;return!1}});var wt=/\r/g;w.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=g(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,w(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=w.map(i,function(e){return null==e?"":e+""})),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=w.valHooks[i.type]||w.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(wt,""):null==n?"":n:void 0}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:mt(w.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=w(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=w.makeArray(t),a=i.length;a--;)((r=i[a]).selected=-1<w.inArray(w.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),w.each(["radio","checkbox"],function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<w.inArray(w(e).val(),t)}},h.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),h.focusin="onfocusin"in e;var Tt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(t,n,i,o){var a,s,u,l,c,p,d,h,y=[i||r],m=f.call(t,"type")?t.type:t,x=f.call(t,"namespace")?t.namespace.split("."):[];if(s=h=u=i=i||r,3!==i.nodeType&&8!==i.nodeType&&!Tt.test(m+w.event.triggered)&&(-1<m.indexOf(".")&&(m=(x=m.split(".")).shift(),x.sort()),c=m.indexOf(":")<0&&"on"+m,(t=t[w.expando]?t:new w.Event(m,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=x.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+x.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:w.makeArray(n,[t]),d=w.event.special[m]||{},o||!d.trigger||!1!==d.trigger.apply(i,n))){if(!o&&!d.noBubble&&!v(i)){for(l=d.delegateType||m,Tt.test(l+m)||(s=s.parentNode);s;s=s.parentNode)y.push(s),u=s;u===(i.ownerDocument||r)&&y.push(u.defaultView||u.parentWindow||e)}for(a=0;(s=y[a++])&&!t.isPropagationStopped();)h=s,t.type=1<a?l:d.bindType||m,(p=(Q.get(s,"events")||{})[t.type]&&Q.get(s,"handle"))&&p.apply(s,n),(p=c&&s[c])&&p.apply&&G(s)&&(t.result=p.apply(s,n),!1===t.result&&t.preventDefault());return t.type=m,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(y.pop(),n)||!G(i)||c&&g(i[m])&&!v(i)&&((u=i[c])&&(i[c]=null),w.event.triggered=m,t.isPropagationStopped()&&h.addEventListener(m,Ct),i[m](),t.isPropagationStopped()&&h.removeEventListener(m,Ct),w.event.triggered=void 0,u&&(i[c]=u)),t.result}},simulate:function(e,t,n){var r=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(r,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each(function(){w.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),h.focusin||w.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Q.access(r,t);i||r.addEventListener(e,n,!0),Q.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Q.access(r,t)-1;i?Q.access(r,t,i):(r.removeEventListener(e,n,!0),Q.remove(r,t))}}});var Et=e.location,St=Date.now(),kt=/\?/;w.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||w.error("Invalid XML: "+t),n};var Nt=/\[\]$/,At=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function qt(e,t,n,r){var i;if(Array.isArray(t))w.each(t,function(t,i){n||Nt.test(e)?r(e,i):qt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==x(t))r(e,t);else for(i in t)qt(e+"["+i+"]",t[i],n,r)}w.param=function(e,t){var n,r=[],i=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,function(){i(this.name,this.value)});else for(n in e)qt(n,e[n],t,i);return r.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&jt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,function(e){return{name:t.name,value:e.replace(At,"\r\n")}}):{name:t.name,value:n.replace(At,"\r\n")}}).get()}});var Lt=/%20/g,Ht=/#.*$/,Ot=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:GET|HEAD)$/,Mt=/^\/\//,It={},Wt={},$t="*/".concat("*"),Ft=r.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(R)||[];if(g(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function _t(e,t,n,r){var i={},o=e===Wt;function a(s){var u;return i[s]=!0,w.each(e[s]||[],function(e,s){var l=s(t,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(t.dataTypes.unshift(l),a(l),!1)}),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function zt(e,t){var n,r,i=w.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&w.extend(!0,e,r),e}Ft.href=Et.href,w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,w.ajaxSettings),t):zt(w.ajaxSettings,e)},ajaxPrefilter:Bt(It),ajaxTransport:Bt(Wt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,u,l,c,f,p,d,h=w.ajaxSetup({},n),g=h.context||h,v=h.context&&(g.nodeType||g.jquery)?w(g):w.event,y=w.Deferred(),m=w.Callbacks("once memory"),x=h.statusCode||{},b={},T={},C="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Pt.exec(a);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)E.always(e[E.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||C;return i&&i.abort(t),S(0,t),this}};if(y.promise(E),h.url=((t||h.url||Et.href)+"").replace(Mt,Et.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(R)||[""],null==h.crossDomain){l=r.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Ft.protocol+"//"+Ft.host!=l.protocol+"//"+l.host}catch(t){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=w.param(h.data,h.traditional)),_t(It,h,n,E),c)return E;for(p in(f=w.event&&h.global)&&0==w.active++&&w.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Rt.test(h.type),o=h.url.replace(Ht,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Lt,"+")):(d=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(kt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Ot,"$1"),d=(kt.test(o)?"&":"?")+"_="+St+++d),h.url=o+d),h.ifModified&&(w.lastModified[o]&&E.setRequestHeader("If-Modified-Since",w.lastModified[o]),w.etag[o]&&E.setRequestHeader("If-None-Match",w.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&E.setRequestHeader("Content-Type",h.contentType),E.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$t+"; q=0.01":""):h.accepts["*"]),h.headers)E.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(g,E,h)||c))return E.abort();if(C="abort",m.add(h.complete),E.done(h.success),E.fail(h.error),i=_t(Wt,h,n,E)){if(E.readyState=1,f&&v.trigger("ajaxSend",[E,h]),c)return E;h.async&&0<h.timeout&&(u=e.setTimeout(function(){E.abort("timeout")},h.timeout));try{c=!1,i.send(b,S)}catch(t){if(c)throw t;S(-1,t)}}else S(-1,"No Transport");function S(t,n,r,s){var l,p,d,b,T,C=n;c||(c=!0,u&&e.clearTimeout(u),i=void 0,a=s||"",E.readyState=0<t?4:0,l=200<=t&&t<300||304===t,r&&(b=function(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(h,E,r)),b=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(h,b,E,l),l?(h.ifModified&&((T=E.getResponseHeader("Last-Modified"))&&(w.lastModified[o]=T),(T=E.getResponseHeader("etag"))&&(w.etag[o]=T)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=b.state,p=b.data,l=!(d=b.error))):(d=C,!t&&C||(C="error",t<0&&(t=0))),E.status=t,E.statusText=(n||C)+"",l?y.resolveWith(g,[p,C,E]):y.rejectWith(g,[E,C,d]),E.statusCode(x),x=void 0,f&&v.trigger(l?"ajaxSuccess":"ajaxError",[E,h,l?p:d]),m.fireWith(g,[E,C]),f&&(v.trigger("ajaxComplete",[E,h]),--w.active||w.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],function(e,t){w[t]=function(e,n,r,i){return g(n)&&(i=i||r,r=n,n=void 0),w.ajax(w.extend({url:e,type:t,dataType:i,data:n,success:r},w.isPlainObject(e)&&e))}}),w._evalUrl=function(e,t){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){w.globalEval(e,t)}})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){w(this).wrapInner(e.call(this,t))}):this.each(function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){w(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){w(this).replaceWith(this.childNodes)}),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Xt=w.ajaxSettings.xhr();h.cors=!!Xt&&"withCredentials"in Xt,h.ajax=Xt=!!Xt,w.ajaxTransport(function(t){var n,r;if(h.cors||Xt&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ut[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(i){if(n)throw i}},abort:function(){n&&n()}}}),w.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),w.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),w.ajaxTransport("script",function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,o){t=w("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),r.head.appendChild(t[0])},abort:function(){n&&n()}}});var Vt,Gt=[],Yt=/(=)\?(?=&|$)|\?\?/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||w.expando+"_"+St++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=!1!==t.jsonp&&(Yt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=g(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Yt,"$1"+i):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||w.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?w(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Gt.push(i)),a&&g(o)&&o(a[0]),a=o=void 0}),"script"}),h.createHTMLDocument=((Vt=r.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Vt.childNodes.length),w.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(h.createHTMLDocument?((i=(t=r.implementation.createHTMLDocument("")).createElement("base")).href=r.location.href,t.head.appendChild(i)):t=r),a=!n&&[],(o=D.exec(e))?[t.createElement(o[1])]:(o=we([e],t,a),a&&a.length&&w(a).remove(),w.merge([],o.childNodes)));var i,o,a},w.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=mt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<a.length&&w.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?w("<div>").append(w.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){w.fn[t]=function(e){return this.on(t,e)}}),w.expr.pseudos.animated=function(e){return w.grep(w.timers,function(t){return e===t.elem}).length},w.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=w.css(e,"position"),c=w(e),f={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=w.css(e,"top"),u=w.css(e,"left"),("absolute"===l||"fixed"===l)&&-1<(o+u).indexOf("auto")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),g(t)&&(t=t.call(e,n,w.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):c.css(f)}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){w.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===w.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),i.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-w.css(r,"marginTop",!0),left:t.left-i.left-w.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===w.css(e,"position");)e=e.offsetParent;return e||ie})}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;w.fn[e]=function(r){return _(this,function(e,r,i){var o;if(v(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),w.each(["top","left"],function(e,t){w.cssHooks[t]=ze(h.pixelPosition,function(e,n){if(n)return n=_e(e,t),$e.test(n)?w(e).position()[t]+"px":n})}),w.each({Height:"height",Width:"width"},function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){w.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return _(this,function(t,n,i){var o;return v(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)},t,a?i:void 0,a)}})}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){w.fn[t]=function(e,n){return 0<arguments.length?this.on(t,null,e,n):this.trigger(t)}}),w.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),w.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(o.call(arguments)))}).guid=e.guid=e.guid||w.guid++,i},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=A,w.isFunction=g,w.isWindow=v,w.camelCase=V,w.type=x,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return w});var Qt=e.jQuery,Jt=e.$;return w.noConflict=function(t){return e.$===w&&(e.$=Jt),t&&e.jQuery===w&&(e.jQuery=Qt),w},t||(e.jQuery=e.$=w),w});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5taW4uanMiXSwibmFtZXMiOlsiZSIsInQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJDIiwiRSIsInIiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsInMiLCJzbGljZSIsImciLCJjb25jYXQiLCJ1IiwicHVzaCIsImkiLCJpbmRleE9mIiwibiIsIm8iLCJ0b1N0cmluZyIsInYiLCJoYXNPd25Qcm9wZXJ0eSIsImEiLCJsIiwiY2FsbCIsInkiLCJtIiwibm9kZVR5cGUiLCJ4IiwiYyIsInR5cGUiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiYiIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidyIsImYiLCJrIiwiZm4iLCJpbml0IiwicCIsImQiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJnZXQiLCJwdXNoU3RhY2siLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwibWFwIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJpc1BsYWluT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibm9vcCIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwidHJpbSIsIm1ha2VBcnJheSIsImluQXJyYXkiLCJncmVwIiwiZ3VpZCIsInN1cHBvcnQiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJoIiwiVCIsIkRhdGUiLCJTIiwidWUiLCJOIiwiQSIsIkQiLCJqIiwicSIsInBvcCIsIkwiLCJIIiwiTyIsIlAiLCJSIiwiTSIsIkkiLCJXIiwiJCIsIkYiLCJSZWdFeHAiLCJCIiwiXyIsInoiLCJVIiwiWCIsIlYiLCJHIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJZIiwiUSIsIkoiLCJLIiwiWiIsImVlIiwidGUiLCJuZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJlIiwiaWUiLCJjaGFyQ29kZUF0Iiwib2UiLCJhZSIsImJlIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwic2UiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwieGUiLCJqb2luIiwieWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwicmVtb3ZlQXR0cmlidXRlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsImxlIiwiY2UiLCJmZSIsImF0dHJIYW5kbGUiLCJwZSIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJkZSIsImhlIiwiZ2UiLCJpc0Rpc2FibGVkIiwidmUiLCJpc1hNTCIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsInNldERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJhdHRyaWJ1dGVzIiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidmFsdWUiLCJpbm5lckhUTUwiLCJtYXRjaGVzU2VsZWN0b3IiLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImNvbnRhaW5zIiwic29ydERldGFjaGVkIiwidW5zaGlmdCIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJ1bmlxdWVTb3J0IiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJnZXRUZXh0IiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwibWF0Y2giLCJyZWxhdGl2ZSIsIj4iLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkb3MiLCJzZXRGaWx0ZXJzIiwibm90IiwiaGFzIiwibGFuZyIsInRhcmdldCIsImxvY2F0aW9uIiwiaGFzaCIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJwYXJlbnQiLCJoZWFkZXIiLCJpbnB1dCIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwibnRoIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJtZSIsIndlIiwiVGUiLCJDZSIsIkVlIiwiZmlsdGVycyIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdG9yIiwic2VsZWN0IiwiZGVmYXVsdFZhbHVlIiwiZXhwciIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJpcyIsInBhcnNlSFRNTCIsInJlYWR5IiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwic2libGluZ3MiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsInByb21pc2UiLCJkb25lIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJtZW1vcnkiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwiZmlyZSIsImZpcmVkIiwiRGVmZXJyZWQiLCJzdGF0ZSIsImFsd2F5cyIsImNhdGNoIiwicGlwZSIsInByb2dyZXNzIiwibm90aWZ5IiwicmVzb2x2ZSIsInJlamVjdCIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInNldFRpbWVvdXQiLCJ3aGVuIiwiY29uc29sZSIsIndhcm4iLCJuYW1lIiwibWVzc2FnZSIsInN0YWNrIiwicmVhZHlFeGNlcHRpb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlXYWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwidG9VcHBlckNhc2UiLCJ1aWQiLCJjYWNoZSIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwiYWNjZXNzIiwiaGFzRGF0YSIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsInF1ZXVlIiwiZGVxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsImNsZWFyUXVldWUiLCJzb3VyY2UiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwic3R5bGUiLCJkaXNwbGF5IiwiY3NzIiwiY3VyIiwiY3NzTnVtYmVyIiwidW5pdCIsInN0YXJ0IiwiYm9keSIsInNob3ciLCJoaWRlIiwidG9nZ2xlIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJrZSIsIlNlIiwiTmUiLCJBZSIsIm9mZiIsImV2ZW50IiwiRGUiLCJuYW1lc3BhY2UiLCJoYW5kbGVyIiwiaXNUcmlnZ2VyIiwic3BlY2lhbCIsImRlbGVnYXRlVHlwZSIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwidHJpZ2dlciIsIkV2ZW50IiwiZ2xvYmFsIiwiZXZlbnRzIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJiaW5kVHlwZSIsIm9yaWdUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJoYW5kbGVycyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImVsZW0iLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJoYW5kbGVPYmoiLCJyZXN1bHQiLCJwb3N0RGlzcGF0Y2giLCJhZGRQcm9wIiwiZW51bWVyYWJsZSIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY29kZSIsImNoYXJDb2RlIiwia2V5Iiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvbiIsIm9uZSIsImplIiwicWUiLCJMZSIsIkhlIiwiT2UiLCJQZSIsIlJlIiwiTWUiLCJJZSIsImh0bWwiLCJjbG9uZSIsIl9ldmFsVXJsIiwiV2UiLCJjbGVhbkRhdGEiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwiJGUiLCJGZSIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJCZSIsIl9lIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiemUiLCJjc3NUZXh0IiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicG9zaXRpb24iLCJvZmZzZXRXaWR0aCIsInJvdW5kIiwicGFyc2VGbG9hdCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsIlVlIiwiWGUiLCJWZSIsIkdlIiwiY3NzUHJvcHMiLCJZZSIsIlFlIiwiSmUiLCJ2aXNpYmlsaXR5IiwiS2UiLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsIlplIiwibWF4IiwiZXQiLCJjZWlsIiwidHQiLCJnZXRDbGllbnRSZWN0cyIsIm50IiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZ3JpZEFyZWEiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1N0YXJ0IiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJleHBhbmQiLCJUd2VlbiIsInByb3AiLCJlYXNpbmciLCJvcHRpb25zIiwicHJvcEhvb2tzIiwicnVuIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsInJ0IiwiaXQiLCJvdCIsImF0Iiwic3QiLCJ1dCIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImN0IiwiZnQiLCJoZWlnaHQiLCJwdCIsImR0IiwidHdlZW5lcnMiLCJwcmVmaWx0ZXJzIiwic3RhcnRUaW1lIiwidHdlZW5zIiwicHJvcHMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImNyZWF0ZVR3ZWVuIiwiYmluZCIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwiQW5pbWF0aW9uIiwiKiIsInR3ZWVuZXIiLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJzcGVlZHMiLCJvbGQiLCJmYWRlVG8iLCJhbmltYXRlIiwiZmluaXNoIiwidGltZXJzIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImh0IiwicmVtb3ZlQXR0ciIsImF0dHJIb29rcyIsInZ0IiwieXQiLCJtdCIsInh0IiwiYnQiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInBhcnNlSW50IiwiZm9yIiwiY2xhc3MiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJoYXNDbGFzcyIsInd0IiwidmFsIiwidmFsSG9va3MiLCJmb2N1c2luIiwiVHQiLCJDdCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJFdCIsImt0IiwiU3QiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsIk50IiwiQXQiLCJEdCIsImp0IiwicXQiLCJwYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwiTHQiLCJIdCIsIk90IiwiUHQiLCJSdCIsIk10IiwiSXQiLCJXdCIsIiR0IiwiRnQiLCJCdCIsIl90IiwiZGF0YVR5cGVzIiwienQiLCJhamF4U2V0dGluZ3MiLCJmbGF0T3B0aW9ucyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwieG1sIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiY29udGV4dCIsImFqYXhTZXR1cCIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1c0NvZGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsIm1ldGhvZCIsImRhdGFUeXBlIiwiY3Jvc3NEb21haW4iLCJob3N0IiwidHJhZGl0aW9uYWwiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInRpbWVvdXQiLCJzZW5kIiwiZGF0YUZpbHRlciIsInN0YXR1c1RleHQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGV4dCBzY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ3cmFwIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiVXQiLCIwIiwiMTIyMyIsIlh0IiwiY29ycyIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwicmVzcG9uc2UiLCJzY3JpcHQiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiVnQiLCJHdCIsIll0IiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsInVzaW5nIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJob3ZlciIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsInByb3h5IiwiaG9sZFJlYWR5IiwicGFyc2VKU09OIiwiaXNGdW5jdGlvbiIsImlzV2luZG93IiwiY2FtZWxDYXNlIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJkZWZpbmUiLCJhbWQiLCJRdCIsImpRdWVyeSIsIkp0Iiwibm9Db25mbGljdCJdLCJtYXBwaW5ncyI6IkNBQ0MsU0FBVUEsRUFBR0MsR0FDWixhQUNBLGlCQUFtQkMsUUFBVSxpQkFBbUJBLE9BQU9DLFFBQ2xERCxPQUFPQyxRQUFVSCxFQUFFSSxTQUNoQkgsRUFBRUQsR0FBRyxHQUNMLFNBQVNBLEdBQ1AsSUFBS0EsRUFBRUksU0FDTCxNQUFNLElBQUlDLE1BQU0sNENBQ2xCLE9BQU9KLEVBQUVELElBRWZDLEVBQUVELEdBVlAsQ0FXRSxvQkFBc0JNLE9BQVNBLE9BQVNDLEtBQU0sU0FBU0MsRUFBR1IsR0FDM0QsYUFDQSxJQUFJQyxFQUFJLEdBQ05RLEVBQUlELEVBQUVKLFNBQ05NLEVBQUlDLE9BQU9DLGVBQ1hDLEVBQUlaLEVBQUVhLE1BQ05DLEVBQUlkLEVBQUVlLE9BQ05DLEVBQUloQixFQUFFaUIsS0FDTkMsRUFBSWxCLEVBQUVtQixRQUNOQyxFQUFJLEdBQ0pDLEVBQUlELEVBQUVFLFNBQ05DLEVBQUlILEVBQUVJLGVBQ05DLEVBQUlGLEVBQUVELFNBQ05JLEVBQUlELEVBQUVFLEtBQUtqQixRQUNYa0IsRUFBSSxHQUNKQyxFQUFJLFNBQVM5QixHQUNYLE1BQU8sbUJBQXFCQSxHQUFLLGlCQUFtQkEsRUFBRStCLFVBRXhEQyxFQUFJLFNBQVNoQyxHQUNYLE9BQU8sTUFBUUEsR0FBS0EsSUFBTUEsRUFBRU0sUUFFOUIyQixFQUFJLENBQUVDLE1BQU0sRUFBSUMsS0FBSyxFQUFJQyxPQUFPLEVBQUlDLFVBQVUsR0FDaEQsU0FBU0MsRUFBRXRDLEVBQUdDLEVBQUdvQixHQUNmLElBQUlYLEVBQ0ZTLEVBQ0FHLEdBQUtELEVBQUlBLEdBQUtaLEdBQUc4QixjQUFjLFVBQ2pDLEdBQU1qQixFQUFFa0IsS0FBT3hDLEVBQUlDLEVBQ2pCLElBQUtTLEtBQUt1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Q3ZCQSIsImZpbGUiOiJqcXVlcnkubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIGpRdWVyeSB2My40LjEgfCAoYykgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIHwganF1ZXJ5Lm9yZy9saWNlbnNlICovXG4hKGZ1bmN0aW9uKGUsIHQpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBtb2R1bGUuZXhwb3J0c1xuICAgID8gKG1vZHVsZS5leHBvcnRzID0gZS5kb2N1bWVudFxuICAgICAgICA/IHQoZSwgITApXG4gICAgICAgIDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKCFlLmRvY3VtZW50KVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIpO1xuICAgICAgICAgICAgcmV0dXJuIHQoZSk7XG4gICAgICAgICAgfSlcbiAgICA6IHQoZSk7XG59KShcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbihDLCBlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgdCA9IFtdLFxuICAgIEUgPSBDLmRvY3VtZW50LFxuICAgIHIgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gICAgcyA9IHQuc2xpY2UsXG4gICAgZyA9IHQuY29uY2F0LFxuICAgIHUgPSB0LnB1c2gsXG4gICAgaSA9IHQuaW5kZXhPZixcbiAgICBuID0ge30sXG4gICAgbyA9IG4udG9TdHJpbmcsXG4gICAgdiA9IG4uaGFzT3duUHJvcGVydHksXG4gICAgYSA9IHYudG9TdHJpbmcsXG4gICAgbCA9IGEuY2FsbChPYmplY3QpLFxuICAgIHkgPSB7fSxcbiAgICBtID0gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSAmJiBcIm51bWJlclwiICE9IHR5cGVvZiBlLm5vZGVUeXBlO1xuICAgIH0sXG4gICAgeCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBudWxsICE9IGUgJiYgZSA9PT0gZS53aW5kb3c7XG4gICAgfSxcbiAgICBjID0geyB0eXBlOiAhMCwgc3JjOiAhMCwgbm9uY2U6ICEwLCBub01vZHVsZTogITAgfTtcbiAgZnVuY3Rpb24gYihlLCB0LCBuKSB7XG4gICAgdmFyIHIsXG4gICAgICBpLFxuICAgICAgbyA9IChuID0gbiB8fCBFKS5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgIGlmICgoKG8udGV4dCA9IGUpLCB0KSlcbiAgICAgIGZvciAociBpbiBjKVxuICAgICAgICAoaSA9IHRbcl0gfHwgKHQuZ2V0QXR0cmlidXRlICYmIHQuZ2V0QXR0cmlidXRlKHIpKSkgJiZcbiAgICAgICAgICBvLnNldEF0dHJpYnV0ZShyLCBpKTtcbiAgICBuLmhlYWQuYXBwZW5kQ2hpbGQobykucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKTtcbiAgfVxuICBmdW5jdGlvbiB3KGUpIHtcbiAgICByZXR1cm4gbnVsbCA9PSBlXG4gICAgICA/IGUgKyBcIlwiXG4gICAgICA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlXG4gICAgICA/IG5bby5jYWxsKGUpXSB8fCBcIm9iamVjdFwiXG4gICAgICA6IHR5cGVvZiBlO1xuICB9XG4gIHZhciBmID0gXCIzLjQuMVwiLFxuICAgIGsgPSBmdW5jdGlvbihlLCB0KSB7XG4gICAgICByZXR1cm4gbmV3IGsuZm4uaW5pdChlLCB0KTtcbiAgICB9LFxuICAgIHAgPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG4gIGZ1bmN0aW9uIGQoZSkge1xuICAgIHZhciB0ID0gISFlICYmIFwibGVuZ3RoXCIgaW4gZSAmJiBlLmxlbmd0aCxcbiAgICAgIG4gPSB3KGUpO1xuICAgIHJldHVybiAoXG4gICAgICAhbShlKSAmJlxuICAgICAgIXgoZSkgJiZcbiAgICAgIChcImFycmF5XCIgPT09IG4gfHxcbiAgICAgICAgMCA9PT0gdCB8fFxuICAgICAgICAoXCJudW1iZXJcIiA9PSB0eXBlb2YgdCAmJiAwIDwgdCAmJiB0IC0gMSBpbiBlKSlcbiAgICApO1xuICB9XG4gIChrLmZuID0gay5wcm90b3R5cGUgPSB7XG4gICAganF1ZXJ5OiBmLFxuICAgIGNvbnN0cnVjdG9yOiBrLFxuICAgIGxlbmd0aDogMCxcbiAgICB0b0FycmF5OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzLmNhbGwodGhpcyk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBudWxsID09IGUgPyBzLmNhbGwodGhpcykgOiBlIDwgMCA/IHRoaXNbZSArIHRoaXMubGVuZ3RoXSA6IHRoaXNbZV07XG4gICAgfSxcbiAgICBwdXNoU3RhY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciB0ID0gay5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksIGUpO1xuICAgICAgcmV0dXJuICh0LnByZXZPYmplY3QgPSB0aGlzKSwgdDtcbiAgICB9LFxuICAgIGVhY2g6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBrLmVhY2godGhpcywgZSk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uKG4pIHtcbiAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhcbiAgICAgICAgay5tYXAodGhpcywgZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgIHJldHVybiBuLmNhbGwoZSwgdCwgZSk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0sXG4gICAgc2xpY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKHMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfSxcbiAgICBmaXJzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5lcSgwKTtcbiAgICB9LFxuICAgIGxhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZXEoLTEpO1xuICAgIH0sXG4gICAgZXE6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciB0ID0gdGhpcy5sZW5ndGgsXG4gICAgICAgIG4gPSArZSArIChlIDwgMCA/IHQgOiAwKTtcbiAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjaygwIDw9IG4gJiYgbiA8IHQgPyBbdGhpc1tuXV0gOiBbXSk7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG4gICAgfSxcbiAgICBwdXNoOiB1LFxuICAgIHNvcnQ6IHQuc29ydCxcbiAgICBzcGxpY2U6IHQuc3BsaWNlXG4gIH0pLFxuICAgIChrLmV4dGVuZCA9IGsuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSxcbiAgICAgICAgdCxcbiAgICAgICAgbixcbiAgICAgICAgcixcbiAgICAgICAgaSxcbiAgICAgICAgbyxcbiAgICAgICAgYSA9IGFyZ3VtZW50c1swXSB8fCB7fSxcbiAgICAgICAgcyA9IDEsXG4gICAgICAgIHUgPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICBsID0gITE7XG4gICAgICBmb3IgKFxuICAgICAgICBcImJvb2xlYW5cIiA9PSB0eXBlb2YgYSAmJiAoKGwgPSBhKSwgKGEgPSBhcmd1bWVudHNbc10gfHwge30pLCBzKyspLFxuICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIGEgfHwgbShhKSB8fCAoYSA9IHt9KSxcbiAgICAgICAgICBzID09PSB1ICYmICgoYSA9IHRoaXMpLCBzLS0pO1xuICAgICAgICBzIDwgdTtcbiAgICAgICAgcysrXG4gICAgICApXG4gICAgICAgIGlmIChudWxsICE9IChlID0gYXJndW1lbnRzW3NdKSlcbiAgICAgICAgICBmb3IgKHQgaW4gZSlcbiAgICAgICAgICAgIChyID0gZVt0XSksXG4gICAgICAgICAgICAgIFwiX19wcm90b19fXCIgIT09IHQgJiZcbiAgICAgICAgICAgICAgICBhICE9PSByICYmXG4gICAgICAgICAgICAgICAgKGwgJiYgciAmJiAoay5pc1BsYWluT2JqZWN0KHIpIHx8IChpID0gQXJyYXkuaXNBcnJheShyKSkpXG4gICAgICAgICAgICAgICAgICA/ICgobiA9IGFbdF0pLFxuICAgICAgICAgICAgICAgICAgICAobyA9XG4gICAgICAgICAgICAgICAgICAgICAgaSAmJiAhQXJyYXkuaXNBcnJheShuKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpIHx8IGsuaXNQbGFpbk9iamVjdChuKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBuXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgKGkgPSAhMSksXG4gICAgICAgICAgICAgICAgICAgIChhW3RdID0gay5leHRlbmQobCwgbywgcikpKVxuICAgICAgICAgICAgICAgICAgOiB2b2lkIDAgIT09IHIgJiYgKGFbdF0gPSByKSk7XG4gICAgICByZXR1cm4gYTtcbiAgICB9KSxcbiAgICBrLmV4dGVuZCh7XG4gICAgICBleHBhbmRvOiBcImpRdWVyeVwiICsgKGYgKyBNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cXEQvZywgXCJcIiksXG4gICAgICBpc1JlYWR5OiAhMCxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlKTtcbiAgICAgIH0sXG4gICAgICBub29wOiBmdW5jdGlvbigpIHt9LFxuICAgICAgaXNQbGFpbk9iamVjdDogZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgdCwgbjtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAhKCFlIHx8IFwiW29iamVjdCBPYmplY3RdXCIgIT09IG8uY2FsbChlKSkgJiZcbiAgICAgICAgICAoISh0ID0gcihlKSkgfHxcbiAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgPT1cbiAgICAgICAgICAgICAgdHlwZW9mIChuID0gdi5jYWxsKHQsIFwiY29uc3RydWN0b3JcIikgJiYgdC5jb25zdHJ1Y3RvcikgJiZcbiAgICAgICAgICAgICAgYS5jYWxsKG4pID09PSBsKSlcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciB0O1xuICAgICAgICBmb3IgKHQgaW4gZSkgcmV0dXJuICExO1xuICAgICAgICByZXR1cm4gITA7XG4gICAgICB9LFxuICAgICAgZ2xvYmFsRXZhbDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICBiKGUsIHsgbm9uY2U6IHQgJiYgdC5ub25jZSB9KTtcbiAgICAgIH0sXG4gICAgICBlYWNoOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgIHZhciBuLFxuICAgICAgICAgIHIgPSAwO1xuICAgICAgICBpZiAoZChlKSkge1xuICAgICAgICAgIGZvciAobiA9IGUubGVuZ3RoOyByIDwgbjsgcisrKVxuICAgICAgICAgICAgaWYgKCExID09PSB0LmNhbGwoZVtyXSwgciwgZVtyXSkpIGJyZWFrO1xuICAgICAgICB9IGVsc2UgZm9yIChyIGluIGUpIGlmICghMSA9PT0gdC5jYWxsKGVbcl0sIHIsIGVbcl0pKSBicmVhaztcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9LFxuICAgICAgdHJpbTogZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbnVsbCA9PSBlID8gXCJcIiA6IChlICsgXCJcIikucmVwbGFjZShwLCBcIlwiKTtcbiAgICAgIH0sXG4gICAgICBtYWtlQXJyYXk6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgdmFyIG4gPSB0IHx8IFtdO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIG51bGwgIT0gZSAmJlxuICAgICAgICAgICAgKGQoT2JqZWN0KGUpKVxuICAgICAgICAgICAgICA/IGsubWVyZ2UobiwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSA/IFtlXSA6IGUpXG4gICAgICAgICAgICAgIDogdS5jYWxsKG4sIGUpKSxcbiAgICAgICAgICBuXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgaW5BcnJheTogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gLTEgOiBpLmNhbGwodCwgZSwgbik7XG4gICAgICB9LFxuICAgICAgbWVyZ2U6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9ICt0Lmxlbmd0aCwgciA9IDAsIGkgPSBlLmxlbmd0aDsgciA8IG47IHIrKykgZVtpKytdID0gdFtyXTtcbiAgICAgICAgcmV0dXJuIChlLmxlbmd0aCA9IGkpLCBlO1xuICAgICAgfSxcbiAgICAgIGdyZXA6IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgZm9yICh2YXIgciA9IFtdLCBpID0gMCwgbyA9IGUubGVuZ3RoLCBhID0gIW47IGkgPCBvOyBpKyspXG4gICAgICAgICAgIXQoZVtpXSwgaSkgIT09IGEgJiYgci5wdXNoKGVbaV0pO1xuICAgICAgICByZXR1cm4gcjtcbiAgICAgIH0sXG4gICAgICBtYXA6IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgdmFyIHIsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBvID0gMCxcbiAgICAgICAgICBhID0gW107XG4gICAgICAgIGlmIChkKGUpKVxuICAgICAgICAgIGZvciAociA9IGUubGVuZ3RoOyBvIDwgcjsgbysrKVxuICAgICAgICAgICAgbnVsbCAhPSAoaSA9IHQoZVtvXSwgbywgbikpICYmIGEucHVzaChpKTtcbiAgICAgICAgZWxzZSBmb3IgKG8gaW4gZSkgbnVsbCAhPSAoaSA9IHQoZVtvXSwgbywgbikpICYmIGEucHVzaChpKTtcbiAgICAgICAgcmV0dXJuIGcuYXBwbHkoW10sIGEpO1xuICAgICAgfSxcbiAgICAgIGd1aWQ6IDEsXG4gICAgICBzdXBwb3J0OiB5XG4gICAgfSksXG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgKGsuZm5bU3ltYm9sLml0ZXJhdG9yXSA9IHRbU3ltYm9sLml0ZXJhdG9yXSksXG4gICAgay5lYWNoKFxuICAgICAgXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KFxuICAgICAgICBcIiBcIlxuICAgICAgKSxcbiAgICAgIGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgbltcIltvYmplY3QgXCIgKyB0ICsgXCJdXCJdID0gdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgfVxuICAgICk7XG4gIHZhciBoID0gKGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgZSxcbiAgICAgIGQsXG4gICAgICBiLFxuICAgICAgbyxcbiAgICAgIGksXG4gICAgICBoLFxuICAgICAgZixcbiAgICAgIGcsXG4gICAgICB3LFxuICAgICAgdSxcbiAgICAgIGwsXG4gICAgICBULFxuICAgICAgQyxcbiAgICAgIGEsXG4gICAgICBFLFxuICAgICAgdixcbiAgICAgIHMsXG4gICAgICBjLFxuICAgICAgeSxcbiAgICAgIGsgPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG4gICAgICBtID0gbi5kb2N1bWVudCxcbiAgICAgIFMgPSAwLFxuICAgICAgciA9IDAsXG4gICAgICBwID0gdWUoKSxcbiAgICAgIHggPSB1ZSgpLFxuICAgICAgTiA9IHVlKCksXG4gICAgICBBID0gdWUoKSxcbiAgICAgIEQgPSBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgIHJldHVybiBlID09PSB0ICYmIChsID0gITApLCAwO1xuICAgICAgfSxcbiAgICAgIGogPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICAgIHQgPSBbXSxcbiAgICAgIHEgPSB0LnBvcCxcbiAgICAgIEwgPSB0LnB1c2gsXG4gICAgICBIID0gdC5wdXNoLFxuICAgICAgTyA9IHQuc2xpY2UsXG4gICAgICBQID0gZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICBmb3IgKHZhciBuID0gMCwgciA9IGUubGVuZ3RoOyBuIDwgcjsgbisrKSBpZiAoZVtuXSA9PT0gdCkgcmV0dXJuIG47XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0sXG4gICAgICBSID1cbiAgICAgICAgXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuICAgICAgTSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcbiAgICAgIEkgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG4gICAgICBXID1cbiAgICAgICAgXCJcXFxcW1wiICtcbiAgICAgICAgTSArXG4gICAgICAgIFwiKihcIiArXG4gICAgICAgIEkgK1xuICAgICAgICBcIikoPzpcIiArXG4gICAgICAgIE0gK1xuICAgICAgICBcIiooWypeJHwhfl0/PSlcIiArXG4gICAgICAgIE0gK1xuICAgICAgICBcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICtcbiAgICAgICAgSSArXG4gICAgICAgIFwiKSl8KVwiICtcbiAgICAgICAgTSArXG4gICAgICAgIFwiKlxcXFxdXCIsXG4gICAgICAkID1cbiAgICAgICAgXCI6KFwiICtcbiAgICAgICAgSSArXG4gICAgICAgIFwiKSg/OlxcXFwoKCgnKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArXG4gICAgICAgIFcgK1xuICAgICAgICBcIikqKXwuKilcXFxcKXwpXCIsXG4gICAgICBGID0gbmV3IFJlZ0V4cChNICsgXCIrXCIsIFwiZ1wiKSxcbiAgICAgIEIgPSBuZXcgUmVnRXhwKFwiXlwiICsgTSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIE0gKyBcIiskXCIsIFwiZ1wiKSxcbiAgICAgIF8gPSBuZXcgUmVnRXhwKFwiXlwiICsgTSArIFwiKixcIiArIE0gKyBcIipcIiksXG4gICAgICB6ID0gbmV3IFJlZ0V4cChcIl5cIiArIE0gKyBcIiooWz4rfl18XCIgKyBNICsgXCIpXCIgKyBNICsgXCIqXCIpLFxuICAgICAgVSA9IG5ldyBSZWdFeHAoTSArIFwifD5cIiksXG4gICAgICBYID0gbmV3IFJlZ0V4cCgkKSxcbiAgICAgIFYgPSBuZXcgUmVnRXhwKFwiXlwiICsgSSArIFwiJFwiKSxcbiAgICAgIEcgPSB7XG4gICAgICAgIElEOiBuZXcgUmVnRXhwKFwiXiMoXCIgKyBJICsgXCIpXCIpLFxuICAgICAgICBDTEFTUzogbmV3IFJlZ0V4cChcIl5cXFxcLihcIiArIEkgKyBcIilcIiksXG4gICAgICAgIFRBRzogbmV3IFJlZ0V4cChcIl4oXCIgKyBJICsgXCJ8WypdKVwiKSxcbiAgICAgICAgQVRUUjogbmV3IFJlZ0V4cChcIl5cIiArIFcpLFxuICAgICAgICBQU0VVRE86IG5ldyBSZWdFeHAoXCJeXCIgKyAkKSxcbiAgICAgICAgQ0hJTEQ6IG5ldyBSZWdFeHAoXG4gICAgICAgICAgXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcbiAgICAgICAgICAgIE0gK1xuICAgICAgICAgICAgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArXG4gICAgICAgICAgICBNICtcbiAgICAgICAgICAgIFwiKig/OihbKy1dfClcIiArXG4gICAgICAgICAgICBNICtcbiAgICAgICAgICAgIFwiKihcXFxcZCspfCkpXCIgK1xuICAgICAgICAgICAgTSArXG4gICAgICAgICAgICBcIipcXFxcKXwpXCIsXG4gICAgICAgICAgXCJpXCJcbiAgICAgICAgKSxcbiAgICAgICAgYm9vbDogbmV3IFJlZ0V4cChcIl4oPzpcIiArIFIgKyBcIikkXCIsIFwiaVwiKSxcbiAgICAgICAgbmVlZHNDb250ZXh0OiBuZXcgUmVnRXhwKFxuICAgICAgICAgIFwiXlwiICtcbiAgICAgICAgICAgIE0gK1xuICAgICAgICAgICAgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcbiAgICAgICAgICAgIE0gK1xuICAgICAgICAgICAgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICtcbiAgICAgICAgICAgIE0gK1xuICAgICAgICAgICAgXCIqXFxcXCl8KSg/PVteLV18JClcIixcbiAgICAgICAgICBcImlcIlxuICAgICAgICApXG4gICAgICB9LFxuICAgICAgWSA9IC9IVE1MJC9pLFxuICAgICAgUSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG4gICAgICBKID0gL15oXFxkJC9pLFxuICAgICAgSyA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG4gICAgICBaID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG4gICAgICBlZSA9IC9bK35dLyxcbiAgICAgIHRlID0gbmV3IFJlZ0V4cChcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgTSArIFwiP3woXCIgKyBNICsgXCIpfC4pXCIsIFwiaWdcIiksXG4gICAgICBuZSA9IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgdmFyIHIgPSBcIjB4XCIgKyB0IC0gNjU1MzY7XG4gICAgICAgIHJldHVybiByICE9IHIgfHwgblxuICAgICAgICAgID8gdFxuICAgICAgICAgIDogciA8IDBcbiAgICAgICAgICA/IFN0cmluZy5mcm9tQ2hhckNvZGUociArIDY1NTM2KVxuICAgICAgICAgIDogU3RyaW5nLmZyb21DaGFyQ29kZSgociA+PiAxMCkgfCA1NTI5NiwgKDEwMjMgJiByKSB8IDU2MzIwKTtcbiAgICAgIH0sXG4gICAgICByZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuICAgICAgaWUgPSBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgIHJldHVybiB0XG4gICAgICAgICAgPyBcIlxcMFwiID09PSBlXG4gICAgICAgICAgICA/IFwiXFx1ZmZmZFwiXG4gICAgICAgICAgICA6IGUuc2xpY2UoMCwgLTEpICtcbiAgICAgICAgICAgICAgXCJcXFxcXCIgK1xuICAgICAgICAgICAgICBlLmNoYXJDb2RlQXQoZS5sZW5ndGggLSAxKS50b1N0cmluZygxNikgK1xuICAgICAgICAgICAgICBcIiBcIlxuICAgICAgICAgIDogXCJcXFxcXCIgKyBlO1xuICAgICAgfSxcbiAgICAgIG9lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFQoKTtcbiAgICAgIH0sXG4gICAgICBhZSA9IGJlKFxuICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgcmV0dXJuICEwID09PSBlLmRpc2FibGVkICYmIFwiZmllbGRzZXRcIiA9PT0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9LFxuICAgICAgICB7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuICAgICAgKTtcbiAgICB0cnkge1xuICAgICAgSC5hcHBseSgodCA9IE8uY2FsbChtLmNoaWxkTm9kZXMpKSwgbS5jaGlsZE5vZGVzKSxcbiAgICAgICAgdFttLmNoaWxkTm9kZXMubGVuZ3RoXS5ub2RlVHlwZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBIID0ge1xuICAgICAgICBhcHBseTogdC5sZW5ndGhcbiAgICAgICAgICA/IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgTC5hcHBseShlLCBPLmNhbGwodCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICB2YXIgbiA9IGUubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHIgPSAwO1xuICAgICAgICAgICAgICB3aGlsZSAoKGVbbisrXSA9IHRbcisrXSkpO1xuICAgICAgICAgICAgICBlLmxlbmd0aCA9IG4gLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2UodCwgZSwgbiwgcikge1xuICAgICAgdmFyIGksXG4gICAgICAgIG8sXG4gICAgICAgIGEsXG4gICAgICAgIHMsXG4gICAgICAgIHUsXG4gICAgICAgIGwsXG4gICAgICAgIGMsXG4gICAgICAgIGYgPSBlICYmIGUub3duZXJEb2N1bWVudCxcbiAgICAgICAgcCA9IGUgPyBlLm5vZGVUeXBlIDogOTtcbiAgICAgIGlmIChcbiAgICAgICAgKChuID0gbiB8fCBbXSksXG4gICAgICAgIFwic3RyaW5nXCIgIT0gdHlwZW9mIHQgfHwgIXQgfHwgKDEgIT09IHAgJiYgOSAhPT0gcCAmJiAxMSAhPT0gcCkpXG4gICAgICApXG4gICAgICAgIHJldHVybiBuO1xuICAgICAgaWYgKFxuICAgICAgICAhciAmJlxuICAgICAgICAoKGUgPyBlLm93bmVyRG9jdW1lbnQgfHwgZSA6IG0pICE9PSBDICYmIFQoZSksIChlID0gZSB8fCBDKSwgRSlcbiAgICAgICkge1xuICAgICAgICBpZiAoMTEgIT09IHAgJiYgKHUgPSBaLmV4ZWModCkpKVxuICAgICAgICAgIGlmICgoaSA9IHVbMV0pKSB7XG4gICAgICAgICAgICBpZiAoOSA9PT0gcCkge1xuICAgICAgICAgICAgICBpZiAoIShhID0gZS5nZXRFbGVtZW50QnlJZChpKSkpIHJldHVybiBuO1xuICAgICAgICAgICAgICBpZiAoYS5pZCA9PT0gaSkgcmV0dXJuIG4ucHVzaChhKSwgbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZiAmJiAoYSA9IGYuZ2V0RWxlbWVudEJ5SWQoaSkpICYmIHkoZSwgYSkgJiYgYS5pZCA9PT0gaSlcbiAgICAgICAgICAgICAgcmV0dXJuIG4ucHVzaChhKSwgbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHVbMl0pIHJldHVybiBILmFwcGx5KG4sIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodCkpLCBuO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoaSA9IHVbM10pICYmXG4gICAgICAgICAgICAgIGQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuICAgICAgICAgICAgICBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWVcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmV0dXJuIEguYXBwbHkobiwgZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGkpKSwgbjtcbiAgICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBkLnFzYSAmJlxuICAgICAgICAgICFBW3QgKyBcIiBcIl0gJiZcbiAgICAgICAgICAoIXYgfHwgIXYudGVzdCh0KSkgJiZcbiAgICAgICAgICAoMSAhPT0gcCB8fCBcIm9iamVjdFwiICE9PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICgoKGMgPSB0KSwgKGYgPSBlKSwgMSA9PT0gcCAmJiBVLnRlc3QodCkpKSB7XG4gICAgICAgICAgICAocyA9IGUuZ2V0QXR0cmlidXRlKFwiaWRcIikpXG4gICAgICAgICAgICAgID8gKHMgPSBzLnJlcGxhY2UocmUsIGllKSlcbiAgICAgICAgICAgICAgOiBlLnNldEF0dHJpYnV0ZShcImlkXCIsIChzID0gaykpLFxuICAgICAgICAgICAgICAobyA9IChsID0gaCh0KSkubGVuZ3RoKTtcbiAgICAgICAgICAgIHdoaWxlIChvLS0pIGxbb10gPSBcIiNcIiArIHMgKyBcIiBcIiArIHhlKGxbb10pO1xuICAgICAgICAgICAgKGMgPSBsLmpvaW4oXCIsXCIpKSwgKGYgPSAoZWUudGVzdCh0KSAmJiB5ZShlLnBhcmVudE5vZGUpKSB8fCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBILmFwcGx5KG4sIGYucXVlcnlTZWxlY3RvckFsbChjKSksIG47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgQSh0LCAhMCk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHMgPT09IGsgJiYgZS5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBnKHQucmVwbGFjZShCLCBcIiQxXCIpLCBlLCBuLCByKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdWUoKSB7XG4gICAgICB2YXIgciA9IFtdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGUodCwgbikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHIucHVzaCh0ICsgXCIgXCIpID4gYi5jYWNoZUxlbmd0aCAmJiBkZWxldGUgZVtyLnNoaWZ0KCldLFxuICAgICAgICAgIChlW3QgKyBcIiBcIl0gPSBuKVxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGUoZSkge1xuICAgICAgcmV0dXJuIChlW2tdID0gITApLCBlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjZShlKSB7XG4gICAgICB2YXIgdCA9IEMuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuICEhZSh0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdC5wYXJlbnROb2RlICYmIHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KSwgKHQgPSBudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZmUoZSwgdCkge1xuICAgICAgdmFyIG4gPSBlLnNwbGl0KFwifFwiKSxcbiAgICAgICAgciA9IG4ubGVuZ3RoO1xuICAgICAgd2hpbGUgKHItLSkgYi5hdHRySGFuZGxlW25bcl1dID0gdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGUoZSwgdCkge1xuICAgICAgdmFyIG4gPSB0ICYmIGUsXG4gICAgICAgIHIgPVxuICAgICAgICAgIG4gJiZcbiAgICAgICAgICAxID09PSBlLm5vZGVUeXBlICYmXG4gICAgICAgICAgMSA9PT0gdC5ub2RlVHlwZSAmJlxuICAgICAgICAgIGUuc291cmNlSW5kZXggLSB0LnNvdXJjZUluZGV4O1xuICAgICAgaWYgKHIpIHJldHVybiByO1xuICAgICAgaWYgKG4pIHdoaWxlICgobiA9IG4ubmV4dFNpYmxpbmcpKSBpZiAobiA9PT0gdCkgcmV0dXJuIC0xO1xuICAgICAgcmV0dXJuIGUgPyAxIDogLTE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlKHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBcImlucHV0XCIgPT09IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAmJiBlLnR5cGUgPT09IHQ7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBoZShuKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgdCA9IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIChcImlucHV0XCIgPT09IHQgfHwgXCJidXR0b25cIiA9PT0gdCkgJiYgZS50eXBlID09PSBuO1xuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2UodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIFwiZm9ybVwiIGluIGVcbiAgICAgICAgICA/IGUucGFyZW50Tm9kZSAmJiAhMSA9PT0gZS5kaXNhYmxlZFxuICAgICAgICAgICAgPyBcImxhYmVsXCIgaW4gZVxuICAgICAgICAgICAgICA/IFwibGFiZWxcIiBpbiBlLnBhcmVudE5vZGVcbiAgICAgICAgICAgICAgICA/IGUucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gdFxuICAgICAgICAgICAgICAgIDogZS5kaXNhYmxlZCA9PT0gdFxuICAgICAgICAgICAgICA6IGUuaXNEaXNhYmxlZCA9PT0gdCB8fCAoZS5pc0Rpc2FibGVkICE9PSAhdCAmJiBhZShlKSA9PT0gdClcbiAgICAgICAgICAgIDogZS5kaXNhYmxlZCA9PT0gdFxuICAgICAgICAgIDogXCJsYWJlbFwiIGluIGUgJiYgZS5kaXNhYmxlZCA9PT0gdDtcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZlKGEpIHtcbiAgICAgIHJldHVybiBsZShmdW5jdGlvbihvKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKG8gPSArbyksXG4gICAgICAgICAgbGUoZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgIHIgPSBhKFtdLCBlLmxlbmd0aCwgbyksXG4gICAgICAgICAgICAgIGkgPSByLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIGVbKG4gPSByW2ldKV0gJiYgKGVbbl0gPSAhKHRbbl0gPSBlW25dKSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB5ZShlKSB7XG4gICAgICByZXR1cm4gZSAmJiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlLmdldEVsZW1lbnRzQnlUYWdOYW1lICYmIGU7XG4gICAgfVxuICAgIGZvciAoZSBpbiAoKGQgPSBzZS5zdXBwb3J0ID0ge30pLFxuICAgIChpID0gc2UuaXNYTUwgPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgdCA9IGUubmFtZXNwYWNlVVJJLFxuICAgICAgICBuID0gKGUub3duZXJEb2N1bWVudCB8fCBlKS5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICByZXR1cm4gIVkudGVzdCh0IHx8IChuICYmIG4ubm9kZU5hbWUpIHx8IFwiSFRNTFwiKTtcbiAgICB9KSxcbiAgICAoVCA9IHNlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHQsXG4gICAgICAgIG4sXG4gICAgICAgIHIgPSBlID8gZS5vd25lckRvY3VtZW50IHx8IGUgOiBtO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgciAhPT0gQyAmJlxuICAgICAgICAgIDkgPT09IHIubm9kZVR5cGUgJiZcbiAgICAgICAgICByLmRvY3VtZW50RWxlbWVudCAmJlxuICAgICAgICAgICgoYSA9IChDID0gcikuZG9jdW1lbnRFbGVtZW50KSxcbiAgICAgICAgICAoRSA9ICFpKEMpKSxcbiAgICAgICAgICBtICE9PSBDICYmXG4gICAgICAgICAgICAobiA9IEMuZGVmYXVsdFZpZXcpICYmXG4gICAgICAgICAgICBuLnRvcCAhPT0gbiAmJlxuICAgICAgICAgICAgKG4uYWRkRXZlbnRMaXN0ZW5lclxuICAgICAgICAgICAgICA/IG4uYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLCBvZSwgITEpXG4gICAgICAgICAgICAgIDogbi5hdHRhY2hFdmVudCAmJiBuLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIiwgb2UpKSxcbiAgICAgICAgICAoZC5hdHRyaWJ1dGVzID0gY2UoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIChlLmNsYXNzTmFtZSA9IFwiaVwiKSwgIWUuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuICAgICAgICAgIH0pKSxcbiAgICAgICAgICAoZC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGNlKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIGUuYXBwZW5kQ2hpbGQoQy5jcmVhdGVDb21tZW50KFwiXCIpKSxcbiAgICAgICAgICAgICAgIWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KSksXG4gICAgICAgICAgKGQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IEsudGVzdChDLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpKSxcbiAgICAgICAgICAoZC5nZXRCeUlkID0gY2UoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKGEuYXBwZW5kQ2hpbGQoZSkuaWQgPSBrKSxcbiAgICAgICAgICAgICAgIUMuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIUMuZ2V0RWxlbWVudHNCeU5hbWUoaykubGVuZ3RoXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pKSxcbiAgICAgICAgICBkLmdldEJ5SWRcbiAgICAgICAgICAgID8gKChiLmZpbHRlci5JRCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IGUucmVwbGFjZSh0ZSwgbmUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gdDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKGIuZmluZC5JRCA9IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgdC5nZXRFbGVtZW50QnlJZCAmJiBFKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IHQuZ2V0RWxlbWVudEJ5SWQoZSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbiA/IFtuXSA6IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICA6ICgoYi5maWx0ZXIuSUQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBlLnJlcGxhY2UodGUsIG5lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPVxuICAgICAgICAgICAgICAgICAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlLmdldEF0dHJpYnV0ZU5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgZS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdCAmJiB0LnZhbHVlID09PSBuO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoYi5maW5kLklEID0gZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB0LmdldEVsZW1lbnRCeUlkICYmIEUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5nZXRFbGVtZW50QnlJZChlKTtcbiAgICAgICAgICAgICAgICAgIGlmIChvKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgobiA9IG8uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpKSAmJiBuLnZhbHVlID09PSBlKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbb107XG4gICAgICAgICAgICAgICAgICAgIChpID0gdC5nZXRFbGVtZW50c0J5TmFtZShlKSksIChyID0gMCk7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgobyA9IGlbcisrXSkpXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKChuID0gby5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIikpICYmIG4udmFsdWUgPT09IGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW29dO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgIChiLmZpbmQuVEFHID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZVxuICAgICAgICAgICAgPyBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHQuZ2V0RWxlbWVudHNCeVRhZ05hbWVcbiAgICAgICAgICAgICAgICAgID8gdC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKVxuICAgICAgICAgICAgICAgICAgOiBkLnFzYVxuICAgICAgICAgICAgICAgICAgPyB0LnF1ZXJ5U2VsZWN0b3JBbGwoZSlcbiAgICAgICAgICAgICAgICAgIDogdm9pZCAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICAgIHIgPSBbXSxcbiAgICAgICAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgICAgICAgbyA9IHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSk7XG4gICAgICAgICAgICAgICAgaWYgKFwiKlwiID09PSBlKSB7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAoKG4gPSBvW2krK10pKSAxID09PSBuLm5vZGVUeXBlICYmIHIucHVzaChuKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgKGIuZmluZC5DTEFTUyA9XG4gICAgICAgICAgICBkLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcbiAgICAgICAgICAgIGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBFKVxuICAgICAgICAgICAgICAgIHJldHVybiB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAocyA9IFtdKSxcbiAgICAgICAgICAodiA9IFtdKSxcbiAgICAgICAgICAoZC5xc2EgPSBLLnRlc3QoQy5xdWVyeVNlbGVjdG9yQWxsKSkgJiZcbiAgICAgICAgICAgIChjZShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIChhLmFwcGVuZENoaWxkKGUpLmlubmVySFRNTCA9XG4gICAgICAgICAgICAgICAgXCI8YSBpZD0nXCIgK1xuICAgICAgICAgICAgICAgIGsgK1xuICAgICAgICAgICAgICAgIFwiJz48L2E+PHNlbGVjdCBpZD0nXCIgK1xuICAgICAgICAgICAgICAgIGsgK1xuICAgICAgICAgICAgICAgIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCIpLFxuICAgICAgICAgICAgICAgIGUucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgdi5wdXNoKFwiWypeJF09XCIgKyBNICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIpLFxuICAgICAgICAgICAgICAgIGUucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoIHx8XG4gICAgICAgICAgICAgICAgICB2LnB1c2goXCJcXFxcW1wiICsgTSArIFwiKig/OnZhbHVlfFwiICsgUiArIFwiKVwiKSxcbiAgICAgICAgICAgICAgICBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbaWR+PVwiICsgayArIFwiLV1cIikubGVuZ3RoIHx8IHYucHVzaChcIn49XCIpLFxuICAgICAgICAgICAgICAgIGUucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCB8fCB2LnB1c2goXCI6Y2hlY2tlZFwiKSxcbiAgICAgICAgICAgICAgICBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiICsgayArIFwiKypcIikubGVuZ3RoIHx8XG4gICAgICAgICAgICAgICAgICB2LnB1c2goXCIuIy4rWyt+XVwiKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY2UoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICBlLmlubmVySFRNTCA9XG4gICAgICAgICAgICAgICAgXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcbiAgICAgICAgICAgICAgdmFyIHQgPSBDLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiaGlkZGVuXCIpLFxuICAgICAgICAgICAgICAgIGUuYXBwZW5kQ2hpbGQodCkuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcIkRcIiksXG4gICAgICAgICAgICAgICAgZS5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICB2LnB1c2goXCJuYW1lXCIgKyBNICsgXCIqWypeJHwhfl0/PVwiKSxcbiAgICAgICAgICAgICAgICAyICE9PSBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgIHYucHVzaChcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIpLFxuICAgICAgICAgICAgICAgIChhLmFwcGVuZENoaWxkKGUpLmRpc2FibGVkID0gITApLFxuICAgICAgICAgICAgICAgIDIgIT09IGUucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgIHYucHVzaChcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIpLFxuICAgICAgICAgICAgICAgIGUucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIiksXG4gICAgICAgICAgICAgICAgdi5wdXNoKFwiLC4qOlwiKTtcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAoZC5tYXRjaGVzU2VsZWN0b3IgPSBLLnRlc3QoXG4gICAgICAgICAgICAoYyA9XG4gICAgICAgICAgICAgIGEubWF0Y2hlcyB8fFxuICAgICAgICAgICAgICBhLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICBhLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICBhLm9NYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgYS5tc01hdGNoZXNTZWxlY3RvcilcbiAgICAgICAgICApKSAmJlxuICAgICAgICAgICAgY2UoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAoZC5kaXNjb25uZWN0ZWRNYXRjaCA9IGMuY2FsbChlLCBcIipcIikpLFxuICAgICAgICAgICAgICAgIGMuY2FsbChlLCBcIltzIT0nJ106eFwiKSxcbiAgICAgICAgICAgICAgICBzLnB1c2goXCIhPVwiLCAkKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICh2ID0gdi5sZW5ndGggJiYgbmV3IFJlZ0V4cCh2LmpvaW4oXCJ8XCIpKSksXG4gICAgICAgICAgKHMgPSBzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKHMuam9pbihcInxcIikpKSxcbiAgICAgICAgICAodCA9IEsudGVzdChhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSksXG4gICAgICAgICAgKHkgPVxuICAgICAgICAgICAgdCB8fCBLLnRlc3QoYS5jb250YWlucylcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IDkgPT09IGUubm9kZVR5cGUgPyBlLmRvY3VtZW50RWxlbWVudCA6IGUsXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0ICYmIHQucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGUgPT09IHIgfHxcbiAgICAgICAgICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICAgICAgICAhciB8fFxuICAgICAgICAgICAgICAgICAgICAgIDEgIT09IHIubm9kZVR5cGUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAhKG4uY29udGFpbnNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbi5jb250YWlucyhyKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDE2ICYgZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihyKSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHQpIHdoaWxlICgodCA9IHQucGFyZW50Tm9kZSkpIGlmICh0ID09PSBlKSByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgKEQgPSB0XG4gICAgICAgICAgICA/IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZSA9PT0gdCkgcmV0dXJuIChsID0gITApLCAwO1xuICAgICAgICAgICAgICAgIHZhciBuID0gIWUuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgbiB8fFxuICAgICAgICAgICAgICAgICAgKDEgJlxuICAgICAgICAgICAgICAgICAgICAobiA9XG4gICAgICAgICAgICAgICAgICAgICAgKGUub3duZXJEb2N1bWVudCB8fCBlKSA9PT0gKHQub3duZXJEb2N1bWVudCB8fCB0KVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDEpIHx8XG4gICAgICAgICAgICAgICAgICAoIWQuc29ydERldGFjaGVkICYmIHQuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZSkgPT09IG4pXG4gICAgICAgICAgICAgICAgICAgID8gZSA9PT0gQyB8fCAoZS5vd25lckRvY3VtZW50ID09PSBtICYmIHkobSwgZSkpXG4gICAgICAgICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgICAgICAgIDogdCA9PT0gQyB8fCAodC5vd25lckRvY3VtZW50ID09PSBtICYmIHkobSwgdCkpXG4gICAgICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICAgICAgOiB1XG4gICAgICAgICAgICAgICAgICAgICAgPyBQKHUsIGUpIC0gUCh1LCB0KVxuICAgICAgICAgICAgICAgICAgICAgIDogMFxuICAgICAgICAgICAgICAgICAgICA6IDQgJiBuXG4gICAgICAgICAgICAgICAgICAgID8gLTFcbiAgICAgICAgICAgICAgICAgICAgOiAxKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgIGlmIChlID09PSB0KSByZXR1cm4gKGwgPSAhMCksIDA7XG4gICAgICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgICByID0gMCxcbiAgICAgICAgICAgICAgICAgIGkgPSBlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICAgICAgICBvID0gdC5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgYSA9IFtlXSxcbiAgICAgICAgICAgICAgICAgIHMgPSBbdF07XG4gICAgICAgICAgICAgICAgaWYgKCFpIHx8ICFvKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPT09IENcbiAgICAgICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgICAgICA6IHQgPT09IENcbiAgICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICAgIDogaVxuICAgICAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgICAgIDogb1xuICAgICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgICAgOiB1XG4gICAgICAgICAgICAgICAgICAgID8gUCh1LCBlKSAtIFAodSwgdClcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBvKSByZXR1cm4gcGUoZSwgdCk7XG4gICAgICAgICAgICAgICAgbiA9IGU7XG4gICAgICAgICAgICAgICAgd2hpbGUgKChuID0gbi5wYXJlbnROb2RlKSkgYS51bnNoaWZ0KG4pO1xuICAgICAgICAgICAgICAgIG4gPSB0O1xuICAgICAgICAgICAgICAgIHdoaWxlICgobiA9IG4ucGFyZW50Tm9kZSkpIHMudW5zaGlmdChuKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoYVtyXSA9PT0gc1tyXSkgcisrO1xuICAgICAgICAgICAgICAgIHJldHVybiByXG4gICAgICAgICAgICAgICAgICA/IHBlKGFbcl0sIHNbcl0pXG4gICAgICAgICAgICAgICAgICA6IGFbcl0gPT09IG1cbiAgICAgICAgICAgICAgICAgID8gLTFcbiAgICAgICAgICAgICAgICAgIDogc1tyXSA9PT0gbVxuICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgQ1xuICAgICAgKTtcbiAgICB9KSxcbiAgICAoc2UubWF0Y2hlcyA9IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgIHJldHVybiBzZShlLCBudWxsLCBudWxsLCB0KTtcbiAgICB9KSxcbiAgICAoc2UubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oZSwgdCkge1xuICAgICAgaWYgKFxuICAgICAgICAoKGUub3duZXJEb2N1bWVudCB8fCBlKSAhPT0gQyAmJiBUKGUpLFxuICAgICAgICBkLm1hdGNoZXNTZWxlY3RvciAmJlxuICAgICAgICAgIEUgJiZcbiAgICAgICAgICAhQVt0ICsgXCIgXCJdICYmXG4gICAgICAgICAgKCFzIHx8ICFzLnRlc3QodCkpICYmXG4gICAgICAgICAgKCF2IHx8ICF2LnRlc3QodCkpKVxuICAgICAgKVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBuID0gYy5jYWxsKGUsIHQpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIG4gfHxcbiAgICAgICAgICAgIGQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcbiAgICAgICAgICAgIChlLmRvY3VtZW50ICYmIDExICE9PSBlLmRvY3VtZW50Lm5vZGVUeXBlKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgQSh0LCAhMCk7XG4gICAgICAgIH1cbiAgICAgIHJldHVybiAwIDwgc2UodCwgQywgbnVsbCwgW2VdKS5sZW5ndGg7XG4gICAgfSksXG4gICAgKHNlLmNvbnRhaW5zID0gZnVuY3Rpb24oZSwgdCkge1xuICAgICAgcmV0dXJuIChlLm93bmVyRG9jdW1lbnQgfHwgZSkgIT09IEMgJiYgVChlKSwgeShlLCB0KTtcbiAgICB9KSxcbiAgICAoc2UuYXR0ciA9IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgIChlLm93bmVyRG9jdW1lbnQgfHwgZSkgIT09IEMgJiYgVChlKTtcbiAgICAgIHZhciBuID0gYi5hdHRySGFuZGxlW3QudG9Mb3dlckNhc2UoKV0sXG4gICAgICAgIHIgPSBuICYmIGouY2FsbChiLmF0dHJIYW5kbGUsIHQudG9Mb3dlckNhc2UoKSkgPyBuKGUsIHQsICFFKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiB2b2lkIDAgIT09IHJcbiAgICAgICAgPyByXG4gICAgICAgIDogZC5hdHRyaWJ1dGVzIHx8ICFFXG4gICAgICAgID8gZS5nZXRBdHRyaWJ1dGUodClcbiAgICAgICAgOiAociA9IGUuZ2V0QXR0cmlidXRlTm9kZSh0KSkgJiYgci5zcGVjaWZpZWRcbiAgICAgICAgPyByLnZhbHVlXG4gICAgICAgIDogbnVsbDtcbiAgICB9KSxcbiAgICAoc2UuZXNjYXBlID0gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIChlICsgXCJcIikucmVwbGFjZShyZSwgaWUpO1xuICAgIH0pLFxuICAgIChzZS5lcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgZSk7XG4gICAgfSksXG4gICAgKHNlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgdCxcbiAgICAgICAgbiA9IFtdLFxuICAgICAgICByID0gMCxcbiAgICAgICAgaSA9IDA7XG4gICAgICBpZiAoXG4gICAgICAgICgobCA9ICFkLmRldGVjdER1cGxpY2F0ZXMpLFxuICAgICAgICAodSA9ICFkLnNvcnRTdGFibGUgJiYgZS5zbGljZSgwKSksXG4gICAgICAgIGUuc29ydChEKSxcbiAgICAgICAgbClcbiAgICAgICkge1xuICAgICAgICB3aGlsZSAoKHQgPSBlW2krK10pKSB0ID09PSBlW2ldICYmIChyID0gbi5wdXNoKGkpKTtcbiAgICAgICAgd2hpbGUgKHItLSkgZS5zcGxpY2UobltyXSwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHUgPSBudWxsKSwgZTtcbiAgICB9KSxcbiAgICAobyA9IHNlLmdldFRleHQgPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgdCxcbiAgICAgICAgbiA9IFwiXCIsXG4gICAgICAgIHIgPSAwLFxuICAgICAgICBpID0gZS5ub2RlVHlwZTtcbiAgICAgIGlmIChpKSB7XG4gICAgICAgIGlmICgxID09PSBpIHx8IDkgPT09IGkgfHwgMTEgPT09IGkpIHtcbiAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS50ZXh0Q29udGVudCkgcmV0dXJuIGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgZm9yIChlID0gZS5maXJzdENoaWxkOyBlOyBlID0gZS5uZXh0U2libGluZykgbiArPSBvKGUpO1xuICAgICAgICB9IGVsc2UgaWYgKDMgPT09IGkgfHwgNCA9PT0gaSkgcmV0dXJuIGUubm9kZVZhbHVlO1xuICAgICAgfSBlbHNlIHdoaWxlICgodCA9IGVbcisrXSkpIG4gKz0gbyh0KTtcbiAgICAgIHJldHVybiBuO1xuICAgIH0pLFxuICAgICgoYiA9IHNlLnNlbGVjdG9ycyA9IHtcbiAgICAgIGNhY2hlTGVuZ3RoOiA1MCxcbiAgICAgIGNyZWF0ZVBzZXVkbzogbGUsXG4gICAgICBtYXRjaDogRyxcbiAgICAgIGF0dHJIYW5kbGU6IHt9LFxuICAgICAgZmluZDoge30sXG4gICAgICByZWxhdGl2ZToge1xuICAgICAgICBcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogITAgfSxcbiAgICAgICAgXCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuICAgICAgICBcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiAhMCB9LFxuICAgICAgICBcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuICAgICAgfSxcbiAgICAgIHByZUZpbHRlcjoge1xuICAgICAgICBBVFRSOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChlWzFdID0gZVsxXS5yZXBsYWNlKHRlLCBuZSkpLFxuICAgICAgICAgICAgKGVbM10gPSAoZVszXSB8fCBlWzRdIHx8IGVbNV0gfHwgXCJcIikucmVwbGFjZSh0ZSwgbmUpKSxcbiAgICAgICAgICAgIFwifj1cIiA9PT0gZVsyXSAmJiAoZVszXSA9IFwiIFwiICsgZVszXSArIFwiIFwiKSxcbiAgICAgICAgICAgIGUuc2xpY2UoMCwgNClcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBDSElMRDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoZVsxXSA9IGVbMV0udG9Mb3dlckNhc2UoKSksXG4gICAgICAgICAgICBcIm50aFwiID09PSBlWzFdLnNsaWNlKDAsIDMpXG4gICAgICAgICAgICAgID8gKGVbM10gfHwgc2UuZXJyb3IoZVswXSksXG4gICAgICAgICAgICAgICAgKGVbNF0gPSArKGVbNF1cbiAgICAgICAgICAgICAgICAgID8gZVs1XSArIChlWzZdIHx8IDEpXG4gICAgICAgICAgICAgICAgICA6IDIgKiAoXCJldmVuXCIgPT09IGVbM10gfHwgXCJvZGRcIiA9PT0gZVszXSkpKSxcbiAgICAgICAgICAgICAgICAoZVs1XSA9ICsoZVs3XSArIGVbOF0gfHwgXCJvZGRcIiA9PT0gZVszXSkpKVxuICAgICAgICAgICAgICA6IGVbM10gJiYgc2UuZXJyb3IoZVswXSksXG4gICAgICAgICAgICBlXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgUFNFVURPOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICBuID0gIWVbNl0gJiYgZVsyXTtcbiAgICAgICAgICByZXR1cm4gRy5DSElMRC50ZXN0KGVbMF0pXG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogKGVbM11cbiAgICAgICAgICAgICAgICA/IChlWzJdID0gZVs0XSB8fCBlWzVdIHx8IFwiXCIpXG4gICAgICAgICAgICAgICAgOiBuICYmXG4gICAgICAgICAgICAgICAgICBYLnRlc3QobikgJiZcbiAgICAgICAgICAgICAgICAgICh0ID0gaChuLCAhMCkpICYmXG4gICAgICAgICAgICAgICAgICAodCA9IG4uaW5kZXhPZihcIilcIiwgbi5sZW5ndGggLSB0KSAtIG4ubGVuZ3RoKSAmJlxuICAgICAgICAgICAgICAgICAgKChlWzBdID0gZVswXS5zbGljZSgwLCB0KSksIChlWzJdID0gbi5zbGljZSgwLCB0KSkpLFxuICAgICAgICAgICAgICBlLnNsaWNlKDAsIDMpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZpbHRlcjoge1xuICAgICAgICBUQUc6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB2YXIgdCA9IGUucmVwbGFjZSh0ZSwgbmUpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgcmV0dXJuIFwiKlwiID09PSBlXG4gICAgICAgICAgICA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUubm9kZU5hbWUgJiYgZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0O1xuICAgICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBDTEFTUzogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHZhciB0ID0gcFtlICsgXCIgXCJdO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0IHx8XG4gICAgICAgICAgICAoKHQgPSBuZXcgUmVnRXhwKFwiKF58XCIgKyBNICsgXCIpXCIgKyBlICsgXCIoXCIgKyBNICsgXCJ8JClcIikpICYmXG4gICAgICAgICAgICAgIHAoZSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LnRlc3QoXG4gICAgICAgICAgICAgICAgICAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS5jbGFzc05hbWUgJiYgZS5jbGFzc05hbWUpIHx8XG4gICAgICAgICAgICAgICAgICAgIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlLmdldEF0dHJpYnV0ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgIGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikpIHx8XG4gICAgICAgICAgICAgICAgICAgIFwiXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBBVFRSOiBmdW5jdGlvbihuLCByLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gc2UuYXR0cihlLCBuKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsID09IHRcbiAgICAgICAgICAgICAgPyBcIiE9XCIgPT09IHJcbiAgICAgICAgICAgICAgOiAhciB8fFxuICAgICAgICAgICAgICAgICAgKCh0ICs9IFwiXCIpLFxuICAgICAgICAgICAgICAgICAgXCI9XCIgPT09IHJcbiAgICAgICAgICAgICAgICAgICAgPyB0ID09PSBpXG4gICAgICAgICAgICAgICAgICAgIDogXCIhPVwiID09PSByXG4gICAgICAgICAgICAgICAgICAgID8gdCAhPT0gaVxuICAgICAgICAgICAgICAgICAgICA6IFwiXj1cIiA9PT0gclxuICAgICAgICAgICAgICAgICAgICA/IGkgJiYgMCA9PT0gdC5pbmRleE9mKGkpXG4gICAgICAgICAgICAgICAgICAgIDogXCIqPVwiID09PSByXG4gICAgICAgICAgICAgICAgICAgID8gaSAmJiAtMSA8IHQuaW5kZXhPZihpKVxuICAgICAgICAgICAgICAgICAgICA6IFwiJD1cIiA9PT0gclxuICAgICAgICAgICAgICAgICAgICA/IGkgJiYgdC5zbGljZSgtaS5sZW5ndGgpID09PSBpXG4gICAgICAgICAgICAgICAgICAgIDogXCJ+PVwiID09PSByXG4gICAgICAgICAgICAgICAgICAgID8gLTEgPCAoXCIgXCIgKyB0LnJlcGxhY2UoRiwgXCIgXCIpICsgXCIgXCIpLmluZGV4T2YoaSlcbiAgICAgICAgICAgICAgICAgICAgOiBcInw9XCIgPT09IHIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAodCA9PT0gaSB8fCB0LnNsaWNlKDAsIGkubGVuZ3RoICsgMSkgPT09IGkgKyBcIi1cIikpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIENISUxEOiBmdW5jdGlvbihoLCBlLCB0LCBnLCB2KSB7XG4gICAgICAgICAgdmFyIHkgPSBcIm50aFwiICE9PSBoLnNsaWNlKDAsIDMpLFxuICAgICAgICAgICAgbSA9IFwibGFzdFwiICE9PSBoLnNsaWNlKC00KSxcbiAgICAgICAgICAgIHggPSBcIm9mLXR5cGVcIiA9PT0gZTtcbiAgICAgICAgICByZXR1cm4gMSA9PT0gZyAmJiAwID09PSB2XG4gICAgICAgICAgICA/IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICAgICAgICAgIHZhciByLFxuICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgICAgIHUsXG4gICAgICAgICAgICAgICAgICBsID0geSAhPT0gbSA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG4gICAgICAgICAgICAgICAgICBjID0gZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgZiA9IHggJiYgZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgcCA9ICFuICYmICF4LFxuICAgICAgICAgICAgICAgICAgZCA9ICExO1xuICAgICAgICAgICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobCkge1xuICAgICAgICAgICAgICAgICAgICAgIGEgPSBlO1xuICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgoYSA9IGFbbF0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB4ID8gYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBmIDogMSA9PT0gYS5ub2RlVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgICAgdSA9IGwgPSBcIm9ubHlcIiA9PT0gaCAmJiAhdSAmJiBcIm5leHRTaWJsaW5nXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKCgodSA9IFttID8gYy5maXJzdENoaWxkIDogYy5sYXN0Q2hpbGRdKSwgbSAmJiBwKSkge1xuICAgICAgICAgICAgICAgICAgICAoZCA9XG4gICAgICAgICAgICAgICAgICAgICAgKHMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgKHIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAoaSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG8gPSAoYSA9IGMpW2tdIHx8IChhW2tdID0ge30pKVthLnVuaXF1ZUlEXSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvW2EudW5pcXVlSURdID0ge30pKVtoXSB8fCBbXSlbMF0gPT09IFMgJiYgclsxXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICByWzJdKSxcbiAgICAgICAgICAgICAgICAgICAgICAoYSA9IHMgJiYgYy5jaGlsZE5vZGVzW3NdKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChhID0gKCsrcyAmJiBhICYmIGFbbF0pIHx8IChkID0gcyA9IDApIHx8IHUucG9wKCkpKVxuICAgICAgICAgICAgICAgICAgICAgIGlmICgxID09PSBhLm5vZGVUeXBlICYmICsrZCAmJiBhID09PSBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpW2hdID0gW1MsIHMsIGRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKHAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoZCA9IHMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgKHIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAoaSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG8gPSAoYSA9IGUpW2tdIHx8IChhW2tdID0ge30pKVthLnVuaXF1ZUlEXSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvW2EudW5pcXVlSURdID0ge30pKVtoXSB8fCBbXSlbMF0gPT09IFMgJiYgclsxXSksXG4gICAgICAgICAgICAgICAgICAgICExID09PSBkKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGEgPSAoKytzICYmIGEgJiYgYVtsXSkgfHwgKGQgPSBzID0gMCkgfHwgdS5wb3AoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKHhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IGZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxID09PSBhLm5vZGVUeXBlKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKytkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAocCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvID0gYVtrXSB8fCAoYVtrXSA9IHt9KSlbYS51bmlxdWVJRF0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAob1thLnVuaXF1ZUlEXSA9IHt9KSlbaF0gPSBbUywgZF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9PT0gZSlcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoZCAtPSB2KSA9PT0gZyB8fCAoZCAlIGcgPT0gMCAmJiAwIDw9IGQgLyBnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIFBTRVVETzogZnVuY3Rpb24oZSwgbykge1xuICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgYSA9XG4gICAgICAgICAgICAgIGIucHNldWRvc1tlXSB8fFxuICAgICAgICAgICAgICBiLnNldEZpbHRlcnNbZS50b0xvd2VyQ2FzZSgpXSB8fFxuICAgICAgICAgICAgICBzZS5lcnJvcihcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBlKTtcbiAgICAgICAgICByZXR1cm4gYVtrXVxuICAgICAgICAgICAgPyBhKG8pXG4gICAgICAgICAgICA6IDEgPCBhLmxlbmd0aFxuICAgICAgICAgICAgPyAoKHQgPSBbZSwgZSwgXCJcIiwgb10pLFxuICAgICAgICAgICAgICBiLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICAgID8gbGUoZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICAgICAgICByID0gYShlLCBvKSxcbiAgICAgICAgICAgICAgICAgICAgICBpID0gci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIGVbKG4gPSBQKGUsIHJbaV0pKV0gPSAhKHRbbl0gPSByW2ldKTtcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhKGUsIDAsIHQpO1xuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogYTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBzZXVkb3M6IHtcbiAgICAgICAgbm90OiBsZShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdmFyIHIgPSBbXSxcbiAgICAgICAgICAgIGkgPSBbXSxcbiAgICAgICAgICAgIHMgPSBmKGUucmVwbGFjZShCLCBcIiQxXCIpKTtcbiAgICAgICAgICByZXR1cm4gc1trXVxuICAgICAgICAgICAgPyBsZShmdW5jdGlvbihlLCB0LCBuLCByKSB7XG4gICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICBvID0gcyhlLCBudWxsLCByLCBbXSksXG4gICAgICAgICAgICAgICAgICBhID0gZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGEtLSkgKGkgPSBvW2FdKSAmJiAoZVthXSA9ICEodFthXSA9IGkpKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoclswXSA9IGUpLCBzKHIsIG51bGwsIG4sIGkpLCAoclswXSA9IG51bGwpLCAhaS5wb3AoKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIGhhczogbGUoZnVuY3Rpb24odCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gMCA8IHNlKHQsIGUpLmxlbmd0aDtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgY29udGFpbnM6IGxlKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHQgPSB0LnJlcGxhY2UodGUsIG5lKSksXG4gICAgICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIHJldHVybiAtMSA8IChlLnRleHRDb250ZW50IHx8IG8oZSkpLmluZGV4T2YodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfSksXG4gICAgICAgIGxhbmc6IGxlKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgVi50ZXN0KG4gfHwgXCJcIikgfHwgc2UuZXJyb3IoXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIG4pLFxuICAgICAgICAgICAgKG4gPSBuLnJlcGxhY2UodGUsIG5lKS50b0xvd2VyQ2FzZSgpKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgdmFyIHQ7XG4gICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAodCA9IEVcbiAgICAgICAgICAgICAgICAgICAgPyBlLmxhbmdcbiAgICAgICAgICAgICAgICAgICAgOiBlLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGUuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAodCA9IHQudG9Mb3dlckNhc2UoKSkgPT09IG4gfHwgMCA9PT0gdC5pbmRleE9mKG4gKyBcIi1cIilcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKChlID0gZS5wYXJlbnROb2RlKSAmJiAxID09PSBlLm5vZGVUeXBlKTtcbiAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0pLFxuICAgICAgICB0YXJnZXQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB2YXIgdCA9IG4ubG9jYXRpb24gJiYgbi5sb2NhdGlvbi5oYXNoO1xuICAgICAgICAgIHJldHVybiB0ICYmIHQuc2xpY2UoMSkgPT09IGUuaWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHJvb3Q6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICByZXR1cm4gZSA9PT0gYTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9jdXM6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZSA9PT0gQy5hY3RpdmVFbGVtZW50ICYmXG4gICAgICAgICAgICAoIUMuaGFzRm9jdXMgfHwgQy5oYXNGb2N1cygpKSAmJlxuICAgICAgICAgICAgISEoZS50eXBlIHx8IGUuaHJlZiB8fCB+ZS50YWJJbmRleClcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBlbmFibGVkOiBnZSghMSksXG4gICAgICAgIGRpc2FibGVkOiBnZSghMCksXG4gICAgICAgIGNoZWNrZWQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB2YXIgdCA9IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKFwiaW5wdXRcIiA9PT0gdCAmJiAhIWUuY2hlY2tlZCkgfHwgKFwib3B0aW9uXCIgPT09IHQgJiYgISFlLnNlbGVjdGVkKVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdGVkOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgcmV0dXJuIGUucGFyZW50Tm9kZSAmJiBlLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwgITAgPT09IGUuc2VsZWN0ZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVtcHR5OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgZm9yIChlID0gZS5maXJzdENoaWxkOyBlOyBlID0gZS5uZXh0U2libGluZylcbiAgICAgICAgICAgIGlmIChlLm5vZGVUeXBlIDwgNikgcmV0dXJuICExO1xuICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgfSxcbiAgICAgICAgcGFyZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgcmV0dXJuICFiLnBzZXVkb3MuZW1wdHkoZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhlYWRlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiBKLnRlc3QoZS5ub2RlTmFtZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGlucHV0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgcmV0dXJuIFEudGVzdChlLm5vZGVOYW1lKTtcbiAgICAgICAgfSxcbiAgICAgICAgYnV0dG9uOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdmFyIHQgPSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgcmV0dXJuIChcImlucHV0XCIgPT09IHQgJiYgXCJidXR0b25cIiA9PT0gZS50eXBlKSB8fCBcImJ1dHRvblwiID09PSB0O1xuICAgICAgICB9LFxuICAgICAgICB0ZXh0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdmFyIHQ7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIFwiaW5wdXRcIiA9PT0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICYmXG4gICAgICAgICAgICBcInRleHRcIiA9PT0gZS50eXBlICYmXG4gICAgICAgICAgICAobnVsbCA9PSAodCA9IGUuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgfHwgXCJ0ZXh0XCIgPT09IHQudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBmaXJzdDogdmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFswXTtcbiAgICAgICAgfSksXG4gICAgICAgIGxhc3Q6IHZlKGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICByZXR1cm4gW3QgLSAxXTtcbiAgICAgICAgfSksXG4gICAgICAgIGVxOiB2ZShmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICAgICAgcmV0dXJuIFtuIDwgMCA/IG4gKyB0IDogbl07XG4gICAgICAgIH0pLFxuICAgICAgICBldmVuOiB2ZShmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCB0OyBuICs9IDIpIGUucHVzaChuKTtcbiAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfSksXG4gICAgICAgIG9kZDogdmUoZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgIGZvciAodmFyIG4gPSAxOyBuIDwgdDsgbiArPSAyKSBlLnB1c2gobik7XG4gICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH0pLFxuICAgICAgICBsdDogdmUoZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICAgIGZvciAodmFyIHIgPSBuIDwgMCA/IG4gKyB0IDogdCA8IG4gPyB0IDogbjsgMCA8PSAtLXI7ICkgZS5wdXNoKHIpO1xuICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9KSxcbiAgICAgICAgZ3Q6IHZlKGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgICBmb3IgKHZhciByID0gbiA8IDAgPyBuICsgdCA6IG47ICsrciA8IHQ7ICkgZS5wdXNoKHIpO1xuICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pLnBzZXVkb3MubnRoID0gYi5wc2V1ZG9zLmVxKSxcbiAgICB7IHJhZGlvOiAhMCwgY2hlY2tib3g6ICEwLCBmaWxlOiAhMCwgcGFzc3dvcmQ6ICEwLCBpbWFnZTogITAgfSkpXG4gICAgICBiLnBzZXVkb3NbZV0gPSBkZShlKTtcbiAgICBmb3IgKGUgaW4geyBzdWJtaXQ6ICEwLCByZXNldDogITAgfSkgYi5wc2V1ZG9zW2VdID0gaGUoZSk7XG4gICAgZnVuY3Rpb24gbWUoKSB7fVxuICAgIGZ1bmN0aW9uIHhlKGUpIHtcbiAgICAgIGZvciAodmFyIHQgPSAwLCBuID0gZS5sZW5ndGgsIHIgPSBcIlwiOyB0IDwgbjsgdCsrKSByICs9IGVbdF0udmFsdWU7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmUocywgZSwgdCkge1xuICAgICAgdmFyIHUgPSBlLmRpcixcbiAgICAgICAgbCA9IGUubmV4dCxcbiAgICAgICAgYyA9IGwgfHwgdSxcbiAgICAgICAgZiA9IHQgJiYgXCJwYXJlbnROb2RlXCIgPT09IGMsXG4gICAgICAgIHAgPSByKys7XG4gICAgICByZXR1cm4gZS5maXJzdFxuICAgICAgICA/IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgICAgIHdoaWxlICgoZSA9IGVbdV0pKSBpZiAoMSA9PT0gZS5ub2RlVHlwZSB8fCBmKSByZXR1cm4gcyhlLCB0LCBuKTtcbiAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICB9XG4gICAgICAgIDogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICAgICAgdmFyIHIsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgIGEgPSBbUywgcF07XG4gICAgICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgICB3aGlsZSAoKGUgPSBlW3VdKSlcbiAgICAgICAgICAgICAgICBpZiAoKDEgPT09IGUubm9kZVR5cGUgfHwgZikgJiYgcyhlLCB0LCBuKSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIHdoaWxlICgoZSA9IGVbdV0pKVxuICAgICAgICAgICAgICAgIGlmICgxID09PSBlLm5vZGVUeXBlIHx8IGYpXG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICgoaSA9XG4gICAgICAgICAgICAgICAgICAgICAgKG8gPSBlW2tdIHx8IChlW2tdID0ge30pKVtlLnVuaXF1ZUlEXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIChvW2UudW5pcXVlSURdID0ge30pKSxcbiAgICAgICAgICAgICAgICAgICAgbCAmJiBsID09PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGUgPSBlW3VdIHx8IGU7XG4gICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChyID0gaVtjXSkgJiYgclswXSA9PT0gUyAmJiByWzFdID09PSBwKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYVsyXSA9IHJbMl0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKChpW2NdID0gYSlbMl0gPSBzKGUsIHQsIG4pKSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdlKGkpIHtcbiAgICAgIHJldHVybiAxIDwgaS5sZW5ndGhcbiAgICAgICAgPyBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICAgICAgICB2YXIgciA9IGkubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKHItLSkgaWYgKCFpW3JdKGUsIHQsIG4pKSByZXR1cm4gITE7XG4gICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgICAgfVxuICAgICAgICA6IGlbMF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIFRlKGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgIGZvciAodmFyIG8sIGEgPSBbXSwgcyA9IDAsIHUgPSBlLmxlbmd0aCwgbCA9IG51bGwgIT0gdDsgcyA8IHU7IHMrKylcbiAgICAgICAgKG8gPSBlW3NdKSAmJiAoKG4gJiYgIW4obywgciwgaSkpIHx8IChhLnB1c2gobyksIGwgJiYgdC5wdXNoKHMpKSk7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgZnVuY3Rpb24gQ2UoZCwgaCwgZywgdiwgeSwgZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdiAmJiAhdltrXSAmJiAodiA9IENlKHYpKSxcbiAgICAgICAgeSAmJiAheVtrXSAmJiAoeSA9IENlKHksIGUpKSxcbiAgICAgICAgbGUoZnVuY3Rpb24oZSwgdCwgbiwgcikge1xuICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBzID0gW10sXG4gICAgICAgICAgICB1ID0gW10sXG4gICAgICAgICAgICBsID0gdC5sZW5ndGgsXG4gICAgICAgICAgICBjID1cbiAgICAgICAgICAgICAgZSB8fFxuICAgICAgICAgICAgICAoZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwLCBpID0gdC5sZW5ndGg7IHIgPCBpOyByKyspIHNlKGUsIHRbcl0sIG4pO1xuICAgICAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgICAgICB9KShoIHx8IFwiKlwiLCBuLm5vZGVUeXBlID8gW25dIDogbiwgW10pLFxuICAgICAgICAgICAgZiA9ICFkIHx8ICghZSAmJiBoKSA/IGMgOiBUZShjLCBzLCBkLCBuLCByKSxcbiAgICAgICAgICAgIHAgPSBnID8gKHkgfHwgKGUgPyBkIDogbCB8fCB2KSA/IFtdIDogdCkgOiBmO1xuICAgICAgICAgIGlmICgoZyAmJiBnKGYsIHAsIG4sIHIpLCB2KSkge1xuICAgICAgICAgICAgKGkgPSBUZShwLCB1KSksIHYoaSwgW10sIG4sIHIpLCAobyA9IGkubGVuZ3RoKTtcbiAgICAgICAgICAgIHdoaWxlIChvLS0pIChhID0gaVtvXSkgJiYgKHBbdVtvXV0gPSAhKGZbdVtvXV0gPSBhKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICBpZiAoeSB8fCBkKSB7XG4gICAgICAgICAgICAgIGlmICh5KSB7XG4gICAgICAgICAgICAgICAgKGkgPSBbXSksIChvID0gcC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvLS0pIChhID0gcFtvXSkgJiYgaS5wdXNoKChmW29dID0gYSkpO1xuICAgICAgICAgICAgICAgIHkobnVsbCwgKHAgPSBbXSksIGksIHIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG8gPSBwLmxlbmd0aDtcbiAgICAgICAgICAgICAgd2hpbGUgKG8tLSlcbiAgICAgICAgICAgICAgICAoYSA9IHBbb10pICYmXG4gICAgICAgICAgICAgICAgICAtMSA8IChpID0geSA/IFAoZSwgYSkgOiBzW29dKSAmJlxuICAgICAgICAgICAgICAgICAgKGVbaV0gPSAhKHRbaV0gPSBhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIChwID0gVGUocCA9PT0gdCA/IHAuc3BsaWNlKGwsIHAubGVuZ3RoKSA6IHApKSwgeSA/IHkobnVsbCwgdCwgcCwgcikgOiBILmFwcGx5KHQsIHApO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gRWUoZSkge1xuICAgICAgZm9yIChcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgdCxcbiAgICAgICAgICBuLFxuICAgICAgICAgIHIgPSBlLmxlbmd0aCxcbiAgICAgICAgICBvID0gYi5yZWxhdGl2ZVtlWzBdLnR5cGVdLFxuICAgICAgICAgIGEgPSBvIHx8IGIucmVsYXRpdmVbXCIgXCJdLFxuICAgICAgICAgIHMgPSBvID8gMSA6IDAsXG4gICAgICAgICAgdSA9IGJlKFxuICAgICAgICAgICAgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICByZXR1cm4gZSA9PT0gaTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgITBcbiAgICAgICAgICApLFxuICAgICAgICAgIGwgPSBiZShcbiAgICAgICAgICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC0xIDwgUChpLCBlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgITBcbiAgICAgICAgICApLFxuICAgICAgICAgIGMgPSBbXG4gICAgICAgICAgICBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICAgICAgICAgIHZhciByID1cbiAgICAgICAgICAgICAgICAoIW8gJiYgKG4gfHwgdCAhPT0gdykpIHx8XG4gICAgICAgICAgICAgICAgKChpID0gdCkubm9kZVR5cGUgPyB1KGUsIHQsIG4pIDogbChlLCB0LCBuKSk7XG4gICAgICAgICAgICAgIHJldHVybiAoaSA9IG51bGwpLCByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIF07XG4gICAgICAgIHMgPCByO1xuICAgICAgICBzKytcbiAgICAgIClcbiAgICAgICAgaWYgKCh0ID0gYi5yZWxhdGl2ZVtlW3NdLnR5cGVdKSkgYyA9IFtiZSh3ZShjKSwgdCldO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAoKHQgPSBiLmZpbHRlcltlW3NdLnR5cGVdLmFwcGx5KG51bGwsIGVbc10ubWF0Y2hlcykpW2tdKSB7XG4gICAgICAgICAgICBmb3IgKG4gPSArK3M7IG4gPCByOyBuKyspIGlmIChiLnJlbGF0aXZlW2Vbbl0udHlwZV0pIGJyZWFrO1xuICAgICAgICAgICAgcmV0dXJuIENlKFxuICAgICAgICAgICAgICAxIDwgcyAmJiB3ZShjKSxcbiAgICAgICAgICAgICAgMSA8IHMgJiZcbiAgICAgICAgICAgICAgICB4ZShcbiAgICAgICAgICAgICAgICAgIGVcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDAsIHMgLSAxKVxuICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHsgdmFsdWU6IFwiIFwiID09PSBlW3MgLSAyXS50eXBlID8gXCIqXCIgOiBcIlwiIH0pXG4gICAgICAgICAgICAgICAgKS5yZXBsYWNlKEIsIFwiJDFcIiksXG4gICAgICAgICAgICAgIHQsXG4gICAgICAgICAgICAgIHMgPCBuICYmIEVlKGUuc2xpY2UocywgbikpLFxuICAgICAgICAgICAgICBuIDwgciAmJiBFZSgoZSA9IGUuc2xpY2UobikpKSxcbiAgICAgICAgICAgICAgbiA8IHIgJiYgeGUoZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGMucHVzaCh0KTtcbiAgICAgICAgfVxuICAgICAgcmV0dXJuIHdlKGMpO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgKG1lLnByb3RvdHlwZSA9IGIuZmlsdGVycyA9IGIucHNldWRvcyksXG4gICAgICAoYi5zZXRGaWx0ZXJzID0gbmV3IG1lKCkpLFxuICAgICAgKGggPSBzZS50b2tlbml6ZSA9IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgdmFyIG4sXG4gICAgICAgICAgcixcbiAgICAgICAgICBpLFxuICAgICAgICAgIG8sXG4gICAgICAgICAgYSxcbiAgICAgICAgICBzLFxuICAgICAgICAgIHUsXG4gICAgICAgICAgbCA9IHhbZSArIFwiIFwiXTtcbiAgICAgICAgaWYgKGwpIHJldHVybiB0ID8gMCA6IGwuc2xpY2UoMCk7XG4gICAgICAgIChhID0gZSksIChzID0gW10pLCAodSA9IGIucHJlRmlsdGVyKTtcbiAgICAgICAgd2hpbGUgKGEpIHtcbiAgICAgICAgICBmb3IgKG8gaW4gKChuICYmICEociA9IF8uZXhlYyhhKSkpIHx8XG4gICAgICAgICAgICAociAmJiAoYSA9IGEuc2xpY2UoclswXS5sZW5ndGgpIHx8IGEpLCBzLnB1c2goKGkgPSBbXSkpKSxcbiAgICAgICAgICAobiA9ICExKSxcbiAgICAgICAgICAociA9IHouZXhlYyhhKSkgJiZcbiAgICAgICAgICAgICgobiA9IHIuc2hpZnQoKSksXG4gICAgICAgICAgICBpLnB1c2goeyB2YWx1ZTogbiwgdHlwZTogclswXS5yZXBsYWNlKEIsIFwiIFwiKSB9KSxcbiAgICAgICAgICAgIChhID0gYS5zbGljZShuLmxlbmd0aCkpKSxcbiAgICAgICAgICBiLmZpbHRlcikpXG4gICAgICAgICAgICAhKHIgPSBHW29dLmV4ZWMoYSkpIHx8XG4gICAgICAgICAgICAgICh1W29dICYmICEociA9IHVbb10ocikpKSB8fFxuICAgICAgICAgICAgICAoKG4gPSByLnNoaWZ0KCkpLFxuICAgICAgICAgICAgICBpLnB1c2goeyB2YWx1ZTogbiwgdHlwZTogbywgbWF0Y2hlczogciB9KSxcbiAgICAgICAgICAgICAgKGEgPSBhLnNsaWNlKG4ubGVuZ3RoKSkpO1xuICAgICAgICAgIGlmICghbikgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQgPyBhLmxlbmd0aCA6IGEgPyBzZS5lcnJvcihlKSA6IHgoZSwgcykuc2xpY2UoMCk7XG4gICAgICB9KSxcbiAgICAgIChmID0gc2UuY29tcGlsZSA9IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgdmFyIG4sXG4gICAgICAgICAgdixcbiAgICAgICAgICB5LFxuICAgICAgICAgIG0sXG4gICAgICAgICAgeCxcbiAgICAgICAgICByLFxuICAgICAgICAgIGkgPSBbXSxcbiAgICAgICAgICBvID0gW10sXG4gICAgICAgICAgYSA9IE5bZSArIFwiIFwiXTtcbiAgICAgICAgaWYgKCFhKSB7XG4gICAgICAgICAgdCB8fCAodCA9IGgoZSkpLCAobiA9IHQubGVuZ3RoKTtcbiAgICAgICAgICB3aGlsZSAobi0tKSAoYSA9IEVlKHRbbl0pKVtrXSA/IGkucHVzaChhKSA6IG8ucHVzaChhKTtcbiAgICAgICAgICAoYSA9IE4oXG4gICAgICAgICAgICBlLFxuICAgICAgICAgICAgKCh2ID0gbyksXG4gICAgICAgICAgICAobSA9IDAgPCAoeSA9IGkpLmxlbmd0aCksXG4gICAgICAgICAgICAoeCA9IDAgPCB2Lmxlbmd0aCksXG4gICAgICAgICAgICAociA9IGZ1bmN0aW9uKGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgICAgICAgdmFyIG8sXG4gICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgIHUgPSAwLFxuICAgICAgICAgICAgICAgIGwgPSBcIjBcIixcbiAgICAgICAgICAgICAgICBjID0gZSAmJiBbXSxcbiAgICAgICAgICAgICAgICBmID0gW10sXG4gICAgICAgICAgICAgICAgcCA9IHcsXG4gICAgICAgICAgICAgICAgZCA9IGUgfHwgKHggJiYgYi5maW5kLlRBRyhcIipcIiwgaSkpLFxuICAgICAgICAgICAgICAgIGggPSAoUyArPSBudWxsID09IHAgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuICAgICAgICAgICAgICAgIGcgPSBkLmxlbmd0aDtcbiAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICBpICYmICh3ID0gdCA9PT0gQyB8fCB0IHx8IGkpO1xuICAgICAgICAgICAgICAgIGwgIT09IGcgJiYgbnVsbCAhPSAobyA9IGRbbF0pO1xuICAgICAgICAgICAgICAgIGwrK1xuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpZiAoeCAmJiBvKSB7XG4gICAgICAgICAgICAgICAgICAoYSA9IDApLCB0IHx8IG8ub3duZXJEb2N1bWVudCA9PT0gQyB8fCAoVChvKSwgKG4gPSAhRSkpO1xuICAgICAgICAgICAgICAgICAgd2hpbGUgKChzID0gdlthKytdKSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMobywgdCB8fCBDLCBuKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHIucHVzaChvKTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaSAmJiAoUyA9IGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtICYmICgobyA9ICFzICYmIG8pICYmIHUtLSwgZSAmJiBjLnB1c2gobykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICgoKHUgKz0gbCksIG0gJiYgbCAhPT0gdSkpIHtcbiAgICAgICAgICAgICAgICBhID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoKHMgPSB5W2ErK10pKSBzKGMsIGYsIHQsIG4pO1xuICAgICAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoMCA8IHUpIHdoaWxlIChsLS0pIGNbbF0gfHwgZltsXSB8fCAoZltsXSA9IHEuY2FsbChyKSk7XG4gICAgICAgICAgICAgICAgICBmID0gVGUoZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEguYXBwbHkociwgZiksXG4gICAgICAgICAgICAgICAgICBpICYmXG4gICAgICAgICAgICAgICAgICAgICFlICYmXG4gICAgICAgICAgICAgICAgICAgIDAgPCBmLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAxIDwgdSArIHkubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgIHNlLnVuaXF1ZVNvcnQocik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGkgJiYgKChTID0gaCksICh3ID0gcCkpLCBjO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBtID8gbGUocikgOiByKVxuICAgICAgICAgICkpLnNlbGVjdG9yID0gZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0pLFxuICAgICAgKGcgPSBzZS5zZWxlY3QgPSBmdW5jdGlvbihlLCB0LCBuLCByKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgIG8sXG4gICAgICAgICAgYSxcbiAgICAgICAgICBzLFxuICAgICAgICAgIHUsXG4gICAgICAgICAgbCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSAmJiBlLFxuICAgICAgICAgIGMgPSAhciAmJiBoKChlID0gbC5zZWxlY3RvciB8fCBlKSk7XG4gICAgICAgIGlmICgoKG4gPSBuIHx8IFtdKSwgMSA9PT0gYy5sZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgMiA8IChvID0gY1swXSA9IGNbMF0uc2xpY2UoMCkpLmxlbmd0aCAmJlxuICAgICAgICAgICAgXCJJRFwiID09PSAoYSA9IG9bMF0pLnR5cGUgJiZcbiAgICAgICAgICAgIDkgPT09IHQubm9kZVR5cGUgJiZcbiAgICAgICAgICAgIEUgJiZcbiAgICAgICAgICAgIGIucmVsYXRpdmVbb1sxXS50eXBlXVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKCEodCA9IChiLmZpbmQuSUQoYS5tYXRjaGVzWzBdLnJlcGxhY2UodGUsIG5lKSwgdCkgfHwgW10pWzBdKSlcbiAgICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgICAgICBsICYmICh0ID0gdC5wYXJlbnROb2RlKSwgKGUgPSBlLnNsaWNlKG8uc2hpZnQoKS52YWx1ZS5sZW5ndGgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaSA9IEcubmVlZHNDb250ZXh0LnRlc3QoZSkgPyAwIDogby5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaWYgKCgoYSA9IG9baV0pLCBiLnJlbGF0aXZlWyhzID0gYS50eXBlKV0pKSBicmVhaztcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgKHUgPSBiLmZpbmRbc10pICYmXG4gICAgICAgICAgICAgIChyID0gdShcbiAgICAgICAgICAgICAgICBhLm1hdGNoZXNbMF0ucmVwbGFjZSh0ZSwgbmUpLFxuICAgICAgICAgICAgICAgIChlZS50ZXN0KG9bMF0udHlwZSkgJiYgeWUodC5wYXJlbnROb2RlKSkgfHwgdFxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmICgoby5zcGxpY2UoaSwgMSksICEoZSA9IHIubGVuZ3RoICYmIHhlKG8pKSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIEguYXBwbHkobiwgciksIG47XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChsIHx8IGYoZSwgYykpKFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIHQsXG4gICAgICAgICAgICAhRSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAhdCB8fCAoZWUudGVzdChlKSAmJiB5ZSh0LnBhcmVudE5vZGUpKSB8fCB0XG4gICAgICAgICAgKSxcbiAgICAgICAgICBuXG4gICAgICAgICk7XG4gICAgICB9KSxcbiAgICAgIChkLnNvcnRTdGFibGUgPVxuICAgICAgICBrXG4gICAgICAgICAgLnNwbGl0KFwiXCIpXG4gICAgICAgICAgLnNvcnQoRClcbiAgICAgICAgICAuam9pbihcIlwiKSA9PT0gayksXG4gICAgICAoZC5kZXRlY3REdXBsaWNhdGVzID0gISFsKSxcbiAgICAgIFQoKSxcbiAgICAgIChkLnNvcnREZXRhY2hlZCA9IGNlKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIDEgJiBlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKEMuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpKTtcbiAgICAgIH0pKSxcbiAgICAgIGNlKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoZS5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIiksXG4gICAgICAgICAgXCIjXCIgPT09IGUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpXG4gICAgICAgICk7XG4gICAgICB9KSB8fFxuICAgICAgICBmZShcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICAgIGlmICghbikgcmV0dXJuIGUuZ2V0QXR0cmlidXRlKHQsIFwidHlwZVwiID09PSB0LnRvTG93ZXJDYXNlKCkgPyAxIDogMik7XG4gICAgICAgIH0pLFxuICAgICAgKGQuYXR0cmlidXRlcyAmJlxuICAgICAgICBjZShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChlLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIiksXG4gICAgICAgICAgICBlLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJcIiksXG4gICAgICAgICAgICBcIlwiID09PSBlLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbiAgICAgICAgICApO1xuICAgICAgICB9KSkgfHxcbiAgICAgICAgZmUoXCJ2YWx1ZVwiLCBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICAgICAgaWYgKCFuICYmIFwiaW5wdXRcIiA9PT0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSByZXR1cm4gZS5kZWZhdWx0VmFsdWU7XG4gICAgICAgIH0pLFxuICAgICAgY2UoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gbnVsbCA9PSBlLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgfSkgfHxcbiAgICAgICAgZmUoUiwgZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICAgIHZhciByO1xuICAgICAgICAgIGlmICghbilcbiAgICAgICAgICAgIHJldHVybiAhMCA9PT0gZVt0XVxuICAgICAgICAgICAgICA/IHQudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICA6IChyID0gZS5nZXRBdHRyaWJ1dGVOb2RlKHQpKSAmJiByLnNwZWNpZmllZFxuICAgICAgICAgICAgICA/IHIudmFsdWVcbiAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB9KSxcbiAgICAgIHNlXG4gICAgKTtcbiAgfSkoQyk7XG4gIChrLmZpbmQgPSBoKSxcbiAgICAoay5leHByID0gaC5zZWxlY3RvcnMpLFxuICAgIChrLmV4cHJbXCI6XCJdID0gay5leHByLnBzZXVkb3MpLFxuICAgIChrLnVuaXF1ZVNvcnQgPSBrLnVuaXF1ZSA9IGgudW5pcXVlU29ydCksXG4gICAgKGsudGV4dCA9IGguZ2V0VGV4dCksXG4gICAgKGsuaXNYTUxEb2MgPSBoLmlzWE1MKSxcbiAgICAoay5jb250YWlucyA9IGguY29udGFpbnMpLFxuICAgIChrLmVzY2FwZVNlbGVjdG9yID0gaC5lc2NhcGUpO1xuICB2YXIgVCA9IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgIHZhciByID0gW10sXG4gICAgICAgIGkgPSB2b2lkIDAgIT09IG47XG4gICAgICB3aGlsZSAoKGUgPSBlW3RdKSAmJiA5ICE9PSBlLm5vZGVUeXBlKVxuICAgICAgICBpZiAoMSA9PT0gZS5ub2RlVHlwZSkge1xuICAgICAgICAgIGlmIChpICYmIGsoZSkuaXMobikpIGJyZWFrO1xuICAgICAgICAgIHIucHVzaChlKTtcbiAgICAgICAgfVxuICAgICAgcmV0dXJuIHI7XG4gICAgfSxcbiAgICBTID0gZnVuY3Rpb24oZSwgdCkge1xuICAgICAgZm9yICh2YXIgbiA9IFtdOyBlOyBlID0gZS5uZXh0U2libGluZylcbiAgICAgICAgMSA9PT0gZS5ub2RlVHlwZSAmJiBlICE9PSB0ICYmIG4ucHVzaChlKTtcbiAgICAgIHJldHVybiBuO1xuICAgIH0sXG4gICAgTiA9IGsuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG4gIGZ1bmN0aW9uIEEoZSwgdCkge1xuICAgIHJldHVybiBlLm5vZGVOYW1lICYmIGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gdC50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIHZhciBEID0gL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2k7XG4gIGZ1bmN0aW9uIGooZSwgbiwgcikge1xuICAgIHJldHVybiBtKG4pXG4gICAgICA/IGsuZ3JlcChlLCBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgcmV0dXJuICEhbi5jYWxsKGUsIHQsIGUpICE9PSByO1xuICAgICAgICB9KVxuICAgICAgOiBuLm5vZGVUeXBlXG4gICAgICA/IGsuZ3JlcChlLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgcmV0dXJuIChlID09PSBuKSAhPT0gcjtcbiAgICAgICAgfSlcbiAgICAgIDogXCJzdHJpbmdcIiAhPSB0eXBlb2YgblxuICAgICAgPyBrLmdyZXAoZSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiAtMSA8IGkuY2FsbChuLCBlKSAhPT0gcjtcbiAgICAgICAgfSlcbiAgICAgIDogay5maWx0ZXIobiwgZSwgcik7XG4gIH1cbiAgKGsuZmlsdGVyID0gZnVuY3Rpb24oZSwgdCwgbikge1xuICAgIHZhciByID0gdFswXTtcbiAgICByZXR1cm4gKFxuICAgICAgbiAmJiAoZSA9IFwiOm5vdChcIiArIGUgKyBcIilcIiksXG4gICAgICAxID09PSB0Lmxlbmd0aCAmJiAxID09PSByLm5vZGVUeXBlXG4gICAgICAgID8gay5maW5kLm1hdGNoZXNTZWxlY3RvcihyLCBlKVxuICAgICAgICAgID8gW3JdXG4gICAgICAgICAgOiBbXVxuICAgICAgICA6IGsuZmluZC5tYXRjaGVzKFxuICAgICAgICAgICAgZSxcbiAgICAgICAgICAgIGsuZ3JlcCh0LCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIHJldHVybiAxID09PSBlLm5vZGVUeXBlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgKTtcbiAgfSksXG4gICAgay5mbi5leHRlbmQoe1xuICAgICAgZmluZDogZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgdCxcbiAgICAgICAgICBuLFxuICAgICAgICAgIHIgPSB0aGlzLmxlbmd0aCxcbiAgICAgICAgICBpID0gdGhpcztcbiAgICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuICAgICAgICAgICAgayhlKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGZvciAodCA9IDA7IHQgPCByOyB0KyspIGlmIChrLmNvbnRhaW5zKGlbdF0sIHRoaXMpKSByZXR1cm4gITA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIGZvciAobiA9IHRoaXMucHVzaFN0YWNrKFtdKSwgdCA9IDA7IHQgPCByOyB0KyspIGsuZmluZChlLCBpW3RdLCBuKTtcbiAgICAgICAgcmV0dXJuIDEgPCByID8gay51bmlxdWVTb3J0KG4pIDogbjtcbiAgICAgIH0sXG4gICAgICBmaWx0ZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKGoodGhpcywgZSB8fCBbXSwgITEpKTtcbiAgICAgIH0sXG4gICAgICBub3Q6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKGoodGhpcywgZSB8fCBbXSwgITApKTtcbiAgICAgIH0sXG4gICAgICBpczogZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gISFqKHRoaXMsIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgJiYgTi50ZXN0KGUpID8gayhlKSA6IGUgfHwgW10sICExKVxuICAgICAgICAgIC5sZW5ndGg7XG4gICAgICB9XG4gICAgfSk7XG4gIHZhciBxLFxuICAgIEwgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLztcbiAgKChrLmZuLmluaXQgPSBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgdmFyIHIsIGk7XG4gICAgaWYgKCFlKSByZXR1cm4gdGhpcztcbiAgICBpZiAoKChuID0gbiB8fCBxKSwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIShyID1cbiAgICAgICAgICBcIjxcIiA9PT0gZVswXSAmJiBcIj5cIiA9PT0gZVtlLmxlbmd0aCAtIDFdICYmIDMgPD0gZS5sZW5ndGhcbiAgICAgICAgICAgID8gW251bGwsIGUsIG51bGxdXG4gICAgICAgICAgICA6IEwuZXhlYyhlKSkgfHxcbiAgICAgICAgKCFyWzFdICYmIHQpXG4gICAgICApXG4gICAgICAgIHJldHVybiAhdCB8fCB0LmpxdWVyeSA/ICh0IHx8IG4pLmZpbmQoZSkgOiB0aGlzLmNvbnN0cnVjdG9yKHQpLmZpbmQoZSk7XG4gICAgICBpZiAoclsxXSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKCh0ID0gdCBpbnN0YW5jZW9mIGsgPyB0WzBdIDogdCksXG4gICAgICAgICAgay5tZXJnZShcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBrLnBhcnNlSFRNTChyWzFdLCB0ICYmIHQubm9kZVR5cGUgPyB0Lm93bmVyRG9jdW1lbnQgfHwgdCA6IEUsICEwKVxuICAgICAgICAgICksXG4gICAgICAgICAgRC50ZXN0KHJbMV0pICYmIGsuaXNQbGFpbk9iamVjdCh0KSlcbiAgICAgICAgKVxuICAgICAgICAgIGZvciAociBpbiB0KSBtKHRoaXNbcl0pID8gdGhpc1tyXSh0W3JdKSA6IHRoaXMuYXR0cihyLCB0W3JdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoaSA9IEUuZ2V0RWxlbWVudEJ5SWQoclsyXSkpICYmICgodGhpc1swXSA9IGkpLCAodGhpcy5sZW5ndGggPSAxKSksIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBlLm5vZGVUeXBlXG4gICAgICA/ICgodGhpc1swXSA9IGUpLCAodGhpcy5sZW5ndGggPSAxKSwgdGhpcylcbiAgICAgIDogbShlKVxuICAgICAgPyB2b2lkIDAgIT09IG4ucmVhZHlcbiAgICAgICAgPyBuLnJlYWR5KGUpXG4gICAgICAgIDogZShrKVxuICAgICAgOiBrLm1ha2VBcnJheShlLCB0aGlzKTtcbiAgfSkucHJvdG90eXBlID0gay5mbiksXG4gICAgKHEgPSBrKEUpKTtcbiAgdmFyIEggPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcbiAgICBPID0geyBjaGlsZHJlbjogITAsIGNvbnRlbnRzOiAhMCwgbmV4dDogITAsIHByZXY6ICEwIH07XG4gIGZ1bmN0aW9uIFAoZSwgdCkge1xuICAgIHdoaWxlICgoZSA9IGVbdF0pICYmIDEgIT09IGUubm9kZVR5cGUpO1xuICAgIHJldHVybiBlO1xuICB9XG4gIGsuZm4uZXh0ZW5kKHtcbiAgICBoYXM6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciB0ID0gayhlLCB0aGlzKSxcbiAgICAgICAgbiA9IHQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IG47IGUrKykgaWYgKGsuY29udGFpbnModGhpcywgdFtlXSkpIHJldHVybiAhMDtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2xvc2VzdDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgdmFyIG4sXG4gICAgICAgIHIgPSAwLFxuICAgICAgICBpID0gdGhpcy5sZW5ndGgsXG4gICAgICAgIG8gPSBbXSxcbiAgICAgICAgYSA9IFwic3RyaW5nXCIgIT0gdHlwZW9mIGUgJiYgayhlKTtcbiAgICAgIGlmICghTi50ZXN0KGUpKVxuICAgICAgICBmb3IgKDsgciA8IGk7IHIrKylcbiAgICAgICAgICBmb3IgKG4gPSB0aGlzW3JdOyBuICYmIG4gIT09IHQ7IG4gPSBuLnBhcmVudE5vZGUpXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIG4ubm9kZVR5cGUgPCAxMSAmJlxuICAgICAgICAgICAgICAoYVxuICAgICAgICAgICAgICAgID8gLTEgPCBhLmluZGV4KG4pXG4gICAgICAgICAgICAgICAgOiAxID09PSBuLm5vZGVUeXBlICYmIGsuZmluZC5tYXRjaGVzU2VsZWN0b3IobiwgZSkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgby5wdXNoKG4pO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjaygxIDwgby5sZW5ndGggPyBrLnVuaXF1ZVNvcnQobykgOiBvKTtcbiAgICB9LFxuICAgIGluZGV4OiBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gZVxuICAgICAgICA/IFwic3RyaW5nXCIgPT0gdHlwZW9mIGVcbiAgICAgICAgICA/IGkuY2FsbChrKGUpLCB0aGlzWzBdKVxuICAgICAgICAgIDogaS5jYWxsKHRoaXMsIGUuanF1ZXJ5ID8gZVswXSA6IGUpXG4gICAgICAgIDogdGhpc1swXSAmJiB0aGlzWzBdLnBhcmVudE5vZGVcbiAgICAgICAgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aFxuICAgICAgICA6IC0xO1xuICAgIH0sXG4gICAgYWRkOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soay51bmlxdWVTb3J0KGsubWVyZ2UodGhpcy5nZXQoKSwgayhlLCB0KSkpKTtcbiAgICB9LFxuICAgIGFkZEJhY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmFkZChudWxsID09IGUgPyB0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKGUpKTtcbiAgICB9XG4gIH0pLFxuICAgIGsuZWFjaChcbiAgICAgIHtcbiAgICAgICAgcGFyZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdmFyIHQgPSBlLnBhcmVudE5vZGU7XG4gICAgICAgICAgcmV0dXJuIHQgJiYgMTEgIT09IHQubm9kZVR5cGUgPyB0IDogbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgcGFyZW50czogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiBUKGUsIFwicGFyZW50Tm9kZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgcGFyZW50c1VudGlsOiBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICAgICAgcmV0dXJuIFQoZSwgXCJwYXJlbnROb2RlXCIsIG4pO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgcmV0dXJuIFAoZSwgXCJuZXh0U2libGluZ1wiKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJldjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiBQKGUsIFwicHJldmlvdXNTaWJsaW5nXCIpO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0QWxsOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgcmV0dXJuIFQoZSwgXCJuZXh0U2libGluZ1wiKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJldkFsbDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiBUKGUsIFwicHJldmlvdXNTaWJsaW5nXCIpO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0VW50aWw6IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgICByZXR1cm4gVChlLCBcIm5leHRTaWJsaW5nXCIsIG4pO1xuICAgICAgICB9LFxuICAgICAgICBwcmV2VW50aWw6IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgICByZXR1cm4gVChlLCBcInByZXZpb3VzU2libGluZ1wiLCBuKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2libGluZ3M6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICByZXR1cm4gUygoZS5wYXJlbnROb2RlIHx8IHt9KS5maXJzdENoaWxkLCBlKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICByZXR1cm4gUyhlLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9LFxuICAgICAgICBjb250ZW50czogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlLmNvbnRlbnREb2N1bWVudFxuICAgICAgICAgICAgPyBlLmNvbnRlbnREb2N1bWVudFxuICAgICAgICAgICAgOiAoQShlLCBcInRlbXBsYXRlXCIpICYmIChlID0gZS5jb250ZW50IHx8IGUpLFxuICAgICAgICAgICAgICBrLm1lcmdlKFtdLCBlLmNoaWxkTm9kZXMpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKHIsIGkpIHtcbiAgICAgICAgay5mbltyXSA9IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICB2YXIgbiA9IGsubWFwKHRoaXMsIGksIGUpO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBcIlVudGlsXCIgIT09IHIuc2xpY2UoLTUpICYmICh0ID0gZSksXG4gICAgICAgICAgICB0ICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgKG4gPSBrLmZpbHRlcih0LCBuKSksXG4gICAgICAgICAgICAxIDwgdGhpcy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgKE9bcl0gfHwgay51bmlxdWVTb3J0KG4pLCBILnRlc3QocikgJiYgbi5yZXZlcnNlKCkpLFxuICAgICAgICAgICAgdGhpcy5wdXNoU3RhY2sobilcbiAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICk7XG4gIHZhciBSID0gL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nO1xuICBmdW5jdGlvbiBNKGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfVxuICBmdW5jdGlvbiBJKGUpIHtcbiAgICB0aHJvdyBlO1xuICB9XG4gIGZ1bmN0aW9uIFcoZSwgdCwgbiwgcikge1xuICAgIHZhciBpO1xuICAgIHRyeSB7XG4gICAgICBlICYmIG0oKGkgPSBlLnByb21pc2UpKVxuICAgICAgICA/IGlcbiAgICAgICAgICAgIC5jYWxsKGUpXG4gICAgICAgICAgICAuZG9uZSh0KVxuICAgICAgICAgICAgLmZhaWwobilcbiAgICAgICAgOiBlICYmIG0oKGkgPSBlLnRoZW4pKVxuICAgICAgICA/IGkuY2FsbChlLCB0LCBuKVxuICAgICAgICA6IHQuYXBwbHkodm9pZCAwLCBbZV0uc2xpY2UocikpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIG4uYXBwbHkodm9pZCAwLCBbZV0pO1xuICAgIH1cbiAgfVxuICAoay5DYWxsYmFja3MgPSBmdW5jdGlvbihyKSB7XG4gICAgdmFyIGUsIG47XG4gICAgciA9XG4gICAgICBcInN0cmluZ1wiID09IHR5cGVvZiByXG4gICAgICAgID8gKChlID0gciksXG4gICAgICAgICAgKG4gPSB7fSksXG4gICAgICAgICAgay5lYWNoKGUubWF0Y2goUikgfHwgW10sIGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIG5bdF0gPSAhMDtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuKVxuICAgICAgICA6IGsuZXh0ZW5kKHt9LCByKTtcbiAgICB2YXIgaSxcbiAgICAgIHQsXG4gICAgICBvLFxuICAgICAgYSxcbiAgICAgIHMgPSBbXSxcbiAgICAgIHUgPSBbXSxcbiAgICAgIGwgPSAtMSxcbiAgICAgIGMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yIChhID0gYSB8fCByLm9uY2UsIG8gPSBpID0gITA7IHUubGVuZ3RoOyBsID0gLTEpIHtcbiAgICAgICAgICB0ID0gdS5zaGlmdCgpO1xuICAgICAgICAgIHdoaWxlICgrK2wgPCBzLmxlbmd0aClcbiAgICAgICAgICAgICExID09PSBzW2xdLmFwcGx5KHRbMF0sIHRbMV0pICYmXG4gICAgICAgICAgICAgIHIuc3RvcE9uRmFsc2UgJiZcbiAgICAgICAgICAgICAgKChsID0gcy5sZW5ndGgpLCAodCA9ICExKSk7XG4gICAgICAgIH1cbiAgICAgICAgci5tZW1vcnkgfHwgKHQgPSAhMSksIChpID0gITEpLCBhICYmIChzID0gdCA/IFtdIDogXCJcIik7XG4gICAgICB9LFxuICAgICAgZiA9IHtcbiAgICAgICAgYWRkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgcyAmJlxuICAgICAgICAgICAgICAodCAmJiAhaSAmJiAoKGwgPSBzLmxlbmd0aCAtIDEpLCB1LnB1c2godCkpLFxuICAgICAgICAgICAgICAoZnVuY3Rpb24gbihlKSB7XG4gICAgICAgICAgICAgICAgay5lYWNoKGUsIGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICAgIG0odClcbiAgICAgICAgICAgICAgICAgICAgPyAoci51bmlxdWUgJiYgZi5oYXModCkpIHx8IHMucHVzaCh0KVxuICAgICAgICAgICAgICAgICAgICA6IHQgJiYgdC5sZW5ndGggJiYgXCJzdHJpbmdcIiAhPT0gdyh0KSAmJiBuKHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KShhcmd1bWVudHMpLFxuICAgICAgICAgICAgICB0ICYmICFpICYmIGMoKSksXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgay5lYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICB2YXIgbjtcbiAgICAgICAgICAgICAgd2hpbGUgKC0xIDwgKG4gPSBrLmluQXJyYXkodCwgcywgbikpKVxuICAgICAgICAgICAgICAgIHMuc3BsaWNlKG4sIDEpLCBuIDw9IGwgJiYgbC0tO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFzOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgcmV0dXJuIGUgPyAtMSA8IGsuaW5BcnJheShlLCBzKSA6IDAgPCBzLmxlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzICYmIChzID0gW10pLCB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBkaXNhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gKGEgPSB1ID0gW10pLCAocyA9IHQgPSBcIlwiKSwgdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAhcztcbiAgICAgICAgfSxcbiAgICAgICAgbG9jazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIChhID0gdSA9IFtdKSwgdCB8fCBpIHx8IChzID0gdCA9IFwiXCIpLCB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAhIWE7XG4gICAgICAgIH0sXG4gICAgICAgIGZpcmVXaXRoOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGEgfHxcbiAgICAgICAgICAgICAgKCh0ID0gW2UsICh0ID0gdCB8fCBbXSkuc2xpY2UgPyB0LnNsaWNlKCkgOiB0XSksXG4gICAgICAgICAgICAgIHUucHVzaCh0KSxcbiAgICAgICAgICAgICAgaSB8fCBjKCkpLFxuICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIGZpcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBmLmZpcmVXaXRoKHRoaXMsIGFyZ3VtZW50cyksIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGZpcmVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gISFvO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIHJldHVybiBmO1xuICB9KSxcbiAgICBrLmV4dGVuZCh7XG4gICAgICBEZWZlcnJlZDogZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgbyA9IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgXCJub3RpZnlcIixcbiAgICAgICAgICAgICAgXCJwcm9ncmVzc1wiLFxuICAgICAgICAgICAgICBrLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSxcbiAgICAgICAgICAgICAgay5DYWxsYmFja3MoXCJtZW1vcnlcIiksXG4gICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIFwicmVzb2x2ZVwiLFxuICAgICAgICAgICAgICBcImRvbmVcIixcbiAgICAgICAgICAgICAgay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcbiAgICAgICAgICAgICAgay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgXCJyZXNvbHZlZFwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBcInJlamVjdFwiLFxuICAgICAgICAgICAgICBcImZhaWxcIixcbiAgICAgICAgICAgICAgay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcbiAgICAgICAgICAgICAgay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcbiAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgXCJyZWplY3RlZFwiXG4gICAgICAgICAgICBdXG4gICAgICAgICAgXSxcbiAgICAgICAgICBpID0gXCJwZW5kaW5nXCIsXG4gICAgICAgICAgYSA9IHtcbiAgICAgICAgICAgIHN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWx3YXlzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHMuZG9uZShhcmd1bWVudHMpLmZhaWwoYXJndW1lbnRzKSwgdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXRjaDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICByZXR1cm4gYS50aGVuKG51bGwsIGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBpcGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgaSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgcmV0dXJuIGtcbiAgICAgICAgICAgICAgICAuRGVmZXJyZWQoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgay5lYWNoKG8sIGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBtKGlbdFs0XV0pICYmIGlbdFs0XV07XG4gICAgICAgICAgICAgICAgICAgIHNbdFsxXV0oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBuICYmIG4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICBlICYmIG0oZS5wcm9taXNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByb21pc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wcm9ncmVzcyhyLm5vdGlmeSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZG9uZShyLnJlc29sdmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZhaWwoci5yZWplY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJbdFswXSArIFwiV2l0aFwiXSh0aGlzLCBuID8gW2VdIDogYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKGkgPSBudWxsKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5wcm9taXNlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhlbjogZnVuY3Rpb24odCwgbiwgcikge1xuICAgICAgICAgICAgICB2YXIgdSA9IDA7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGwoaSwgbywgYSwgcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgciA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBlLCB0O1xuICAgICAgICAgICAgICAgICAgICAgIGlmICghKGkgPCB1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChlID0gYS5hcHBseShuLCByKSkgPT09IG8ucHJvbWlzZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKHQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICBlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChcIm9iamVjdFwiID09IHR5cGVvZiBlIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZS50aGVuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbSh0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0LmNhbGwoZSwgbCh1LCBvLCBNLCBzKSwgbCh1LCBvLCBJLCBzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKHUrKyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCh1LCBvLCBNLCBzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsKHUsIG8sIEksIHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwodSwgbywgTSwgby5ub3RpZnlXaXRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGEgIT09IE0gJiYgKChuID0gdm9pZCAwKSwgKHIgPSBbZV0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzIHx8IG8ucmVzb2x2ZVdpdGgpKG4sIHIpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHQgPSBzXG4gICAgICAgICAgICAgICAgICAgICAgPyBlXG4gICAgICAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhlLCB0LnN0YWNrVHJhY2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA8PSBpICsgMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYSAhPT0gSSAmJiAoKG4gPSB2b2lkIDApLCAociA9IFtlXSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnJlamVjdFdpdGgobiwgcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgICA/IHQoKVxuICAgICAgICAgICAgICAgICAgICA6IChrLkRlZmVycmVkLmdldFN0YWNrSG9vayAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHQuc3RhY2tUcmFjZSA9IGsuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLFxuICAgICAgICAgICAgICAgICAgICAgIEMuc2V0VGltZW91dCh0KSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4ga1xuICAgICAgICAgICAgICAgIC5EZWZlcnJlZChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICBvWzBdWzNdLmFkZChsKDAsIGUsIG0ocikgPyByIDogTSwgZS5ub3RpZnlXaXRoKSksXG4gICAgICAgICAgICAgICAgICAgIG9bMV1bM10uYWRkKGwoMCwgZSwgbSh0KSA/IHQgOiBNKSksXG4gICAgICAgICAgICAgICAgICAgIG9bMl1bM10uYWRkKGwoMCwgZSwgbShuKSA/IG4gOiBJKSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucHJvbWlzZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb21pc2U6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGwgIT0gZSA/IGsuZXh0ZW5kKGUsIGEpIDogYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHMgPSB7fTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBrLmVhY2gobywgZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgdmFyIG4gPSB0WzJdLFxuICAgICAgICAgICAgICByID0gdFs1XTtcbiAgICAgICAgICAgIChhW3RbMV1dID0gbi5hZGQpLFxuICAgICAgICAgICAgICByICYmXG4gICAgICAgICAgICAgICAgbi5hZGQoXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaSA9IHI7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgb1szIC0gZV1bMl0uZGlzYWJsZSxcbiAgICAgICAgICAgICAgICAgIG9bMyAtIGVdWzNdLmRpc2FibGUsXG4gICAgICAgICAgICAgICAgICBvWzBdWzJdLmxvY2ssXG4gICAgICAgICAgICAgICAgICBvWzBdWzNdLmxvY2tcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBuLmFkZCh0WzNdLmZpcmUpLFxuICAgICAgICAgICAgICAoc1t0WzBdXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICBzW3RbMF0gKyBcIldpdGhcIl0odGhpcyA9PT0gcyA/IHZvaWQgMCA6IHRoaXMsIGFyZ3VtZW50cyksIHRoaXNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHNbdFswXSArIFwiV2l0aFwiXSA9IG4uZmlyZVdpdGgpO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGEucHJvbWlzZShzKSxcbiAgICAgICAgICBlICYmIGUuY2FsbChzLCBzKSxcbiAgICAgICAgICBzXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgd2hlbjogZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgdCA9IG4sXG4gICAgICAgICAgciA9IEFycmF5KHQpLFxuICAgICAgICAgIGkgPSBzLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgICBvID0gay5EZWZlcnJlZCgpLFxuICAgICAgICAgIGEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAoclt0XSA9IHRoaXMpLFxuICAgICAgICAgICAgICAgIChpW3RdID0gMSA8IGFyZ3VtZW50cy5sZW5ndGggPyBzLmNhbGwoYXJndW1lbnRzKSA6IGUpLFxuICAgICAgICAgICAgICAgIC0tbiB8fCBvLnJlc29sdmVXaXRoKHIsIGkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbiA8PSAxICYmXG4gICAgICAgICAgKFcoZSwgby5kb25lKGEodCkpLnJlc29sdmUsIG8ucmVqZWN0LCAhbiksXG4gICAgICAgICAgXCJwZW5kaW5nXCIgPT09IG8uc3RhdGUoKSB8fCBtKGlbdF0gJiYgaVt0XS50aGVuKSlcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBvLnRoZW4oKTtcbiAgICAgICAgd2hpbGUgKHQtLSkgVyhpW3RdLCBhKHQpLCBvLnJlamVjdCk7XG4gICAgICAgIHJldHVybiBvLnByb21pc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgdmFyICQgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcbiAgKGsuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICBDLmNvbnNvbGUgJiZcbiAgICAgIEMuY29uc29sZS53YXJuICYmXG4gICAgICBlICYmXG4gICAgICAkLnRlc3QoZS5uYW1lKSAmJlxuICAgICAgQy5jb25zb2xlLndhcm4oXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGUubWVzc2FnZSwgZS5zdGFjaywgdCk7XG4gIH0pLFxuICAgIChrLnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oZSkge1xuICAgICAgQy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIHZhciBGID0gay5EZWZlcnJlZCgpO1xuICBmdW5jdGlvbiBCKCkge1xuICAgIEUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgQiksXG4gICAgICBDLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIEIpLFxuICAgICAgay5yZWFkeSgpO1xuICB9XG4gIChrLmZuLnJlYWR5ID0gZnVuY3Rpb24oZSkge1xuICAgIHJldHVybiAoXG4gICAgICBGLnRoZW4oZSlbXCJjYXRjaFwiXShmdW5jdGlvbihlKSB7XG4gICAgICAgIGsucmVhZHlFeGNlcHRpb24oZSk7XG4gICAgICB9KSxcbiAgICAgIHRoaXNcbiAgICApO1xuICB9KSxcbiAgICBrLmV4dGVuZCh7XG4gICAgICBpc1JlYWR5OiAhMSxcbiAgICAgIHJlYWR5V2FpdDogMSxcbiAgICAgIHJlYWR5OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICghMCA9PT0gZSA/IC0tay5yZWFkeVdhaXQgOiBrLmlzUmVhZHkpIHx8XG4gICAgICAgICAgKChrLmlzUmVhZHkgPSAhMCkgIT09IGUgJiYgMCA8IC0tay5yZWFkeVdhaXQpIHx8XG4gICAgICAgICAgRi5yZXNvbHZlV2l0aChFLCBba10pO1xuICAgICAgfVxuICAgIH0pLFxuICAgIChrLnJlYWR5LnRoZW4gPSBGLnRoZW4pLFxuICAgIFwiY29tcGxldGVcIiA9PT0gRS5yZWFkeVN0YXRlIHx8XG4gICAgKFwibG9hZGluZ1wiICE9PSBFLnJlYWR5U3RhdGUgJiYgIUUuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsKVxuICAgICAgPyBDLnNldFRpbWVvdXQoay5yZWFkeSlcbiAgICAgIDogKEUuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgQiksXG4gICAgICAgIEMuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgQikpO1xuICB2YXIgXyA9IGZ1bmN0aW9uKGUsIHQsIG4sIHIsIGksIG8sIGEpIHtcbiAgICAgIHZhciBzID0gMCxcbiAgICAgICAgdSA9IGUubGVuZ3RoLFxuICAgICAgICBsID0gbnVsbCA9PSBuO1xuICAgICAgaWYgKFwib2JqZWN0XCIgPT09IHcobikpXG4gICAgICAgIGZvciAocyBpbiAoKGkgPSAhMCksIG4pKSBfKGUsIHQsIHMsIG5bc10sICEwLCBvLCBhKTtcbiAgICAgIGVsc2UgaWYgKFxuICAgICAgICB2b2lkIDAgIT09IHIgJiZcbiAgICAgICAgKChpID0gITApLFxuICAgICAgICBtKHIpIHx8IChhID0gITApLFxuICAgICAgICBsICYmXG4gICAgICAgICAgKGFcbiAgICAgICAgICAgID8gKHQuY2FsbChlLCByKSwgKHQgPSBudWxsKSlcbiAgICAgICAgICAgIDogKChsID0gdCksXG4gICAgICAgICAgICAgICh0ID0gZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsLmNhbGwoayhlKSwgbik7XG4gICAgICAgICAgICAgIH0pKSksXG4gICAgICAgIHQpXG4gICAgICApXG4gICAgICAgIGZvciAoOyBzIDwgdTsgcysrKSB0KGVbc10sIG4sIGEgPyByIDogci5jYWxsKGVbc10sIHMsIHQoZVtzXSwgbikpKTtcbiAgICAgIHJldHVybiBpID8gZSA6IGwgPyB0LmNhbGwoZSkgOiB1ID8gdChlWzBdLCBuKSA6IG87XG4gICAgfSxcbiAgICB6ID0gL14tbXMtLyxcbiAgICBVID0gLy0oW2Etel0pL2c7XG4gIGZ1bmN0aW9uIFgoZSwgdCkge1xuICAgIHJldHVybiB0LnRvVXBwZXJDYXNlKCk7XG4gIH1cbiAgZnVuY3Rpb24gVihlKSB7XG4gICAgcmV0dXJuIGUucmVwbGFjZSh6LCBcIm1zLVwiKS5yZXBsYWNlKFUsIFgpO1xuICB9XG4gIHZhciBHID0gZnVuY3Rpb24oZSkge1xuICAgIHJldHVybiAxID09PSBlLm5vZGVUeXBlIHx8IDkgPT09IGUubm9kZVR5cGUgfHwgIStlLm5vZGVUeXBlO1xuICB9O1xuICBmdW5jdGlvbiBZKCkge1xuICAgIHRoaXMuZXhwYW5kbyA9IGsuZXhwYW5kbyArIFkudWlkKys7XG4gIH1cbiAgKFkudWlkID0gMSksXG4gICAgKFkucHJvdG90eXBlID0ge1xuICAgICAgY2FjaGU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHQgPSBlW3RoaXMuZXhwYW5kb107XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgdCB8fFxuICAgICAgICAgICAgKCh0ID0ge30pLFxuICAgICAgICAgICAgRyhlKSAmJlxuICAgICAgICAgICAgICAoZS5ub2RlVHlwZVxuICAgICAgICAgICAgICAgID8gKGVbdGhpcy5leHBhbmRvXSA9IHQpXG4gICAgICAgICAgICAgICAgOiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgdGhpcy5leHBhbmRvLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0LFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgICAgICAgICAgICAgICB9KSkpLFxuICAgICAgICAgIHRcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgdmFyIHIsXG4gICAgICAgICAgaSA9IHRoaXMuY2FjaGUoZSk7XG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSBpW1YodCldID0gbjtcbiAgICAgICAgZWxzZSBmb3IgKHIgaW4gdCkgaVtWKHIpXSA9IHRbcl07XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfSxcbiAgICAgIGdldDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0XG4gICAgICAgICAgPyB0aGlzLmNhY2hlKGUpXG4gICAgICAgICAgOiBlW3RoaXMuZXhwYW5kb10gJiYgZVt0aGlzLmV4cGFuZG9dW1YodCldO1xuICAgICAgfSxcbiAgICAgIGFjY2VzczogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0IHx8ICh0ICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgdm9pZCAwID09PSBuKVxuICAgICAgICAgID8gdGhpcy5nZXQoZSwgdClcbiAgICAgICAgICA6ICh0aGlzLnNldChlLCB0LCBuKSwgdm9pZCAwICE9PSBuID8gbiA6IHQpO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICB2YXIgbixcbiAgICAgICAgICByID0gZVt0aGlzLmV4cGFuZG9dO1xuICAgICAgICBpZiAodm9pZCAwICE9PSByKSB7XG4gICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdCkge1xuICAgICAgICAgICAgbiA9ICh0ID0gQXJyYXkuaXNBcnJheSh0KVxuICAgICAgICAgICAgICA/IHQubWFwKFYpXG4gICAgICAgICAgICAgIDogKHQgPSBWKHQpKSBpbiByXG4gICAgICAgICAgICAgID8gW3RdXG4gICAgICAgICAgICAgIDogdC5tYXRjaChSKSB8fCBbXSkubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKG4tLSkgZGVsZXRlIHJbdFtuXV07XG4gICAgICAgICAgfVxuICAgICAgICAgICh2b2lkIDAgPT09IHQgfHwgay5pc0VtcHR5T2JqZWN0KHIpKSAmJlxuICAgICAgICAgICAgKGUubm9kZVR5cGUgPyAoZVt0aGlzLmV4cGFuZG9dID0gdm9pZCAwKSA6IGRlbGV0ZSBlW3RoaXMuZXhwYW5kb10pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaGFzRGF0YTogZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgdCA9IGVbdGhpcy5leHBhbmRvXTtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdCAmJiAhay5pc0VtcHR5T2JqZWN0KHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB2YXIgUSA9IG5ldyBZKCksXG4gICAgSiA9IG5ldyBZKCksXG4gICAgSyA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcbiAgICBaID0gL1tBLVpdL2c7XG4gIGZ1bmN0aW9uIGVlKGUsIHQsIG4pIHtcbiAgICB2YXIgciwgaTtcbiAgICBpZiAodm9pZCAwID09PSBuICYmIDEgPT09IGUubm9kZVR5cGUpXG4gICAgICBpZiAoXG4gICAgICAgICgociA9IFwiZGF0YS1cIiArIHQucmVwbGFjZShaLCBcIi0kJlwiKS50b0xvd2VyQ2FzZSgpKSxcbiAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgKG4gPSBlLmdldEF0dHJpYnV0ZShyKSkpXG4gICAgICApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBuID1cbiAgICAgICAgICAgIFwidHJ1ZVwiID09PSAoaSA9IG4pIHx8XG4gICAgICAgICAgICAoXCJmYWxzZVwiICE9PSBpICYmXG4gICAgICAgICAgICAgIChcIm51bGxcIiA9PT0gaVxuICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgIDogaSA9PT0gK2kgKyBcIlwiXG4gICAgICAgICAgICAgICAgPyAraVxuICAgICAgICAgICAgICAgIDogSy50ZXN0KGkpXG4gICAgICAgICAgICAgICAgPyBKU09OLnBhcnNlKGkpXG4gICAgICAgICAgICAgICAgOiBpKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIEouc2V0KGUsIHQsIG4pO1xuICAgICAgfSBlbHNlIG4gPSB2b2lkIDA7XG4gICAgcmV0dXJuIG47XG4gIH1cbiAgay5leHRlbmQoe1xuICAgIGhhc0RhdGE6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBKLmhhc0RhdGEoZSkgfHwgUS5oYXNEYXRhKGUpO1xuICAgIH0sXG4gICAgZGF0YTogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgcmV0dXJuIEouYWNjZXNzKGUsIHQsIG4pO1xuICAgIH0sXG4gICAgcmVtb3ZlRGF0YTogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgSi5yZW1vdmUoZSwgdCk7XG4gICAgfSxcbiAgICBfZGF0YTogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgcmV0dXJuIFEuYWNjZXNzKGUsIHQsIG4pO1xuICAgIH0sXG4gICAgX3JlbW92ZURhdGE6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgIFEucmVtb3ZlKGUsIHQpO1xuICAgIH1cbiAgfSksXG4gICAgay5mbi5leHRlbmQoe1xuICAgICAgZGF0YTogZnVuY3Rpb24obiwgZSkge1xuICAgICAgICB2YXIgdCxcbiAgICAgICAgICByLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbyA9IHRoaXNbMF0sXG4gICAgICAgICAgYSA9IG8gJiYgby5hdHRyaWJ1dGVzO1xuICAgICAgICBpZiAodm9pZCAwID09PSBuKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5sZW5ndGggJiZcbiAgICAgICAgICAgICgoaSA9IEouZ2V0KG8pKSwgMSA9PT0gby5ub2RlVHlwZSAmJiAhUS5nZXQobywgXCJoYXNEYXRhQXR0cnNcIikpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0ID0gYS5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAodC0tKVxuICAgICAgICAgICAgICBhW3RdICYmXG4gICAgICAgICAgICAgICAgMCA9PT0gKHIgPSBhW3RdLm5hbWUpLmluZGV4T2YoXCJkYXRhLVwiKSAmJlxuICAgICAgICAgICAgICAgICgociA9IFYoci5zbGljZSg1KSkpLCBlZShvLCByLCBpW3JdKSk7XG4gICAgICAgICAgICBRLnNldChvLCBcImhhc0RhdGFBdHRyc1wiLCAhMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIm9iamVjdFwiID09IHR5cGVvZiBuXG4gICAgICAgICAgPyB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIEouc2V0KHRoaXMsIG4pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IF8oXG4gICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgICAgICBpZiAobyAmJiB2b2lkIDAgPT09IGUpXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSAodCA9IEouZ2V0KG8sIG4pKVxuICAgICAgICAgICAgICAgICAgICA/IHRcbiAgICAgICAgICAgICAgICAgICAgOiB2b2lkIDAgIT09ICh0ID0gZWUobywgbikpXG4gICAgICAgICAgICAgICAgICAgID8gdFxuICAgICAgICAgICAgICAgICAgICA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBKLnNldCh0aGlzLCBuLCBlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgMSA8IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICEwXG4gICAgICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZURhdGE6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICBKLnJlbW92ZSh0aGlzLCBlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSksXG4gICAgay5leHRlbmQoe1xuICAgICAgcXVldWU6IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgdmFyIHI7XG4gICAgICAgIGlmIChlKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAodCA9ICh0IHx8IFwiZnhcIikgKyBcInF1ZXVlXCIpLFxuICAgICAgICAgICAgKHIgPSBRLmdldChlLCB0KSksXG4gICAgICAgICAgICBuICYmXG4gICAgICAgICAgICAgICghciB8fCBBcnJheS5pc0FycmF5KG4pXG4gICAgICAgICAgICAgICAgPyAociA9IFEuYWNjZXNzKGUsIHQsIGsubWFrZUFycmF5KG4pKSlcbiAgICAgICAgICAgICAgICA6IHIucHVzaChuKSksXG4gICAgICAgICAgICByIHx8IFtdXG4gICAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBkZXF1ZXVlOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgIHQgPSB0IHx8IFwiZnhcIjtcbiAgICAgICAgdmFyIG4gPSBrLnF1ZXVlKGUsIHQpLFxuICAgICAgICAgIHIgPSBuLmxlbmd0aCxcbiAgICAgICAgICBpID0gbi5zaGlmdCgpLFxuICAgICAgICAgIG8gPSBrLl9xdWV1ZUhvb2tzKGUsIHQpO1xuICAgICAgICBcImlucHJvZ3Jlc3NcIiA9PT0gaSAmJiAoKGkgPSBuLnNoaWZ0KCkpLCByLS0pLFxuICAgICAgICAgIGkgJiZcbiAgICAgICAgICAgIChcImZ4XCIgPT09IHQgJiYgbi51bnNoaWZ0KFwiaW5wcm9ncmVzc1wiKSxcbiAgICAgICAgICAgIGRlbGV0ZSBvLnN0b3AsXG4gICAgICAgICAgICBpLmNhbGwoXG4gICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGsuZGVxdWV1ZShlLCB0KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgIXIgJiYgbyAmJiBvLmVtcHR5LmZpcmUoKTtcbiAgICAgIH0sXG4gICAgICBfcXVldWVIb29rczogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICB2YXIgbiA9IHQgKyBcInF1ZXVlSG9va3NcIjtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBRLmdldChlLCBuKSB8fFxuICAgICAgICAgIFEuYWNjZXNzKGUsIG4sIHtcbiAgICAgICAgICAgIGVtcHR5OiBrLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLmFkZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgUS5yZW1vdmUoZSwgW3QgKyBcInF1ZXVlXCIsIG5dKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBrLmZuLmV4dGVuZCh7XG4gICAgICBxdWV1ZTogZnVuY3Rpb24odCwgbikge1xuICAgICAgICB2YXIgZSA9IDI7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgXCJzdHJpbmdcIiAhPSB0eXBlb2YgdCAmJiAoKG4gPSB0KSwgKHQgPSBcImZ4XCIpLCBlLS0pLFxuICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPCBlXG4gICAgICAgICAgICA/IGsucXVldWUodGhpc1swXSwgdClcbiAgICAgICAgICAgIDogdm9pZCAwID09PSBuXG4gICAgICAgICAgICA/IHRoaXNcbiAgICAgICAgICAgIDogdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gay5xdWV1ZSh0aGlzLCB0LCBuKTtcbiAgICAgICAgICAgICAgICBrLl9xdWV1ZUhvb2tzKHRoaXMsIHQpLFxuICAgICAgICAgICAgICAgICAgXCJmeFwiID09PSB0ICYmIFwiaW5wcm9ncmVzc1wiICE9PSBlWzBdICYmIGsuZGVxdWV1ZSh0aGlzLCB0KTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBkZXF1ZXVlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgay5kZXF1ZXVlKHRoaXMsIGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBjbGVhclF1ZXVlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXVlKGUgfHwgXCJmeFwiLCBbXSk7XG4gICAgICB9LFxuICAgICAgcHJvbWlzZTogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICB2YXIgbixcbiAgICAgICAgICByID0gMSxcbiAgICAgICAgICBpID0gay5EZWZlcnJlZCgpLFxuICAgICAgICAgIG8gPSB0aGlzLFxuICAgICAgICAgIGEgPSB0aGlzLmxlbmd0aCxcbiAgICAgICAgICBzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAtLXIgfHwgaS5yZXNvbHZlV2l0aChvLCBbb10pO1xuICAgICAgICAgIH07XG4gICAgICAgIFwic3RyaW5nXCIgIT0gdHlwZW9mIGUgJiYgKCh0ID0gZSksIChlID0gdm9pZCAwKSksIChlID0gZSB8fCBcImZ4XCIpO1xuICAgICAgICB3aGlsZSAoYS0tKVxuICAgICAgICAgIChuID0gUS5nZXQob1thXSwgZSArIFwicXVldWVIb29rc1wiKSkgJiZcbiAgICAgICAgICAgIG4uZW1wdHkgJiZcbiAgICAgICAgICAgIChyKyssIG4uZW1wdHkuYWRkKHMpKTtcbiAgICAgICAgcmV0dXJuIHMoKSwgaS5wcm9taXNlKHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB2YXIgdGUgPSAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsXG4gICAgbmUgPSBuZXcgUmVnRXhwKFwiXig/OihbKy1dKT18KShcIiArIHRlICsgXCIpKFthLXolXSopJFwiLCBcImlcIiksXG4gICAgcmUgPSBbXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIl0sXG4gICAgaWUgPSBFLmRvY3VtZW50RWxlbWVudCxcbiAgICBvZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBrLmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCwgZSk7XG4gICAgfSxcbiAgICBhZSA9IHsgY29tcG9zZWQ6ICEwIH07XG4gIGllLmdldFJvb3ROb2RlICYmXG4gICAgKG9lID0gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgay5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsIGUpIHx8IGUuZ2V0Um9vdE5vZGUoYWUpID09PSBlLm93bmVyRG9jdW1lbnRcbiAgICAgICk7XG4gICAgfSk7XG4gIHZhciBzZSA9IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIFwibm9uZVwiID09PSAoZSA9IHQgfHwgZSkuc3R5bGUuZGlzcGxheSB8fFxuICAgICAgICAoXCJcIiA9PT0gZS5zdHlsZS5kaXNwbGF5ICYmIG9lKGUpICYmIFwibm9uZVwiID09PSBrLmNzcyhlLCBcImRpc3BsYXlcIikpXG4gICAgICApO1xuICAgIH0sXG4gICAgdWUgPSBmdW5jdGlvbihlLCB0LCBuLCByKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgbyxcbiAgICAgICAgYSA9IHt9O1xuICAgICAgZm9yIChvIGluIHQpIChhW29dID0gZS5zdHlsZVtvXSksIChlLnN0eWxlW29dID0gdFtvXSk7XG4gICAgICBmb3IgKG8gaW4gKChpID0gbi5hcHBseShlLCByIHx8IFtdKSksIHQpKSBlLnN0eWxlW29dID0gYVtvXTtcbiAgICAgIHJldHVybiBpO1xuICAgIH07XG4gIGZ1bmN0aW9uIGxlKGUsIHQsIG4sIHIpIHtcbiAgICB2YXIgaSxcbiAgICAgIG8sXG4gICAgICBhID0gMjAsXG4gICAgICBzID0gclxuICAgICAgICA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHIuY3VyKCk7XG4gICAgICAgICAgfVxuICAgICAgICA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGsuY3NzKGUsIHQsIFwiXCIpO1xuICAgICAgICAgIH0sXG4gICAgICB1ID0gcygpLFxuICAgICAgbCA9IChuICYmIG5bM10pIHx8IChrLmNzc051bWJlclt0XSA/IFwiXCIgOiBcInB4XCIpLFxuICAgICAgYyA9XG4gICAgICAgIGUubm9kZVR5cGUgJiZcbiAgICAgICAgKGsuY3NzTnVtYmVyW3RdIHx8IChcInB4XCIgIT09IGwgJiYgK3UpKSAmJlxuICAgICAgICBuZS5leGVjKGsuY3NzKGUsIHQpKTtcbiAgICBpZiAoYyAmJiBjWzNdICE9PSBsKSB7XG4gICAgICAodSAvPSAyKSwgKGwgPSBsIHx8IGNbM10pLCAoYyA9ICt1IHx8IDEpO1xuICAgICAgd2hpbGUgKGEtLSlcbiAgICAgICAgay5zdHlsZShlLCB0LCBjICsgbCksXG4gICAgICAgICAgKDEgLSBvKSAqICgxIC0gKG8gPSBzKCkgLyB1IHx8IDAuNSkpIDw9IDAgJiYgKGEgPSAwKSxcbiAgICAgICAgICAoYyAvPSBvKTtcbiAgICAgIChjICo9IDIpLCBrLnN0eWxlKGUsIHQsIGMgKyBsKSwgKG4gPSBuIHx8IFtdKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIG4gJiZcbiAgICAgICAgKChjID0gK2MgfHwgK3UgfHwgMCksXG4gICAgICAgIChpID0gblsxXSA/IGMgKyAoblsxXSArIDEpICogblsyXSA6ICtuWzJdKSxcbiAgICAgICAgciAmJiAoKHIudW5pdCA9IGwpLCAoci5zdGFydCA9IGMpLCAoci5lbmQgPSBpKSkpLFxuICAgICAgaVxuICAgICk7XG4gIH1cbiAgdmFyIGNlID0ge307XG4gIGZ1bmN0aW9uIGZlKGUsIHQpIHtcbiAgICBmb3IgKHZhciBuLCByLCBpLCBvLCBhLCBzLCB1LCBsID0gW10sIGMgPSAwLCBmID0gZS5sZW5ndGg7IGMgPCBmOyBjKyspXG4gICAgICAociA9IGVbY10pLnN0eWxlICYmXG4gICAgICAgICgobiA9IHIuc3R5bGUuZGlzcGxheSksXG4gICAgICAgIHRcbiAgICAgICAgICA/IChcIm5vbmVcIiA9PT0gbiAmJlxuICAgICAgICAgICAgICAoKGxbY10gPSBRLmdldChyLCBcImRpc3BsYXlcIikgfHwgbnVsbCksXG4gICAgICAgICAgICAgIGxbY10gfHwgKHIuc3R5bGUuZGlzcGxheSA9IFwiXCIpKSxcbiAgICAgICAgICAgIFwiXCIgPT09IHIuc3R5bGUuZGlzcGxheSAmJlxuICAgICAgICAgICAgICBzZShyKSAmJlxuICAgICAgICAgICAgICAobFtjXSA9ICgodSA9IGEgPSBvID0gdm9pZCAwKSxcbiAgICAgICAgICAgICAgKGEgPSAoaSA9IHIpLm93bmVyRG9jdW1lbnQpLFxuICAgICAgICAgICAgICAocyA9IGkubm9kZU5hbWUpLFxuICAgICAgICAgICAgICAodSA9IGNlW3NdKSB8fFxuICAgICAgICAgICAgICAgICgobyA9IGEuYm9keS5hcHBlbmRDaGlsZChhLmNyZWF0ZUVsZW1lbnQocykpKSxcbiAgICAgICAgICAgICAgICAodSA9IGsuY3NzKG8sIFwiZGlzcGxheVwiKSksXG4gICAgICAgICAgICAgICAgby5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG8pLFxuICAgICAgICAgICAgICAgIFwibm9uZVwiID09PSB1ICYmICh1ID0gXCJibG9ja1wiKSxcbiAgICAgICAgICAgICAgICAoY2Vbc10gPSB1KSkpKSlcbiAgICAgICAgICA6IFwibm9uZVwiICE9PSBuICYmICgobFtjXSA9IFwibm9uZVwiKSwgUS5zZXQociwgXCJkaXNwbGF5XCIsIG4pKSk7XG4gICAgZm9yIChjID0gMDsgYyA8IGY7IGMrKykgbnVsbCAhPSBsW2NdICYmIChlW2NdLnN0eWxlLmRpc3BsYXkgPSBsW2NdKTtcbiAgICByZXR1cm4gZTtcbiAgfVxuICBrLmZuLmV4dGVuZCh7XG4gICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmUodGhpcywgITApO1xuICAgIH0sXG4gICAgaGlkZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmUodGhpcyk7XG4gICAgfSxcbiAgICB0b2dnbGU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBcImJvb2xlYW5cIiA9PSB0eXBlb2YgZVxuICAgICAgICA/IGVcbiAgICAgICAgICA/IHRoaXMuc2hvdygpXG4gICAgICAgICAgOiB0aGlzLmhpZGUoKVxuICAgICAgICA6IHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlKHRoaXMpID8gayh0aGlzKS5zaG93KCkgOiBrKHRoaXMpLmhpZGUoKTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICB2YXIgcGUgPSAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSxcbiAgICBkZSA9IC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSxcbiAgICBoZSA9IC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksXG4gICAgZ2UgPSB7XG4gICAgICBvcHRpb246IFsxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIl0sXG4gICAgICB0aGVhZDogWzEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCJdLFxuICAgICAgY29sOiBbMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sXG4gICAgICB0cjogWzIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCJdLFxuICAgICAgdGQ6IFszLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxcbiAgICAgIF9kZWZhdWx0OiBbMCwgXCJcIiwgXCJcIl1cbiAgICB9O1xuICBmdW5jdGlvbiB2ZShlLCB0KSB7XG4gICAgdmFyIG47XG4gICAgcmV0dXJuIChcbiAgICAgIChuID1cbiAgICAgICAgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZS5nZXRFbGVtZW50c0J5VGFnTmFtZVxuICAgICAgICAgID8gZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0IHx8IFwiKlwiKVxuICAgICAgICAgIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZS5xdWVyeVNlbGVjdG9yQWxsXG4gICAgICAgICAgPyBlLnF1ZXJ5U2VsZWN0b3JBbGwodCB8fCBcIipcIilcbiAgICAgICAgICA6IFtdKSxcbiAgICAgIHZvaWQgMCA9PT0gdCB8fCAodCAmJiBBKGUsIHQpKSA/IGsubWVyZ2UoW2VdLCBuKSA6IG5cbiAgICApO1xuICB9XG4gIGZ1bmN0aW9uIHllKGUsIHQpIHtcbiAgICBmb3IgKHZhciBuID0gMCwgciA9IGUubGVuZ3RoOyBuIDwgcjsgbisrKVxuICAgICAgUS5zZXQoZVtuXSwgXCJnbG9iYWxFdmFsXCIsICF0IHx8IFEuZ2V0KHRbbl0sIFwiZ2xvYmFsRXZhbFwiKSk7XG4gIH1cbiAgKGdlLm9wdGdyb3VwID0gZ2Uub3B0aW9uKSxcbiAgICAoZ2UudGJvZHkgPSBnZS50Zm9vdCA9IGdlLmNvbGdyb3VwID0gZ2UuY2FwdGlvbiA9IGdlLnRoZWFkKSxcbiAgICAoZ2UudGggPSBnZS50ZCk7XG4gIHZhciBtZSxcbiAgICB4ZSxcbiAgICBiZSA9IC88fCYjP1xcdys7LztcbiAgZnVuY3Rpb24gd2UoZSwgdCwgbiwgciwgaSkge1xuICAgIGZvciAoXG4gICAgICB2YXIgbyxcbiAgICAgICAgYSxcbiAgICAgICAgcyxcbiAgICAgICAgdSxcbiAgICAgICAgbCxcbiAgICAgICAgYyxcbiAgICAgICAgZiA9IHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgICBwID0gW10sXG4gICAgICAgIGQgPSAwLFxuICAgICAgICBoID0gZS5sZW5ndGg7XG4gICAgICBkIDwgaDtcbiAgICAgIGQrK1xuICAgIClcbiAgICAgIGlmICgobyA9IGVbZF0pIHx8IDAgPT09IG8pXG4gICAgICAgIGlmIChcIm9iamVjdFwiID09PSB3KG8pKSBrLm1lcmdlKHAsIG8ubm9kZVR5cGUgPyBbb10gOiBvKTtcbiAgICAgICAgZWxzZSBpZiAoYmUudGVzdChvKSkge1xuICAgICAgICAgIChhID0gYSB8fCBmLmFwcGVuZENoaWxkKHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkpLFxuICAgICAgICAgICAgKHMgPSAoZGUuZXhlYyhvKSB8fCBbXCJcIiwgXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCkpLFxuICAgICAgICAgICAgKHUgPSBnZVtzXSB8fCBnZS5fZGVmYXVsdCksXG4gICAgICAgICAgICAoYS5pbm5lckhUTUwgPSB1WzFdICsgay5odG1sUHJlZmlsdGVyKG8pICsgdVsyXSksXG4gICAgICAgICAgICAoYyA9IHVbMF0pO1xuICAgICAgICAgIHdoaWxlIChjLS0pIGEgPSBhLmxhc3RDaGlsZDtcbiAgICAgICAgICBrLm1lcmdlKHAsIGEuY2hpbGROb2RlcyksICgoYSA9IGYuZmlyc3RDaGlsZCkudGV4dENvbnRlbnQgPSBcIlwiKTtcbiAgICAgICAgfSBlbHNlIHAucHVzaCh0LmNyZWF0ZVRleHROb2RlKG8pKTtcbiAgICAoZi50ZXh0Q29udGVudCA9IFwiXCIpLCAoZCA9IDApO1xuICAgIHdoaWxlICgobyA9IHBbZCsrXSkpXG4gICAgICBpZiAociAmJiAtMSA8IGsuaW5BcnJheShvLCByKSkgaSAmJiBpLnB1c2gobyk7XG4gICAgICBlbHNlIGlmIChcbiAgICAgICAgKChsID0gb2UobykpLCAoYSA9IHZlKGYuYXBwZW5kQ2hpbGQobyksIFwic2NyaXB0XCIpKSwgbCAmJiB5ZShhKSwgbilcbiAgICAgICkge1xuICAgICAgICBjID0gMDtcbiAgICAgICAgd2hpbGUgKChvID0gYVtjKytdKSkgaGUudGVzdChvLnR5cGUgfHwgXCJcIikgJiYgbi5wdXNoKG8pO1xuICAgICAgfVxuICAgIHJldHVybiBmO1xuICB9XG4gIChtZSA9IEUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLmFwcGVuZENoaWxkKEUuY3JlYXRlRWxlbWVudChcImRpdlwiKSkpLFxuICAgICh4ZSA9IEUuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwicmFkaW9cIiksXG4gICAgeGUuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiksXG4gICAgeGUuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInRcIiksXG4gICAgbWUuYXBwZW5kQ2hpbGQoeGUpLFxuICAgICh5LmNoZWNrQ2xvbmUgPSBtZS5jbG9uZU5vZGUoITApLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmNoZWNrZWQpLFxuICAgIChtZS5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIiksXG4gICAgKHkubm9DbG9uZUNoZWNrZWQgPSAhIW1lLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZSk7XG4gIHZhciBUZSA9IC9ea2V5LyxcbiAgICBDZSA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcbiAgICBFZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG4gIGZ1bmN0aW9uIGtlKCkge1xuICAgIHJldHVybiAhMDtcbiAgfVxuICBmdW5jdGlvbiBTZSgpIHtcbiAgICByZXR1cm4gITE7XG4gIH1cbiAgZnVuY3Rpb24gTmUoZSwgdCkge1xuICAgIHJldHVybiAoXG4gICAgICAoZSA9PT1cbiAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gRS5hY3RpdmVFbGVtZW50O1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH0pKCkpID09XG4gICAgICAoXCJmb2N1c1wiID09PSB0KVxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gQWUoZSwgdCwgbiwgciwgaSwgbykge1xuICAgIHZhciBhLCBzO1xuICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiB0KSB7XG4gICAgICBmb3IgKHMgaW4gKFwic3RyaW5nXCIgIT0gdHlwZW9mIG4gJiYgKChyID0gciB8fCBuKSwgKG4gPSB2b2lkIDApKSwgdCkpXG4gICAgICAgIEFlKGUsIHMsIG4sIHIsIHRbc10sIG8pO1xuICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChudWxsID09IHIgJiYgbnVsbCA9PSBpXG4gICAgICAgID8gKChpID0gbiksIChyID0gbiA9IHZvaWQgMCkpXG4gICAgICAgIDogbnVsbCA9PSBpICYmXG4gICAgICAgICAgKFwic3RyaW5nXCIgPT0gdHlwZW9mIG5cbiAgICAgICAgICAgID8gKChpID0gciksIChyID0gdm9pZCAwKSlcbiAgICAgICAgICAgIDogKChpID0gciksIChyID0gbiksIChuID0gdm9pZCAwKSkpLFxuICAgICAgITEgPT09IGkpXG4gICAgKVxuICAgICAgaSA9IFNlO1xuICAgIGVsc2UgaWYgKCFpKSByZXR1cm4gZTtcbiAgICByZXR1cm4gKFxuICAgICAgMSA9PT0gbyAmJlxuICAgICAgICAoKGEgPSBpKSxcbiAgICAgICAgKChpID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiBrKCkub2ZmKGUpLCBhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0pLmd1aWQgPSBhLmd1aWQgfHwgKGEuZ3VpZCA9IGsuZ3VpZCsrKSkpLFxuICAgICAgZS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBrLmV2ZW50LmFkZCh0aGlzLCB0LCBpLCByLCBuKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuICBmdW5jdGlvbiBEZShlLCBpLCBvKSB7XG4gICAgb1xuICAgICAgPyAoUS5zZXQoZSwgaSwgITEpLFxuICAgICAgICBrLmV2ZW50LmFkZChlLCBpLCB7XG4gICAgICAgICAgbmFtZXNwYWNlOiAhMSxcbiAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgciA9IFEuZ2V0KHRoaXMsIGkpO1xuICAgICAgICAgICAgaWYgKDEgJiBlLmlzVHJpZ2dlciAmJiB0aGlzW2ldKSB7XG4gICAgICAgICAgICAgIGlmIChyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAoay5ldmVudC5zcGVjaWFsW2ldIHx8IHt9KS5kZWxlZ2F0ZVR5cGUgJiYgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgKChyID0gcy5jYWxsKGFyZ3VtZW50cykpLFxuICAgICAgICAgICAgICAgIFEuc2V0KHRoaXMsIGksIHIpLFxuICAgICAgICAgICAgICAgICh0ID0gbyh0aGlzLCBpKSksXG4gICAgICAgICAgICAgICAgdGhpc1tpXSgpLFxuICAgICAgICAgICAgICAgIHIgIT09IChuID0gUS5nZXQodGhpcywgaSkpIHx8IHQgPyBRLnNldCh0aGlzLCBpLCAhMSkgOiAobiA9IHt9KSxcbiAgICAgICAgICAgICAgICByICE9PSBuKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksIGUucHJldmVudERlZmF1bHQoKSwgbi52YWx1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgci5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAoUS5zZXQodGhpcywgaSwge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IGsuZXZlbnQudHJpZ2dlcihcbiAgICAgICAgICAgICAgICAgICAgay5leHRlbmQoclswXSwgay5FdmVudC5wcm90b3R5cGUpLFxuICAgICAgICAgICAgICAgICAgICByLnNsaWNlKDEpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSlcbiAgICAgIDogdm9pZCAwID09PSBRLmdldChlLCBpKSAmJiBrLmV2ZW50LmFkZChlLCBpLCBrZSk7XG4gIH1cbiAgKGsuZXZlbnQgPSB7XG4gICAgZ2xvYmFsOiB7fSxcbiAgICBhZGQ6IGZ1bmN0aW9uKHQsIGUsIG4sIHIsIGkpIHtcbiAgICAgIHZhciBvLFxuICAgICAgICBhLFxuICAgICAgICBzLFxuICAgICAgICB1LFxuICAgICAgICBsLFxuICAgICAgICBjLFxuICAgICAgICBmLFxuICAgICAgICBwLFxuICAgICAgICBkLFxuICAgICAgICBoLFxuICAgICAgICBnLFxuICAgICAgICB2ID0gUS5nZXQodCk7XG4gICAgICBpZiAodikge1xuICAgICAgICBuLmhhbmRsZXIgJiYgKChuID0gKG8gPSBuKS5oYW5kbGVyKSwgKGkgPSBvLnNlbGVjdG9yKSksXG4gICAgICAgICAgaSAmJiBrLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGllLCBpKSxcbiAgICAgICAgICBuLmd1aWQgfHwgKG4uZ3VpZCA9IGsuZ3VpZCsrKSxcbiAgICAgICAgICAodSA9IHYuZXZlbnRzKSB8fCAodSA9IHYuZXZlbnRzID0ge30pLFxuICAgICAgICAgIChhID0gdi5oYW5kbGUpIHx8XG4gICAgICAgICAgICAoYSA9IHYuaGFuZGxlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgayAmJiBrLmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlXG4gICAgICAgICAgICAgICAgPyBrLmV2ZW50LmRpc3BhdGNoLmFwcGx5KHQsIGFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICA6IHZvaWQgMDtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIChsID0gKGUgPSAoZSB8fCBcIlwiKS5tYXRjaChSKSB8fCBbXCJcIl0pLmxlbmd0aCk7XG4gICAgICAgIHdoaWxlIChsLS0pXG4gICAgICAgICAgKGQgPSBnID0gKHMgPSBFZS5leGVjKGVbbF0pIHx8IFtdKVsxXSksXG4gICAgICAgICAgICAoaCA9IChzWzJdIHx8IFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCkpLFxuICAgICAgICAgICAgZCAmJlxuICAgICAgICAgICAgICAoKGYgPSBrLmV2ZW50LnNwZWNpYWxbZF0gfHwge30pLFxuICAgICAgICAgICAgICAoZCA9IChpID8gZi5kZWxlZ2F0ZVR5cGUgOiBmLmJpbmRUeXBlKSB8fCBkKSxcbiAgICAgICAgICAgICAgKGYgPSBrLmV2ZW50LnNwZWNpYWxbZF0gfHwge30pLFxuICAgICAgICAgICAgICAoYyA9IGsuZXh0ZW5kKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IGQsXG4gICAgICAgICAgICAgICAgICBvcmlnVHlwZTogZyxcbiAgICAgICAgICAgICAgICAgIGRhdGE6IHIsXG4gICAgICAgICAgICAgICAgICBoYW5kbGVyOiBuLFxuICAgICAgICAgICAgICAgICAgZ3VpZDogbi5ndWlkLFxuICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IGksXG4gICAgICAgICAgICAgICAgICBuZWVkc0NvbnRleHQ6IGkgJiYgay5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KGkpLFxuICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBoLmpvaW4oXCIuXCIpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvXG4gICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAocCA9IHVbZF0pIHx8XG4gICAgICAgICAgICAgICAgKCgocCA9IHVbZF0gPSBbXSkuZGVsZWdhdGVDb3VudCA9IDApLFxuICAgICAgICAgICAgICAgIChmLnNldHVwICYmICExICE9PSBmLnNldHVwLmNhbGwodCwgciwgaCwgYSkpIHx8XG4gICAgICAgICAgICAgICAgICAodC5hZGRFdmVudExpc3RlbmVyICYmIHQuYWRkRXZlbnRMaXN0ZW5lcihkLCBhKSkpLFxuICAgICAgICAgICAgICBmLmFkZCAmJlxuICAgICAgICAgICAgICAgIChmLmFkZC5jYWxsKHQsIGMpLCBjLmhhbmRsZXIuZ3VpZCB8fCAoYy5oYW5kbGVyLmd1aWQgPSBuLmd1aWQpKSxcbiAgICAgICAgICAgICAgaSA/IHAuc3BsaWNlKHAuZGVsZWdhdGVDb3VudCsrLCAwLCBjKSA6IHAucHVzaChjKSxcbiAgICAgICAgICAgICAgKGsuZXZlbnQuZ2xvYmFsW2RdID0gITApKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24oZSwgdCwgbiwgciwgaSkge1xuICAgICAgdmFyIG8sXG4gICAgICAgIGEsXG4gICAgICAgIHMsXG4gICAgICAgIHUsXG4gICAgICAgIGwsXG4gICAgICAgIGMsXG4gICAgICAgIGYsXG4gICAgICAgIHAsXG4gICAgICAgIGQsXG4gICAgICAgIGgsXG4gICAgICAgIGcsXG4gICAgICAgIHYgPSBRLmhhc0RhdGEoZSkgJiYgUS5nZXQoZSk7XG4gICAgICBpZiAodiAmJiAodSA9IHYuZXZlbnRzKSkge1xuICAgICAgICBsID0gKHQgPSAodCB8fCBcIlwiKS5tYXRjaChSKSB8fCBbXCJcIl0pLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGwtLSlcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoKGQgPSBnID0gKHMgPSBFZS5leGVjKHRbbF0pIHx8IFtdKVsxXSksXG4gICAgICAgICAgICAoaCA9IChzWzJdIHx8IFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCkpLFxuICAgICAgICAgICAgZClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIChmID0gay5ldmVudC5zcGVjaWFsW2RdIHx8IHt9KSxcbiAgICAgICAgICAgICAgKHAgPSB1WyhkID0gKHIgPyBmLmRlbGVnYXRlVHlwZSA6IGYuYmluZFR5cGUpIHx8IGQpXSB8fCBbXSksXG4gICAgICAgICAgICAgIChzID1cbiAgICAgICAgICAgICAgICBzWzJdICYmXG4gICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiICsgaC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiKSksXG4gICAgICAgICAgICAgIChhID0gbyA9IHAubGVuZ3RoKTtcbiAgICAgICAgICAgIHdoaWxlIChvLS0pXG4gICAgICAgICAgICAgIChjID0gcFtvXSksXG4gICAgICAgICAgICAgICAgKCFpICYmIGcgIT09IGMub3JpZ1R5cGUpIHx8XG4gICAgICAgICAgICAgICAgICAobiAmJiBuLmd1aWQgIT09IGMuZ3VpZCkgfHxcbiAgICAgICAgICAgICAgICAgIChzICYmICFzLnRlc3QoYy5uYW1lc3BhY2UpKSB8fFxuICAgICAgICAgICAgICAgICAgKHIgJiYgciAhPT0gYy5zZWxlY3RvciAmJiAoXCIqKlwiICE9PSByIHx8ICFjLnNlbGVjdG9yKSkgfHxcbiAgICAgICAgICAgICAgICAgIChwLnNwbGljZShvLCAxKSxcbiAgICAgICAgICAgICAgICAgIGMuc2VsZWN0b3IgJiYgcC5kZWxlZ2F0ZUNvdW50LS0sXG4gICAgICAgICAgICAgICAgICBmLnJlbW92ZSAmJiBmLnJlbW92ZS5jYWxsKGUsIGMpKTtcbiAgICAgICAgICAgIGEgJiZcbiAgICAgICAgICAgICAgIXAubGVuZ3RoICYmXG4gICAgICAgICAgICAgICgoZi50ZWFyZG93biAmJiAhMSAhPT0gZi50ZWFyZG93bi5jYWxsKGUsIGgsIHYuaGFuZGxlKSkgfHxcbiAgICAgICAgICAgICAgICBrLnJlbW92ZUV2ZW50KGUsIGQsIHYuaGFuZGxlKSxcbiAgICAgICAgICAgICAgZGVsZXRlIHVbZF0pO1xuICAgICAgICAgIH0gZWxzZSBmb3IgKGQgaW4gdSkgay5ldmVudC5yZW1vdmUoZSwgZCArIHRbbF0sIG4sIHIsICEwKTtcbiAgICAgICAgay5pc0VtcHR5T2JqZWN0KHUpICYmIFEucmVtb3ZlKGUsIFwiaGFuZGxlIGV2ZW50c1wiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRpc3BhdGNoOiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgdCxcbiAgICAgICAgbixcbiAgICAgICAgcixcbiAgICAgICAgaSxcbiAgICAgICAgbyxcbiAgICAgICAgYSxcbiAgICAgICAgcyA9IGsuZXZlbnQuZml4KGUpLFxuICAgICAgICB1ID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLFxuICAgICAgICBsID0gKFEuZ2V0KHRoaXMsIFwiZXZlbnRzXCIpIHx8IHt9KVtzLnR5cGVdIHx8IFtdLFxuICAgICAgICBjID0gay5ldmVudC5zcGVjaWFsW3MudHlwZV0gfHwge307XG4gICAgICBmb3IgKHVbMF0gPSBzLCB0ID0gMTsgdCA8IGFyZ3VtZW50cy5sZW5ndGg7IHQrKykgdVt0XSA9IGFyZ3VtZW50c1t0XTtcbiAgICAgIGlmIChcbiAgICAgICAgKChzLmRlbGVnYXRlVGFyZ2V0ID0gdGhpcyksXG4gICAgICAgICFjLnByZURpc3BhdGNoIHx8ICExICE9PSBjLnByZURpc3BhdGNoLmNhbGwodGhpcywgcykpXG4gICAgICApIHtcbiAgICAgICAgKGEgPSBrLmV2ZW50LmhhbmRsZXJzLmNhbGwodGhpcywgcywgbCkpLCAodCA9IDApO1xuICAgICAgICB3aGlsZSAoKGkgPSBhW3QrK10pICYmICFzLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgICAocy5jdXJyZW50VGFyZ2V0ID0gaS5lbGVtKSwgKG4gPSAwKTtcbiAgICAgICAgICB3aGlsZSAoKG8gPSBpLmhhbmRsZXJzW24rK10pICYmICFzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpXG4gICAgICAgICAgICAocy5ybmFtZXNwYWNlICYmXG4gICAgICAgICAgICAgICExICE9PSBvLm5hbWVzcGFjZSAmJlxuICAgICAgICAgICAgICAhcy5ybmFtZXNwYWNlLnRlc3Qoby5uYW1lc3BhY2UpKSB8fFxuICAgICAgICAgICAgICAoKHMuaGFuZGxlT2JqID0gbyksXG4gICAgICAgICAgICAgIChzLmRhdGEgPSBvLmRhdGEpLFxuICAgICAgICAgICAgICB2b2lkIDAgIT09XG4gICAgICAgICAgICAgICAgKHIgPSAoXG4gICAgICAgICAgICAgICAgICAoay5ldmVudC5zcGVjaWFsW28ub3JpZ1R5cGVdIHx8IHt9KS5oYW5kbGUgfHwgby5oYW5kbGVyXG4gICAgICAgICAgICAgICAgKS5hcHBseShpLmVsZW0sIHUpKSAmJlxuICAgICAgICAgICAgICAgICExID09PSAocy5yZXN1bHQgPSByKSAmJlxuICAgICAgICAgICAgICAgIChzLnByZXZlbnREZWZhdWx0KCksIHMuc3RvcFByb3BhZ2F0aW9uKCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYy5wb3N0RGlzcGF0Y2ggJiYgYy5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLCBzKSwgcy5yZXN1bHQ7XG4gICAgICB9XG4gICAgfSxcbiAgICBoYW5kbGVyczogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgdmFyIG4sXG4gICAgICAgIHIsXG4gICAgICAgIGksXG4gICAgICAgIG8sXG4gICAgICAgIGEsXG4gICAgICAgIHMgPSBbXSxcbiAgICAgICAgdSA9IHQuZGVsZWdhdGVDb3VudCxcbiAgICAgICAgbCA9IGUudGFyZ2V0O1xuICAgICAgaWYgKHUgJiYgbC5ub2RlVHlwZSAmJiAhKFwiY2xpY2tcIiA9PT0gZS50eXBlICYmIDEgPD0gZS5idXR0b24pKVxuICAgICAgICBmb3IgKDsgbCAhPT0gdGhpczsgbCA9IGwucGFyZW50Tm9kZSB8fCB0aGlzKVxuICAgICAgICAgIGlmICgxID09PSBsLm5vZGVUeXBlICYmIChcImNsaWNrXCIgIT09IGUudHlwZSB8fCAhMCAhPT0gbC5kaXNhYmxlZCkpIHtcbiAgICAgICAgICAgIGZvciAobyA9IFtdLCBhID0ge30sIG4gPSAwOyBuIDwgdTsgbisrKVxuICAgICAgICAgICAgICB2b2lkIDAgPT09IGFbKGkgPSAociA9IHRbbl0pLnNlbGVjdG9yICsgXCIgXCIpXSAmJlxuICAgICAgICAgICAgICAgIChhW2ldID0gci5uZWVkc0NvbnRleHRcbiAgICAgICAgICAgICAgICAgID8gLTEgPCBrKGksIHRoaXMpLmluZGV4KGwpXG4gICAgICAgICAgICAgICAgICA6IGsuZmluZChpLCB0aGlzLCBudWxsLCBbbF0pLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgYVtpXSAmJiBvLnB1c2gocik7XG4gICAgICAgICAgICBvLmxlbmd0aCAmJiBzLnB1c2goeyBlbGVtOiBsLCBoYW5kbGVyczogbyB9KTtcbiAgICAgICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICAobCA9IHRoaXMpLCB1IDwgdC5sZW5ndGggJiYgcy5wdXNoKHsgZWxlbTogbCwgaGFuZGxlcnM6IHQuc2xpY2UodSkgfSksIHNcbiAgICAgICk7XG4gICAgfSxcbiAgICBhZGRQcm9wOiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoay5FdmVudC5wcm90b3R5cGUsIHQsIHtcbiAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgICAgIGdldDogbShlKVxuICAgICAgICAgID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLm9yaWdpbmFsRXZlbnQpIHJldHVybiBlKHRoaXMub3JpZ2luYWxFdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMub3JpZ2luYWxFdmVudCkgcmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFt0XTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCB0LCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgICAgICAgICB3cml0YWJsZTogITAsXG4gICAgICAgICAgICB2YWx1ZTogZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZpeDogZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIGVbay5leHBhbmRvXSA/IGUgOiBuZXcgay5FdmVudChlKTtcbiAgICB9LFxuICAgIHNwZWNpYWw6IHtcbiAgICAgIGxvYWQ6IHsgbm9CdWJibGU6ICEwIH0sXG4gICAgICBjbGljazoge1xuICAgICAgICBzZXR1cDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHZhciB0ID0gdGhpcyB8fCBlO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBwZS50ZXN0KHQudHlwZSkgJiYgdC5jbGljayAmJiBBKHQsIFwiaW5wdXRcIikgJiYgRGUodCwgXCJjbGlja1wiLCBrZSksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB2YXIgdCA9IHRoaXMgfHwgZTtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgcGUudGVzdCh0LnR5cGUpICYmIHQuY2xpY2sgJiYgQSh0LCBcImlucHV0XCIpICYmIERlKHQsIFwiY2xpY2tcIiksICEwXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2RlZmF1bHQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB2YXIgdCA9IGUudGFyZ2V0O1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAocGUudGVzdCh0LnR5cGUpICYmXG4gICAgICAgICAgICAgIHQuY2xpY2sgJiZcbiAgICAgICAgICAgICAgQSh0LCBcImlucHV0XCIpICYmXG4gICAgICAgICAgICAgIFEuZ2V0KHQsIFwiY2xpY2tcIikpIHx8XG4gICAgICAgICAgICBBKHQsIFwiYVwiKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBiZWZvcmV1bmxvYWQ6IHtcbiAgICAgICAgcG9zdERpc3BhdGNoOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdm9pZCAwICE9PSBlLnJlc3VsdCAmJlxuICAgICAgICAgICAgZS5vcmlnaW5hbEV2ZW50ICYmXG4gICAgICAgICAgICAoZS5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZS5yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KSxcbiAgICAoay5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgIGUucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJiBlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCwgbik7XG4gICAgfSksXG4gICAgKGsuRXZlbnQgPSBmdW5jdGlvbihlLCB0KSB7XG4gICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2Ygay5FdmVudCkpIHJldHVybiBuZXcgay5FdmVudChlLCB0KTtcbiAgICAgIGUgJiYgZS50eXBlXG4gICAgICAgID8gKCh0aGlzLm9yaWdpbmFsRXZlbnQgPSBlKSxcbiAgICAgICAgICAodGhpcy50eXBlID0gZS50eXBlKSxcbiAgICAgICAgICAodGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPVxuICAgICAgICAgICAgZS5kZWZhdWx0UHJldmVudGVkIHx8XG4gICAgICAgICAgICAodm9pZCAwID09PSBlLmRlZmF1bHRQcmV2ZW50ZWQgJiYgITEgPT09IGUucmV0dXJuVmFsdWUpXG4gICAgICAgICAgICAgID8ga2VcbiAgICAgICAgICAgICAgOiBTZSksXG4gICAgICAgICAgKHRoaXMudGFyZ2V0ID1cbiAgICAgICAgICAgIGUudGFyZ2V0ICYmIDMgPT09IGUudGFyZ2V0Lm5vZGVUeXBlXG4gICAgICAgICAgICAgID8gZS50YXJnZXQucGFyZW50Tm9kZVxuICAgICAgICAgICAgICA6IGUudGFyZ2V0KSxcbiAgICAgICAgICAodGhpcy5jdXJyZW50VGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAodGhpcy5yZWxhdGVkVGFyZ2V0ID0gZS5yZWxhdGVkVGFyZ2V0KSlcbiAgICAgICAgOiAodGhpcy50eXBlID0gZSksXG4gICAgICAgIHQgJiYgay5leHRlbmQodGhpcywgdCksXG4gICAgICAgICh0aGlzLnRpbWVTdGFtcCA9IChlICYmIGUudGltZVN0YW1wKSB8fCBEYXRlLm5vdygpKSxcbiAgICAgICAgKHRoaXNbay5leHBhbmRvXSA9ICEwKTtcbiAgICB9KSxcbiAgICAoay5FdmVudC5wcm90b3R5cGUgPSB7XG4gICAgICBjb25zdHJ1Y3Rvcjogay5FdmVudCxcbiAgICAgIGlzRGVmYXVsdFByZXZlbnRlZDogU2UsXG4gICAgICBpc1Byb3BhZ2F0aW9uU3RvcHBlZDogU2UsXG4gICAgICBpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogU2UsXG4gICAgICBpc1NpbXVsYXRlZDogITEsXG4gICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuICAgICAgICAodGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBrZSksXG4gICAgICAgICAgZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LFxuICAgICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICh0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0ga2UpLFxuICAgICAgICAgIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgJiYgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0sXG4gICAgICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcbiAgICAgICAgKHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSBrZSksXG4gICAgICAgICAgZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCAmJiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLFxuICAgICAgICAgIHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgay5lYWNoKFxuICAgICAge1xuICAgICAgICBhbHRLZXk6ICEwLFxuICAgICAgICBidWJibGVzOiAhMCxcbiAgICAgICAgY2FuY2VsYWJsZTogITAsXG4gICAgICAgIGNoYW5nZWRUb3VjaGVzOiAhMCxcbiAgICAgICAgY3RybEtleTogITAsXG4gICAgICAgIGRldGFpbDogITAsXG4gICAgICAgIGV2ZW50UGhhc2U6ICEwLFxuICAgICAgICBtZXRhS2V5OiAhMCxcbiAgICAgICAgcGFnZVg6ICEwLFxuICAgICAgICBwYWdlWTogITAsXG4gICAgICAgIHNoaWZ0S2V5OiAhMCxcbiAgICAgICAgdmlldzogITAsXG4gICAgICAgIGNoYXI6ICEwLFxuICAgICAgICBjb2RlOiAhMCxcbiAgICAgICAgY2hhckNvZGU6ICEwLFxuICAgICAgICBrZXk6ICEwLFxuICAgICAgICBrZXlDb2RlOiAhMCxcbiAgICAgICAgYnV0dG9uOiAhMCxcbiAgICAgICAgYnV0dG9uczogITAsXG4gICAgICAgIGNsaWVudFg6ICEwLFxuICAgICAgICBjbGllbnRZOiAhMCxcbiAgICAgICAgb2Zmc2V0WDogITAsXG4gICAgICAgIG9mZnNldFk6ICEwLFxuICAgICAgICBwb2ludGVySWQ6ICEwLFxuICAgICAgICBwb2ludGVyVHlwZTogITAsXG4gICAgICAgIHNjcmVlblg6ICEwLFxuICAgICAgICBzY3JlZW5ZOiAhMCxcbiAgICAgICAgdGFyZ2V0VG91Y2hlczogITAsXG4gICAgICAgIHRvRWxlbWVudDogITAsXG4gICAgICAgIHRvdWNoZXM6ICEwLFxuICAgICAgICB3aGljaDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHZhciB0ID0gZS5idXR0b247XG4gICAgICAgICAgcmV0dXJuIG51bGwgPT0gZS53aGljaCAmJiBUZS50ZXN0KGUudHlwZSlcbiAgICAgICAgICAgID8gbnVsbCAhPSBlLmNoYXJDb2RlXG4gICAgICAgICAgICAgID8gZS5jaGFyQ29kZVxuICAgICAgICAgICAgICA6IGUua2V5Q29kZVxuICAgICAgICAgICAgOiAhZS53aGljaCAmJiB2b2lkIDAgIT09IHQgJiYgQ2UudGVzdChlLnR5cGUpXG4gICAgICAgICAgICA/IDEgJiB0XG4gICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICA6IDIgJiB0XG4gICAgICAgICAgICAgID8gM1xuICAgICAgICAgICAgICA6IDQgJiB0XG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDBcbiAgICAgICAgICAgIDogZS53aGljaDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGsuZXZlbnQuYWRkUHJvcFxuICAgICksXG4gICAgay5lYWNoKHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oZSwgdCkge1xuICAgICAgay5ldmVudC5zcGVjaWFsW2VdID0ge1xuICAgICAgICBzZXR1cDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIERlKHRoaXMsIGUsIE5lKSwgITE7XG4gICAgICAgIH0sXG4gICAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBEZSh0aGlzLCBlKSwgITA7XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGVnYXRlVHlwZTogdFxuICAgICAgfTtcbiAgICB9KSxcbiAgICBrLmVhY2goXG4gICAgICB7XG4gICAgICAgIG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG4gICAgICAgIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcbiAgICAgICAgcG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG4gICAgICAgIHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbihlLCBpKSB7XG4gICAgICAgIGsuZXZlbnQuc3BlY2lhbFtlXSA9IHtcbiAgICAgICAgICBkZWxlZ2F0ZVR5cGU6IGksXG4gICAgICAgICAgYmluZFR5cGU6IGksXG4gICAgICAgICAgaGFuZGxlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgbiA9IGUucmVsYXRlZFRhcmdldCxcbiAgICAgICAgICAgICAgciA9IGUuaGFuZGxlT2JqO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKG4gJiYgKG4gPT09IHRoaXMgfHwgay5jb250YWlucyh0aGlzLCBuKSkpIHx8XG4gICAgICAgICAgICAgICAgKChlLnR5cGUgPSByLm9yaWdUeXBlKSxcbiAgICAgICAgICAgICAgICAodCA9IHIuaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgICAgICAgICAoZS50eXBlID0gaSkpLFxuICAgICAgICAgICAgICB0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICApLFxuICAgIGsuZm4uZXh0ZW5kKHtcbiAgICAgIG9uOiBmdW5jdGlvbihlLCB0LCBuLCByKSB7XG4gICAgICAgIHJldHVybiBBZSh0aGlzLCBlLCB0LCBuLCByKTtcbiAgICAgIH0sXG4gICAgICBvbmU6IGZ1bmN0aW9uKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgcmV0dXJuIEFlKHRoaXMsIGUsIHQsIG4sIHIsIDEpO1xuICAgICAgfSxcbiAgICAgIG9mZjogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICB2YXIgciwgaTtcbiAgICAgICAgaWYgKGUgJiYgZS5wcmV2ZW50RGVmYXVsdCAmJiBlLmhhbmRsZU9iailcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHIgPSBlLmhhbmRsZU9iaiksXG4gICAgICAgICAgICBrKGUuZGVsZWdhdGVUYXJnZXQpLm9mZihcbiAgICAgICAgICAgICAgci5uYW1lc3BhY2UgPyByLm9yaWdUeXBlICsgXCIuXCIgKyByLm5hbWVzcGFjZSA6IHIub3JpZ1R5cGUsXG4gICAgICAgICAgICAgIHIuc2VsZWN0b3IsXG4gICAgICAgICAgICAgIHIuaGFuZGxlclxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICApO1xuICAgICAgICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZSkge1xuICAgICAgICAgIGZvciAoaSBpbiBlKSB0aGlzLm9mZihpLCB0LCBlW2ldKTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICghMSAhPT0gdCAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQpIHx8ICgobiA9IHQpLCAodCA9IHZvaWQgMCkpLFxuICAgICAgICAgICExID09PSBuICYmIChuID0gU2UpLFxuICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGsuZXZlbnQucmVtb3ZlKHRoaXMsIGUsIG4sIHQpO1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIHZhciBqZSA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuICAgIHFlID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG4gICAgTGUgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuICAgIEhlID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuICBmdW5jdGlvbiBPZShlLCB0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIChBKGUsIFwidGFibGVcIikgJiZcbiAgICAgICAgQSgxMSAhPT0gdC5ub2RlVHlwZSA/IHQgOiB0LmZpcnN0Q2hpbGQsIFwidHJcIikgJiZcbiAgICAgICAgayhlKS5jaGlsZHJlbihcInRib2R5XCIpWzBdKSB8fFxuICAgICAgZVxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gUGUoZSkge1xuICAgIHJldHVybiAoZS50eXBlID0gKG51bGwgIT09IGUuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgKyBcIi9cIiArIGUudHlwZSksIGU7XG4gIH1cbiAgZnVuY3Rpb24gUmUoZSkge1xuICAgIHJldHVybiAoXG4gICAgICBcInRydWUvXCIgPT09IChlLnR5cGUgfHwgXCJcIikuc2xpY2UoMCwgNSlcbiAgICAgICAgPyAoZS50eXBlID0gZS50eXBlLnNsaWNlKDUpKVxuICAgICAgICA6IGUucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKSxcbiAgICAgIGVcbiAgICApO1xuICB9XG4gIGZ1bmN0aW9uIE1lKGUsIHQpIHtcbiAgICB2YXIgbiwgciwgaSwgbywgYSwgcywgdSwgbDtcbiAgICBpZiAoMSA9PT0gdC5ub2RlVHlwZSkge1xuICAgICAgaWYgKFxuICAgICAgICBRLmhhc0RhdGEoZSkgJiZcbiAgICAgICAgKChvID0gUS5hY2Nlc3MoZSkpLCAoYSA9IFEuc2V0KHQsIG8pKSwgKGwgPSBvLmV2ZW50cykpXG4gICAgICApXG4gICAgICAgIGZvciAoaSBpbiAoZGVsZXRlIGEuaGFuZGxlLCAoYS5ldmVudHMgPSB7fSksIGwpKVxuICAgICAgICAgIGZvciAobiA9IDAsIHIgPSBsW2ldLmxlbmd0aDsgbiA8IHI7IG4rKykgay5ldmVudC5hZGQodCwgaSwgbFtpXVtuXSk7XG4gICAgICBKLmhhc0RhdGEoZSkgJiYgKChzID0gSi5hY2Nlc3MoZSkpLCAodSA9IGsuZXh0ZW5kKHt9LCBzKSksIEouc2V0KHQsIHUpKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gSWUobiwgciwgaSwgbykge1xuICAgIHIgPSBnLmFwcGx5KFtdLCByKTtcbiAgICB2YXIgZSxcbiAgICAgIHQsXG4gICAgICBhLFxuICAgICAgcyxcbiAgICAgIHUsXG4gICAgICBsLFxuICAgICAgYyA9IDAsXG4gICAgICBmID0gbi5sZW5ndGgsXG4gICAgICBwID0gZiAtIDEsXG4gICAgICBkID0gclswXSxcbiAgICAgIGggPSBtKGQpO1xuICAgIGlmIChoIHx8ICgxIDwgZiAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBkICYmICF5LmNoZWNrQ2xvbmUgJiYgTGUudGVzdChkKSkpXG4gICAgICByZXR1cm4gbi5lYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHQgPSBuLmVxKGUpO1xuICAgICAgICBoICYmIChyWzBdID0gZC5jYWxsKHRoaXMsIGUsIHQuaHRtbCgpKSksIEllKHQsIHIsIGksIG8pO1xuICAgICAgfSk7XG4gICAgaWYgKFxuICAgICAgZiAmJlxuICAgICAgKCh0ID0gKGUgPSB3ZShyLCBuWzBdLm93bmVyRG9jdW1lbnQsICExLCBuLCBvKSkuZmlyc3RDaGlsZCksXG4gICAgICAxID09PSBlLmNoaWxkTm9kZXMubGVuZ3RoICYmIChlID0gdCksXG4gICAgICB0IHx8IG8pXG4gICAgKSB7XG4gICAgICBmb3IgKHMgPSAoYSA9IGsubWFwKHZlKGUsIFwic2NyaXB0XCIpLCBQZSkpLmxlbmd0aDsgYyA8IGY7IGMrKylcbiAgICAgICAgKHUgPSBlKSxcbiAgICAgICAgICBjICE9PSBwICYmXG4gICAgICAgICAgICAoKHUgPSBrLmNsb25lKHUsICEwLCAhMCkpLCBzICYmIGsubWVyZ2UoYSwgdmUodSwgXCJzY3JpcHRcIikpKSxcbiAgICAgICAgICBpLmNhbGwobltjXSwgdSwgYyk7XG4gICAgICBpZiAocylcbiAgICAgICAgZm9yIChsID0gYVthLmxlbmd0aCAtIDFdLm93bmVyRG9jdW1lbnQsIGsubWFwKGEsIFJlKSwgYyA9IDA7IGMgPCBzOyBjKyspXG4gICAgICAgICAgKHUgPSBhW2NdKSxcbiAgICAgICAgICAgIGhlLnRlc3QodS50eXBlIHx8IFwiXCIpICYmXG4gICAgICAgICAgICAgICFRLmFjY2Vzcyh1LCBcImdsb2JhbEV2YWxcIikgJiZcbiAgICAgICAgICAgICAgay5jb250YWlucyhsLCB1KSAmJlxuICAgICAgICAgICAgICAodS5zcmMgJiYgXCJtb2R1bGVcIiAhPT0gKHUudHlwZSB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgPyBrLl9ldmFsVXJsICYmXG4gICAgICAgICAgICAgICAgICAhdS5ub01vZHVsZSAmJlxuICAgICAgICAgICAgICAgICAgay5fZXZhbFVybCh1LnNyYywge1xuICAgICAgICAgICAgICAgICAgICBub25jZTogdS5ub25jZSB8fCB1LmdldEF0dHJpYnV0ZShcIm5vbmNlXCIpXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIDogYih1LnRleHRDb250ZW50LnJlcGxhY2UoSGUsIFwiXCIpLCB1LCBsKSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xuICB9XG4gIGZ1bmN0aW9uIFdlKGUsIHQsIG4pIHtcbiAgICBmb3IgKHZhciByLCBpID0gdCA/IGsuZmlsdGVyKHQsIGUpIDogZSwgbyA9IDA7IG51bGwgIT0gKHIgPSBpW29dKTsgbysrKVxuICAgICAgbiB8fCAxICE9PSByLm5vZGVUeXBlIHx8IGsuY2xlYW5EYXRhKHZlKHIpKSxcbiAgICAgICAgci5wYXJlbnROb2RlICYmXG4gICAgICAgICAgKG4gJiYgb2UocikgJiYgeWUodmUociwgXCJzY3JpcHRcIikpLCByLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocikpO1xuICAgIHJldHVybiBlO1xuICB9XG4gIGsuZXh0ZW5kKHtcbiAgICBodG1sUHJlZmlsdGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gZS5yZXBsYWNlKGplLCBcIjwkMT48LyQyPlwiKTtcbiAgICB9LFxuICAgIGNsb25lOiBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICB2YXIgcixcbiAgICAgICAgaSxcbiAgICAgICAgbyxcbiAgICAgICAgYSxcbiAgICAgICAgcyxcbiAgICAgICAgdSxcbiAgICAgICAgbCxcbiAgICAgICAgYyA9IGUuY2xvbmVOb2RlKCEwKSxcbiAgICAgICAgZiA9IG9lKGUpO1xuICAgICAgaWYgKFxuICAgICAgICAhKFxuICAgICAgICAgIHkubm9DbG9uZUNoZWNrZWQgfHxcbiAgICAgICAgICAoMSAhPT0gZS5ub2RlVHlwZSAmJiAxMSAhPT0gZS5ub2RlVHlwZSkgfHxcbiAgICAgICAgICBrLmlzWE1MRG9jKGUpXG4gICAgICAgIClcbiAgICAgIClcbiAgICAgICAgZm9yIChhID0gdmUoYyksIHIgPSAwLCBpID0gKG8gPSB2ZShlKSkubGVuZ3RoOyByIDwgaTsgcisrKVxuICAgICAgICAgIChzID0gb1tyXSksXG4gICAgICAgICAgICAodSA9IGFbcl0pLFxuICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgXCJpbnB1dFwiID09PSAobCA9IHUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgJiYgcGUudGVzdChzLnR5cGUpXG4gICAgICAgICAgICAgID8gKHUuY2hlY2tlZCA9IHMuY2hlY2tlZClcbiAgICAgICAgICAgICAgOiAoXCJpbnB1dFwiICE9PSBsICYmIFwidGV4dGFyZWFcIiAhPT0gbCkgfHxcbiAgICAgICAgICAgICAgICAodS5kZWZhdWx0VmFsdWUgPSBzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICBpZiAodClcbiAgICAgICAgaWYgKG4pXG4gICAgICAgICAgZm9yIChvID0gbyB8fCB2ZShlKSwgYSA9IGEgfHwgdmUoYyksIHIgPSAwLCBpID0gby5sZW5ndGg7IHIgPCBpOyByKyspXG4gICAgICAgICAgICBNZShvW3JdLCBhW3JdKTtcbiAgICAgICAgZWxzZSBNZShlLCBjKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDAgPCAoYSA9IHZlKGMsIFwic2NyaXB0XCIpKS5sZW5ndGggJiYgeWUoYSwgIWYgJiYgdmUoZSwgXCJzY3JpcHRcIikpLCBjXG4gICAgICApO1xuICAgIH0sXG4gICAgY2xlYW5EYXRhOiBmdW5jdGlvbihlKSB7XG4gICAgICBmb3IgKHZhciB0LCBuLCByLCBpID0gay5ldmVudC5zcGVjaWFsLCBvID0gMDsgdm9pZCAwICE9PSAobiA9IGVbb10pOyBvKyspXG4gICAgICAgIGlmIChHKG4pKSB7XG4gICAgICAgICAgaWYgKCh0ID0gbltRLmV4cGFuZG9dKSkge1xuICAgICAgICAgICAgaWYgKHQuZXZlbnRzKVxuICAgICAgICAgICAgICBmb3IgKHIgaW4gdC5ldmVudHMpXG4gICAgICAgICAgICAgICAgaVtyXSA/IGsuZXZlbnQucmVtb3ZlKG4sIHIpIDogay5yZW1vdmVFdmVudChuLCByLCB0LmhhbmRsZSk7XG4gICAgICAgICAgICBuW1EuZXhwYW5kb10gPSB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5bSi5leHBhbmRvXSAmJiAobltKLmV4cGFuZG9dID0gdm9pZCAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSksXG4gICAgay5mbi5leHRlbmQoe1xuICAgICAgZGV0YWNoOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBXZSh0aGlzLCBlLCAhMCk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBXZSh0aGlzLCBlKTtcbiAgICAgIH0sXG4gICAgICB0ZXh0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBfKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZVxuICAgICAgICAgICAgICA/IGsudGV4dCh0aGlzKVxuICAgICAgICAgICAgICA6IHRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgKDEgIT09IHRoaXMubm9kZVR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgMTEgIT09IHRoaXMubm9kZVR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgOSAhPT0gdGhpcy5ub2RlVHlwZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMudGV4dENvbnRlbnQgPSBlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgZSxcbiAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgYXBwZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEllKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICgxICE9PSB0aGlzLm5vZGVUeXBlICYmXG4gICAgICAgICAgICAxMSAhPT0gdGhpcy5ub2RlVHlwZSAmJlxuICAgICAgICAgICAgOSAhPT0gdGhpcy5ub2RlVHlwZSkgfHxcbiAgICAgICAgICAgIE9lKHRoaXMsIGUpLmFwcGVuZENoaWxkKGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBwcmVwZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEllKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIDEgPT09IHRoaXMubm9kZVR5cGUgfHxcbiAgICAgICAgICAgIDExID09PSB0aGlzLm5vZGVUeXBlIHx8XG4gICAgICAgICAgICA5ID09PSB0aGlzLm5vZGVUeXBlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgdCA9IE9lKHRoaXMsIGUpO1xuICAgICAgICAgICAgdC5pbnNlcnRCZWZvcmUoZSwgdC5maXJzdENoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGJlZm9yZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBJZSh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB0aGlzLnBhcmVudE5vZGUgJiYgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgYWZ0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gSWUodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnROb2RlICYmIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSwgdGhpcy5uZXh0U2libGluZyk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgZSwgdCA9IDA7IG51bGwgIT0gKGUgPSB0aGlzW3RdKTsgdCsrKVxuICAgICAgICAgIDEgPT09IGUubm9kZVR5cGUgJiYgKGsuY2xlYW5EYXRhKHZlKGUsICExKSksIChlLnRleHRDb250ZW50ID0gXCJcIikpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBjbG9uZTogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChlID0gbnVsbCAhPSBlICYmIGUpLFxuICAgICAgICAgICh0ID0gbnVsbCA9PSB0ID8gZSA6IHQpLFxuICAgICAgICAgIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGsuY2xvbmUodGhpcywgZSwgdCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBodG1sOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBfKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzWzBdIHx8IHt9LFxuICAgICAgICAgICAgICBuID0gMCxcbiAgICAgICAgICAgICAgciA9IHRoaXMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gZSAmJiAxID09PSB0Lm5vZGVUeXBlKSByZXR1cm4gdC5pbm5lckhUTUw7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgJiZcbiAgICAgICAgICAgICAgIXFlLnRlc3QoZSkgJiZcbiAgICAgICAgICAgICAgIWdlWyhkZS5leGVjKGUpIHx8IFtcIlwiLCBcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV1cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBlID0gay5odG1sUHJlZmlsdGVyKGUpO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAoOyBuIDwgcjsgbisrKVxuICAgICAgICAgICAgICAgICAgMSA9PT0gKHQgPSB0aGlzW25dIHx8IHt9KS5ub2RlVHlwZSAmJlxuICAgICAgICAgICAgICAgICAgICAoay5jbGVhbkRhdGEodmUodCwgITEpKSwgKHQuaW5uZXJIVE1MID0gZSkpO1xuICAgICAgICAgICAgICAgIHQgPSAwO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdCAmJiB0aGlzLmVtcHR5KCkuYXBwZW5kKGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBlLFxuICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICByZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBuID0gW107XG4gICAgICAgIHJldHVybiBJZShcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIGFyZ3VtZW50cyxcbiAgICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGsuaW5BcnJheSh0aGlzLCBuKSA8IDAgJiZcbiAgICAgICAgICAgICAgKGsuY2xlYW5EYXRhKHZlKHRoaXMpKSwgdCAmJiB0LnJlcGxhY2VDaGlsZChlLCB0aGlzKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBuXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSksXG4gICAgay5lYWNoKFxuICAgICAge1xuICAgICAgICBhcHBlbmRUbzogXCJhcHBlbmRcIixcbiAgICAgICAgcHJlcGVuZFRvOiBcInByZXBlbmRcIixcbiAgICAgICAgaW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuICAgICAgICBpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuICAgICAgICByZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbihlLCBhKSB7XG4gICAgICAgIGsuZm5bZV0gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgZm9yICh2YXIgdCwgbiA9IFtdLCByID0gayhlKSwgaSA9IHIubGVuZ3RoIC0gMSwgbyA9IDA7IG8gPD0gaTsgbysrKVxuICAgICAgICAgICAgKHQgPSBvID09PSBpID8gdGhpcyA6IHRoaXMuY2xvbmUoITApKSxcbiAgICAgICAgICAgICAgayhyW29dKVthXSh0KSxcbiAgICAgICAgICAgICAgdS5hcHBseShuLCB0LmdldCgpKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2sobik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgKTtcbiAgdmFyICRlID0gbmV3IFJlZ0V4cChcIl4oXCIgKyB0ZSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiKSxcbiAgICBGZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciB0ID0gZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgICAgcmV0dXJuICh0ICYmIHQub3BlbmVyKSB8fCAodCA9IEMpLCB0LmdldENvbXB1dGVkU3R5bGUoZSk7XG4gICAgfSxcbiAgICBCZSA9IG5ldyBSZWdFeHAocmUuam9pbihcInxcIiksIFwiaVwiKTtcbiAgZnVuY3Rpb24gX2UoZSwgdCwgbikge1xuICAgIHZhciByLFxuICAgICAgaSxcbiAgICAgIG8sXG4gICAgICBhLFxuICAgICAgcyA9IGUuc3R5bGU7XG4gICAgcmV0dXJuIChcbiAgICAgIChuID0gbiB8fCBGZShlKSkgJiZcbiAgICAgICAgKFwiXCIgIT09IChhID0gbi5nZXRQcm9wZXJ0eVZhbHVlKHQpIHx8IG5bdF0pIHx8XG4gICAgICAgICAgb2UoZSkgfHxcbiAgICAgICAgICAoYSA9IGsuc3R5bGUoZSwgdCkpLFxuICAgICAgICAheS5waXhlbEJveFN0eWxlcygpICYmXG4gICAgICAgICAgJGUudGVzdChhKSAmJlxuICAgICAgICAgIEJlLnRlc3QodCkgJiZcbiAgICAgICAgICAoKHIgPSBzLndpZHRoKSxcbiAgICAgICAgICAoaSA9IHMubWluV2lkdGgpLFxuICAgICAgICAgIChvID0gcy5tYXhXaWR0aCksXG4gICAgICAgICAgKHMubWluV2lkdGggPSBzLm1heFdpZHRoID0gcy53aWR0aCA9IGEpLFxuICAgICAgICAgIChhID0gbi53aWR0aCksXG4gICAgICAgICAgKHMud2lkdGggPSByKSxcbiAgICAgICAgICAocy5taW5XaWR0aCA9IGkpLFxuICAgICAgICAgIChzLm1heFdpZHRoID0gbykpKSxcbiAgICAgIHZvaWQgMCAhPT0gYSA/IGEgKyBcIlwiIDogYVxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gemUoZSwgdCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIWUoKSkgcmV0dXJuICh0aGlzLmdldCA9IHQpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmdldDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gICEoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gZSgpIHtcbiAgICAgIGlmICh1KSB7XG4gICAgICAgIChzLnN0eWxlLmNzc1RleHQgPVxuICAgICAgICAgIFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O21hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiKSxcbiAgICAgICAgICAodS5zdHlsZS5jc3NUZXh0ID1cbiAgICAgICAgICAgIFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO21hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NjAlO3RvcDoxJVwiKSxcbiAgICAgICAgICBpZS5hcHBlbmRDaGlsZChzKS5hcHBlbmRDaGlsZCh1KTtcbiAgICAgICAgdmFyIGUgPSBDLmdldENvbXB1dGVkU3R5bGUodSk7XG4gICAgICAgIChuID0gXCIxJVwiICE9PSBlLnRvcCksXG4gICAgICAgICAgKGEgPSAxMiA9PT0gdChlLm1hcmdpbkxlZnQpKSxcbiAgICAgICAgICAodS5zdHlsZS5yaWdodCA9IFwiNjAlXCIpLFxuICAgICAgICAgIChvID0gMzYgPT09IHQoZS5yaWdodCkpLFxuICAgICAgICAgIChyID0gMzYgPT09IHQoZS53aWR0aCkpLFxuICAgICAgICAgICh1LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiKSxcbiAgICAgICAgICAoaSA9IDEyID09PSB0KHUub2Zmc2V0V2lkdGggLyAzKSksXG4gICAgICAgICAgaWUucmVtb3ZlQ2hpbGQocyksXG4gICAgICAgICAgKHUgPSBudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdChlKSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChwYXJzZUZsb2F0KGUpKTtcbiAgICB9XG4gICAgdmFyIG4sXG4gICAgICByLFxuICAgICAgaSxcbiAgICAgIG8sXG4gICAgICBhLFxuICAgICAgcyA9IEUuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgIHUgPSBFLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdS5zdHlsZSAmJlxuICAgICAgKCh1LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiKSxcbiAgICAgICh1LmNsb25lTm9kZSghMCkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiKSxcbiAgICAgICh5LmNsZWFyQ2xvbmVTdHlsZSA9IFwiY29udGVudC1ib3hcIiA9PT0gdS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCksXG4gICAgICBrLmV4dGVuZCh5LCB7XG4gICAgICAgIGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZSgpLCByO1xuICAgICAgICB9LFxuICAgICAgICBwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGUoKSwgbztcbiAgICAgICAgfSxcbiAgICAgICAgcGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGUoKSwgbjtcbiAgICAgICAgfSxcbiAgICAgICAgcmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZSgpLCBhO1xuICAgICAgICB9LFxuICAgICAgICBzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZSgpLCBpO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gIH0pKCk7XG4gIHZhciBVZSA9IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdLFxuICAgIFhlID0gRS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFxuICAgIFZlID0ge307XG4gIGZ1bmN0aW9uIEdlKGUpIHtcbiAgICB2YXIgdCA9IGsuY3NzUHJvcHNbZV0gfHwgVmVbZV07XG4gICAgcmV0dXJuIChcbiAgICAgIHQgfHxcbiAgICAgIChlIGluIFhlXG4gICAgICAgID8gZVxuICAgICAgICA6IChWZVtlXSA9XG4gICAgICAgICAgICAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICB2YXIgdCA9IGVbMF0udG9VcHBlckNhc2UoKSArIGUuc2xpY2UoMSksXG4gICAgICAgICAgICAgICAgbiA9IFVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgd2hpbGUgKG4tLSkgaWYgKChlID0gVWVbbl0gKyB0KSBpbiBYZSkgcmV0dXJuIGU7XG4gICAgICAgICAgICB9KShlKSB8fCBlKSlcbiAgICApO1xuICB9XG4gIHZhciBZZSA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcbiAgICBRZSA9IC9eLS0vLFxuICAgIEplID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcbiAgICBLZSA9IHsgbGV0dGVyU3BhY2luZzogXCIwXCIsIGZvbnRXZWlnaHQ6IFwiNDAwXCIgfTtcbiAgZnVuY3Rpb24gWmUoZSwgdCwgbikge1xuICAgIHZhciByID0gbmUuZXhlYyh0KTtcbiAgICByZXR1cm4gciA/IE1hdGgubWF4KDAsIHJbMl0gLSAobiB8fCAwKSkgKyAoclszXSB8fCBcInB4XCIpIDogdDtcbiAgfVxuICBmdW5jdGlvbiBldChlLCB0LCBuLCByLCBpLCBvKSB7XG4gICAgdmFyIGEgPSBcIndpZHRoXCIgPT09IHQgPyAxIDogMCxcbiAgICAgIHMgPSAwLFxuICAgICAgdSA9IDA7XG4gICAgaWYgKG4gPT09IChyID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiKSkgcmV0dXJuIDA7XG4gICAgZm9yICg7IGEgPCA0OyBhICs9IDIpXG4gICAgICBcIm1hcmdpblwiID09PSBuICYmICh1ICs9IGsuY3NzKGUsIG4gKyByZVthXSwgITAsIGkpKSxcbiAgICAgICAgclxuICAgICAgICAgID8gKFwiY29udGVudFwiID09PSBuICYmICh1IC09IGsuY3NzKGUsIFwicGFkZGluZ1wiICsgcmVbYV0sICEwLCBpKSksXG4gICAgICAgICAgICBcIm1hcmdpblwiICE9PSBuICYmXG4gICAgICAgICAgICAgICh1IC09IGsuY3NzKGUsIFwiYm9yZGVyXCIgKyByZVthXSArIFwiV2lkdGhcIiwgITAsIGkpKSlcbiAgICAgICAgICA6ICgodSArPSBrLmNzcyhlLCBcInBhZGRpbmdcIiArIHJlW2FdLCAhMCwgaSkpLFxuICAgICAgICAgICAgXCJwYWRkaW5nXCIgIT09IG5cbiAgICAgICAgICAgICAgPyAodSArPSBrLmNzcyhlLCBcImJvcmRlclwiICsgcmVbYV0gKyBcIldpZHRoXCIsICEwLCBpKSlcbiAgICAgICAgICAgICAgOiAocyArPSBrLmNzcyhlLCBcImJvcmRlclwiICsgcmVbYV0gKyBcIldpZHRoXCIsICEwLCBpKSkpO1xuICAgIHJldHVybiAoXG4gICAgICAhciAmJlxuICAgICAgICAwIDw9IG8gJiZcbiAgICAgICAgKHUgKz1cbiAgICAgICAgICBNYXRoLm1heChcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBNYXRoLmNlaWwoXG4gICAgICAgICAgICAgIGVbXCJvZmZzZXRcIiArIHRbMF0udG9VcHBlckNhc2UoKSArIHQuc2xpY2UoMSldIC0gbyAtIHUgLSBzIC0gMC41XG4gICAgICAgICAgICApXG4gICAgICAgICAgKSB8fCAwKSxcbiAgICAgIHVcbiAgICApO1xuICB9XG4gIGZ1bmN0aW9uIHR0KGUsIHQsIG4pIHtcbiAgICB2YXIgciA9IEZlKGUpLFxuICAgICAgaSA9XG4gICAgICAgICgheS5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IG4pICYmXG4gICAgICAgIFwiYm9yZGVyLWJveFwiID09PSBrLmNzcyhlLCBcImJveFNpemluZ1wiLCAhMSwgciksXG4gICAgICBvID0gaSxcbiAgICAgIGEgPSBfZShlLCB0LCByKSxcbiAgICAgIHMgPSBcIm9mZnNldFwiICsgdFswXS50b1VwcGVyQ2FzZSgpICsgdC5zbGljZSgxKTtcbiAgICBpZiAoJGUudGVzdChhKSkge1xuICAgICAgaWYgKCFuKSByZXR1cm4gYTtcbiAgICAgIGEgPSBcImF1dG9cIjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICgoIXkuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpKSB8fFxuICAgICAgICBcImF1dG9cIiA9PT0gYSB8fFxuICAgICAgICAoIXBhcnNlRmxvYXQoYSkgJiYgXCJpbmxpbmVcIiA9PT0gay5jc3MoZSwgXCJkaXNwbGF5XCIsICExLCByKSkpICYmXG4gICAgICAgIGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggJiZcbiAgICAgICAgKChpID0gXCJib3JkZXItYm94XCIgPT09IGsuY3NzKGUsIFwiYm94U2l6aW5nXCIsICExLCByKSksXG4gICAgICAgIChvID0gcyBpbiBlKSAmJiAoYSA9IGVbc10pKSxcbiAgICAgIChhID0gcGFyc2VGbG9hdChhKSB8fCAwKSArXG4gICAgICAgIGV0KGUsIHQsIG4gfHwgKGkgPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIpLCBvLCByLCBhKSArXG4gICAgICAgIFwicHhcIlxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gbnQoZSwgdCwgbiwgciwgaSkge1xuICAgIHJldHVybiBuZXcgbnQucHJvdG90eXBlLmluaXQoZSwgdCwgbiwgciwgaSk7XG4gIH1cbiAgay5leHRlbmQoe1xuICAgIGNzc0hvb2tzOiB7XG4gICAgICBvcGFjaXR5OiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICB2YXIgbiA9IF9lKGUsIFwib3BhY2l0eVwiKTtcbiAgICAgICAgICAgIHJldHVybiBcIlwiID09PSBuID8gXCIxXCIgOiBuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY3NzTnVtYmVyOiB7XG4gICAgICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogITAsXG4gICAgICBjb2x1bW5Db3VudDogITAsXG4gICAgICBmaWxsT3BhY2l0eTogITAsXG4gICAgICBmbGV4R3JvdzogITAsXG4gICAgICBmbGV4U2hyaW5rOiAhMCxcbiAgICAgIGZvbnRXZWlnaHQ6ICEwLFxuICAgICAgZ3JpZEFyZWE6ICEwLFxuICAgICAgZ3JpZENvbHVtbjogITAsXG4gICAgICBncmlkQ29sdW1uRW5kOiAhMCxcbiAgICAgIGdyaWRDb2x1bW5TdGFydDogITAsXG4gICAgICBncmlkUm93OiAhMCxcbiAgICAgIGdyaWRSb3dFbmQ6ICEwLFxuICAgICAgZ3JpZFJvd1N0YXJ0OiAhMCxcbiAgICAgIGxpbmVIZWlnaHQ6ICEwLFxuICAgICAgb3BhY2l0eTogITAsXG4gICAgICBvcmRlcjogITAsXG4gICAgICBvcnBoYW5zOiAhMCxcbiAgICAgIHdpZG93czogITAsXG4gICAgICB6SW5kZXg6ICEwLFxuICAgICAgem9vbTogITBcbiAgICB9LFxuICAgIGNzc1Byb3BzOiB7fSxcbiAgICBzdHlsZTogZnVuY3Rpb24oZSwgdCwgbiwgcikge1xuICAgICAgaWYgKGUgJiYgMyAhPT0gZS5ub2RlVHlwZSAmJiA4ICE9PSBlLm5vZGVUeXBlICYmIGUuc3R5bGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgbyxcbiAgICAgICAgICBhLFxuICAgICAgICAgIHMgPSBWKHQpLFxuICAgICAgICAgIHUgPSBRZS50ZXN0KHQpLFxuICAgICAgICAgIGwgPSBlLnN0eWxlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKHUgfHwgKHQgPSBHZShzKSksIChhID0gay5jc3NIb29rc1t0XSB8fCBrLmNzc0hvb2tzW3NdKSwgdm9pZCAwID09PSBuKVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIGEgJiYgXCJnZXRcIiBpbiBhICYmIHZvaWQgMCAhPT0gKGkgPSBhLmdldChlLCAhMSwgcikpID8gaSA6IGxbdF07XG4gICAgICAgIFwic3RyaW5nXCIgPT09IChvID0gdHlwZW9mIG4pICYmXG4gICAgICAgICAgKGkgPSBuZS5leGVjKG4pKSAmJlxuICAgICAgICAgIGlbMV0gJiZcbiAgICAgICAgICAoKG4gPSBsZShlLCB0LCBpKSksIChvID0gXCJudW1iZXJcIikpLFxuICAgICAgICAgIG51bGwgIT0gbiAmJlxuICAgICAgICAgICAgbiA9PSBuICYmXG4gICAgICAgICAgICAoXCJudW1iZXJcIiAhPT0gbyB8fFxuICAgICAgICAgICAgICB1IHx8XG4gICAgICAgICAgICAgIChuICs9IChpICYmIGlbM10pIHx8IChrLmNzc051bWJlcltzXSA/IFwiXCIgOiBcInB4XCIpKSxcbiAgICAgICAgICAgIHkuY2xlYXJDbG9uZVN0eWxlIHx8XG4gICAgICAgICAgICAgIFwiXCIgIT09IG4gfHxcbiAgICAgICAgICAgICAgMCAhPT0gdC5pbmRleE9mKFwiYmFja2dyb3VuZFwiKSB8fFxuICAgICAgICAgICAgICAobFt0XSA9IFwiaW5oZXJpdFwiKSxcbiAgICAgICAgICAgIChhICYmIFwic2V0XCIgaW4gYSAmJiB2b2lkIDAgPT09IChuID0gYS5zZXQoZSwgbiwgcikpKSB8fFxuICAgICAgICAgICAgICAodSA/IGwuc2V0UHJvcGVydHkodCwgbikgOiAobFt0XSA9IG4pKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjc3M6IGZ1bmN0aW9uKGUsIHQsIG4sIHIpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICBvLFxuICAgICAgICBhLFxuICAgICAgICBzID0gVih0KTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIFFlLnRlc3QodCkgfHwgKHQgPSBHZShzKSksXG4gICAgICAgIChhID0gay5jc3NIb29rc1t0XSB8fCBrLmNzc0hvb2tzW3NdKSAmJlxuICAgICAgICAgIFwiZ2V0XCIgaW4gYSAmJlxuICAgICAgICAgIChpID0gYS5nZXQoZSwgITAsIG4pKSxcbiAgICAgICAgdm9pZCAwID09PSBpICYmIChpID0gX2UoZSwgdCwgcikpLFxuICAgICAgICBcIm5vcm1hbFwiID09PSBpICYmIHQgaW4gS2UgJiYgKGkgPSBLZVt0XSksXG4gICAgICAgIFwiXCIgPT09IG4gfHwgblxuICAgICAgICAgID8gKChvID0gcGFyc2VGbG9hdChpKSksICEwID09PSBuIHx8IGlzRmluaXRlKG8pID8gbyB8fCAwIDogaSlcbiAgICAgICAgICA6IGlcbiAgICAgICk7XG4gICAgfVxuICB9KSxcbiAgICBrLmVhY2goW1wiaGVpZ2h0XCIsIFwid2lkdGhcIl0sIGZ1bmN0aW9uKGUsIHUpIHtcbiAgICAgIGsuY3NzSG9va3NbdV0gPSB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICAgIGlmICh0KVxuICAgICAgICAgICAgcmV0dXJuICFZZS50ZXN0KGsuY3NzKGUsIFwiZGlzcGxheVwiKSkgfHxcbiAgICAgICAgICAgICAgKGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggJiYgZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aClcbiAgICAgICAgICAgICAgPyB0dChlLCB1LCBuKVxuICAgICAgICAgICAgICA6IHVlKGUsIEplLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0dChlLCB1LCBuKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICAgICAgdmFyIHIsXG4gICAgICAgICAgICBpID0gRmUoZSksXG4gICAgICAgICAgICBvID0gIXkuc2Nyb2xsYm94U2l6ZSgpICYmIFwiYWJzb2x1dGVcIiA9PT0gaS5wb3NpdGlvbixcbiAgICAgICAgICAgIGEgPSAobyB8fCBuKSAmJiBcImJvcmRlci1ib3hcIiA9PT0gay5jc3MoZSwgXCJib3hTaXppbmdcIiwgITEsIGkpLFxuICAgICAgICAgICAgcyA9IG4gPyBldChlLCB1LCBuLCBhLCBpKSA6IDA7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGEgJiZcbiAgICAgICAgICAgICAgbyAmJlxuICAgICAgICAgICAgICAocyAtPSBNYXRoLmNlaWwoXG4gICAgICAgICAgICAgICAgZVtcIm9mZnNldFwiICsgdVswXS50b1VwcGVyQ2FzZSgpICsgdS5zbGljZSgxKV0gLVxuICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdChpW3VdKSAtXG4gICAgICAgICAgICAgICAgICBldChlLCB1LCBcImJvcmRlclwiLCAhMSwgaSkgLVxuICAgICAgICAgICAgICAgICAgMC41XG4gICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgcyAmJlxuICAgICAgICAgICAgICAociA9IG5lLmV4ZWModCkpICYmXG4gICAgICAgICAgICAgIFwicHhcIiAhPT0gKHJbM10gfHwgXCJweFwiKSAmJlxuICAgICAgICAgICAgICAoKGUuc3R5bGVbdV0gPSB0KSwgKHQgPSBrLmNzcyhlLCB1KSkpLFxuICAgICAgICAgICAgWmUoMCwgdCwgcylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pLFxuICAgIChrLmNzc0hvb2tzLm1hcmdpbkxlZnQgPSB6ZSh5LnJlbGlhYmxlTWFyZ2luTGVmdCwgZnVuY3Rpb24oZSwgdCkge1xuICAgICAgaWYgKHQpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHBhcnNlRmxvYXQoX2UoZSwgXCJtYXJnaW5MZWZ0XCIpKSB8fFxuICAgICAgICAgICAgZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cbiAgICAgICAgICAgICAgdWUoZSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgICAgICAgICAgIH0pKSArIFwicHhcIlxuICAgICAgICApO1xuICAgIH0pKSxcbiAgICBrLmVhY2goeyBtYXJnaW46IFwiXCIsIHBhZGRpbmc6IFwiXCIsIGJvcmRlcjogXCJXaWR0aFwiIH0sIGZ1bmN0aW9uKGksIG8pIHtcbiAgICAgIChrLmNzc0hvb2tzW2kgKyBvXSA9IHtcbiAgICAgICAgZXhwYW5kOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIHZhciB0ID0gMCwgbiA9IHt9LCByID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSA/IGUuc3BsaXQoXCIgXCIpIDogW2VdO1xuICAgICAgICAgICAgdCA8IDQ7XG4gICAgICAgICAgICB0KytcbiAgICAgICAgICApXG4gICAgICAgICAgICBuW2kgKyByZVt0XSArIG9dID0gclt0XSB8fCByW3QgLSAyXSB8fCByWzBdO1xuICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgICAgXCJtYXJnaW5cIiAhPT0gaSAmJiAoay5jc3NIb29rc1tpICsgb10uc2V0ID0gWmUpO1xuICAgIH0pLFxuICAgIGsuZm4uZXh0ZW5kKHtcbiAgICAgIGNzczogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICByZXR1cm4gXyhcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgICAgIHZhciByLFxuICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICBvID0ge30sXG4gICAgICAgICAgICAgIGEgPSAwO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodCkpIHtcbiAgICAgICAgICAgICAgZm9yIChyID0gRmUoZSksIGkgPSB0Lmxlbmd0aDsgYSA8IGk7IGErKylcbiAgICAgICAgICAgICAgICBvW3RbYV1dID0gay5jc3MoZSwgdFthXSwgITEsIHIpO1xuICAgICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2b2lkIDAgIT09IG4gPyBrLnN0eWxlKGUsIHQsIG4pIDogay5jc3MoZSwgdCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlLFxuICAgICAgICAgIHQsXG4gICAgICAgICAgMSA8IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICAoKChrLlR3ZWVuID0gbnQpLnByb3RvdHlwZSA9IHtcbiAgICAgIGNvbnN0cnVjdG9yOiBudCxcbiAgICAgIGluaXQ6IGZ1bmN0aW9uKGUsIHQsIG4sIHIsIGksIG8pIHtcbiAgICAgICAgKHRoaXMuZWxlbSA9IGUpLFxuICAgICAgICAgICh0aGlzLnByb3AgPSBuKSxcbiAgICAgICAgICAodGhpcy5lYXNpbmcgPSBpIHx8IGsuZWFzaW5nLl9kZWZhdWx0KSxcbiAgICAgICAgICAodGhpcy5vcHRpb25zID0gdCksXG4gICAgICAgICAgKHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCkpLFxuICAgICAgICAgICh0aGlzLmVuZCA9IHIpLFxuICAgICAgICAgICh0aGlzLnVuaXQgPSBvIHx8IChrLmNzc051bWJlcltuXSA/IFwiXCIgOiBcInB4XCIpKTtcbiAgICAgIH0sXG4gICAgICBjdXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSA9IG50LnByb3BIb29rc1t0aGlzLnByb3BdO1xuICAgICAgICByZXR1cm4gZSAmJiBlLmdldCA/IGUuZ2V0KHRoaXMpIDogbnQucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKTtcbiAgICAgIH0sXG4gICAgICBydW46IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHQsXG4gICAgICAgICAgbiA9IG50LnByb3BIb29rc1t0aGlzLnByb3BdO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuICAgICAgICAgICAgPyAodGhpcy5wb3MgPSB0ID0gay5lYXNpbmdbdGhpcy5lYXNpbmddKFxuICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogZSxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG4gICAgICAgICAgICAgICkpXG4gICAgICAgICAgICA6ICh0aGlzLnBvcyA9IHQgPSBlKSxcbiAgICAgICAgICAodGhpcy5ub3cgPSAodGhpcy5lbmQgLSB0aGlzLnN0YXJ0KSAqIHQgKyB0aGlzLnN0YXJ0KSxcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuc3RlcCAmJlxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnN0ZXAuY2FsbCh0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzKSxcbiAgICAgICAgICBuICYmIG4uc2V0ID8gbi5zZXQodGhpcykgOiBudC5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KS5pbml0LnByb3RvdHlwZSA9IG50LnByb3RvdHlwZSksXG4gICAgKChudC5wcm9wSG9va3MgPSB7XG4gICAgICBfZGVmYXVsdDoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICByZXR1cm4gMSAhPT0gZS5lbGVtLm5vZGVUeXBlIHx8XG4gICAgICAgICAgICAobnVsbCAhPSBlLmVsZW1bZS5wcm9wXSAmJiBudWxsID09IGUuZWxlbS5zdHlsZVtlLnByb3BdKVxuICAgICAgICAgICAgPyBlLmVsZW1bZS5wcm9wXVxuICAgICAgICAgICAgOiAodCA9IGsuY3NzKGUuZWxlbSwgZS5wcm9wLCBcIlwiKSkgJiYgXCJhdXRvXCIgIT09IHRcbiAgICAgICAgICAgID8gdFxuICAgICAgICAgICAgOiAwO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBrLmZ4LnN0ZXBbZS5wcm9wXVxuICAgICAgICAgICAgPyBrLmZ4LnN0ZXBbZS5wcm9wXShlKVxuICAgICAgICAgICAgOiAxICE9PSBlLmVsZW0ubm9kZVR5cGUgfHxcbiAgICAgICAgICAgICAgKCFrLmNzc0hvb2tzW2UucHJvcF0gJiYgbnVsbCA9PSBlLmVsZW0uc3R5bGVbR2UoZS5wcm9wKV0pXG4gICAgICAgICAgICA/IChlLmVsZW1bZS5wcm9wXSA9IGUubm93KVxuICAgICAgICAgICAgOiBrLnN0eWxlKGUuZWxlbSwgZS5wcm9wLCBlLm5vdyArIGUudW5pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KS5zY3JvbGxUb3AgPSBudC5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcbiAgICAgIHNldDogZnVuY3Rpb24oZSkge1xuICAgICAgICBlLmVsZW0ubm9kZVR5cGUgJiYgZS5lbGVtLnBhcmVudE5vZGUgJiYgKGUuZWxlbVtlLnByb3BdID0gZS5ub3cpO1xuICAgICAgfVxuICAgIH0pLFxuICAgIChrLmVhc2luZyA9IHtcbiAgICAgIGxpbmVhcjogZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH0sXG4gICAgICBzd2luZzogZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gMC41IC0gTWF0aC5jb3MoZSAqIE1hdGguUEkpIC8gMjtcbiAgICAgIH0sXG4gICAgICBfZGVmYXVsdDogXCJzd2luZ1wiXG4gICAgfSksXG4gICAgKGsuZnggPSBudC5wcm90b3R5cGUuaW5pdCksXG4gICAgKGsuZnguc3RlcCA9IHt9KTtcbiAgdmFyIHJ0LFxuICAgIGl0LFxuICAgIG90LFxuICAgIGF0LFxuICAgIHN0ID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuICAgIHV0ID0gL3F1ZXVlSG9va3MkLztcbiAgZnVuY3Rpb24gbHQoKSB7XG4gICAgaXQgJiZcbiAgICAgICghMSA9PT0gRS5oaWRkZW4gJiYgQy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgICAgPyBDLnJlcXVlc3RBbmltYXRpb25GcmFtZShsdClcbiAgICAgICAgOiBDLnNldFRpbWVvdXQobHQsIGsuZnguaW50ZXJ2YWwpLFxuICAgICAgay5meC50aWNrKCkpO1xuICB9XG4gIGZ1bmN0aW9uIGN0KCkge1xuICAgIHJldHVybiAoXG4gICAgICBDLnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJ0ID0gdm9pZCAwO1xuICAgICAgfSksXG4gICAgICAocnQgPSBEYXRlLm5vdygpKVxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gZnQoZSwgdCkge1xuICAgIHZhciBuLFxuICAgICAgciA9IDAsXG4gICAgICBpID0geyBoZWlnaHQ6IGUgfTtcbiAgICBmb3IgKHQgPSB0ID8gMSA6IDA7IHIgPCA0OyByICs9IDIgLSB0KVxuICAgICAgaVtcIm1hcmdpblwiICsgKG4gPSByZVtyXSldID0gaVtcInBhZGRpbmdcIiArIG5dID0gZTtcbiAgICByZXR1cm4gdCAmJiAoaS5vcGFjaXR5ID0gaS53aWR0aCA9IGUpLCBpO1xuICB9XG4gIGZ1bmN0aW9uIHB0KGUsIHQsIG4pIHtcbiAgICBmb3IgKFxuICAgICAgdmFyIHIsXG4gICAgICAgIGkgPSAoZHQudHdlZW5lcnNbdF0gfHwgW10pLmNvbmNhdChkdC50d2VlbmVyc1tcIipcIl0pLFxuICAgICAgICBvID0gMCxcbiAgICAgICAgYSA9IGkubGVuZ3RoO1xuICAgICAgbyA8IGE7XG4gICAgICBvKytcbiAgICApXG4gICAgICBpZiAoKHIgPSBpW29dLmNhbGwobiwgdCwgZSkpKSByZXR1cm4gcjtcbiAgfVxuICBmdW5jdGlvbiBkdChvLCBlLCB0KSB7XG4gICAgdmFyIG4sXG4gICAgICBhLFxuICAgICAgciA9IDAsXG4gICAgICBpID0gZHQucHJlZmlsdGVycy5sZW5ndGgsXG4gICAgICBzID0gay5EZWZlcnJlZCgpLmFsd2F5cyhmdW5jdGlvbigpIHtcbiAgICAgICAgZGVsZXRlIHUuZWxlbTtcbiAgICAgIH0pLFxuICAgICAgdSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYSkgcmV0dXJuICExO1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIHZhciBlID0gcnQgfHwgY3QoKSxcbiAgICAgICAgICAgIHQgPSBNYXRoLm1heCgwLCBsLnN0YXJ0VGltZSArIGwuZHVyYXRpb24gLSBlKSxcbiAgICAgICAgICAgIG4gPSAxIC0gKHQgLyBsLmR1cmF0aW9uIHx8IDApLFxuICAgICAgICAgICAgciA9IDAsXG4gICAgICAgICAgICBpID0gbC50d2VlbnMubGVuZ3RoO1xuICAgICAgICAgIHIgPCBpO1xuICAgICAgICAgIHIrK1xuICAgICAgICApXG4gICAgICAgICAgbC50d2VlbnNbcl0ucnVuKG4pO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHMubm90aWZ5V2l0aChvLCBbbCwgbiwgdF0pLFxuICAgICAgICAgIG4gPCAxICYmIGlcbiAgICAgICAgICAgID8gdFxuICAgICAgICAgICAgOiAoaSB8fCBzLm5vdGlmeVdpdGgobywgW2wsIDEsIDBdKSwgcy5yZXNvbHZlV2l0aChvLCBbbF0pLCAhMSlcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBsID0gcy5wcm9taXNlKHtcbiAgICAgICAgZWxlbTogbyxcbiAgICAgICAgcHJvcHM6IGsuZXh0ZW5kKHt9LCBlKSxcbiAgICAgICAgb3B0czogay5leHRlbmQoITAsIHsgc3BlY2lhbEVhc2luZzoge30sIGVhc2luZzogay5lYXNpbmcuX2RlZmF1bHQgfSwgdCksXG4gICAgICAgIG9yaWdpbmFsUHJvcGVydGllczogZSxcbiAgICAgICAgb3JpZ2luYWxPcHRpb25zOiB0LFxuICAgICAgICBzdGFydFRpbWU6IHJ0IHx8IGN0KCksXG4gICAgICAgIGR1cmF0aW9uOiB0LmR1cmF0aW9uLFxuICAgICAgICB0d2VlbnM6IFtdLFxuICAgICAgICBjcmVhdGVUd2VlbjogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgIHZhciBuID0gay5Ud2VlbihcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBsLm9wdHMsXG4gICAgICAgICAgICBlLFxuICAgICAgICAgICAgdCxcbiAgICAgICAgICAgIGwub3B0cy5zcGVjaWFsRWFzaW5nW2VdIHx8IGwub3B0cy5lYXNpbmdcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBsLnR3ZWVucy5wdXNoKG4pLCBuO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdmFyIHQgPSAwLFxuICAgICAgICAgICAgbiA9IGUgPyBsLnR3ZWVucy5sZW5ndGggOiAwO1xuICAgICAgICAgIGlmIChhKSByZXR1cm4gdGhpcztcbiAgICAgICAgICBmb3IgKGEgPSAhMDsgdCA8IG47IHQrKykgbC50d2VlbnNbdF0ucnVuKDEpO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBlXG4gICAgICAgICAgICAgID8gKHMubm90aWZ5V2l0aChvLCBbbCwgMSwgMF0pLCBzLnJlc29sdmVXaXRoKG8sIFtsLCBlXSkpXG4gICAgICAgICAgICAgIDogcy5yZWplY3RXaXRoKG8sIFtsLCBlXSksXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBjID0gbC5wcm9wcztcbiAgICBmb3IgKFxuICAgICAgIShmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgIHZhciBuLCByLCBpLCBvLCBhO1xuICAgICAgICBmb3IgKG4gaW4gZSlcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoKGkgPSB0WyhyID0gVihuKSldKSxcbiAgICAgICAgICAgIChvID0gZVtuXSksXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KG8pICYmICgoaSA9IG9bMV0pLCAobyA9IGVbbl0gPSBvWzBdKSksXG4gICAgICAgICAgICBuICE9PSByICYmICgoZVtyXSA9IG8pLCBkZWxldGUgZVtuXSksXG4gICAgICAgICAgICAoYSA9IGsuY3NzSG9va3Nbcl0pICYmIChcImV4cGFuZFwiIGluIGEpKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGZvciAobiBpbiAoKG8gPSBhLmV4cGFuZChvKSksIGRlbGV0ZSBlW3JdLCBvKSlcbiAgICAgICAgICAgICAgKG4gaW4gZSkgfHwgKChlW25dID0gb1tuXSksICh0W25dID0gaSkpO1xuICAgICAgICAgIGVsc2UgdFtyXSA9IGk7XG4gICAgICB9KShjLCBsLm9wdHMuc3BlY2lhbEVhc2luZyk7XG4gICAgICByIDwgaTtcbiAgICAgIHIrK1xuICAgIClcbiAgICAgIGlmICgobiA9IGR0LnByZWZpbHRlcnNbcl0uY2FsbChsLCBvLCBjLCBsLm9wdHMpKSlcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBtKG4uc3RvcCkgJiZcbiAgICAgICAgICAgIChrLl9xdWV1ZUhvb2tzKGwuZWxlbSwgbC5vcHRzLnF1ZXVlKS5zdG9wID0gbi5zdG9wLmJpbmQobikpLFxuICAgICAgICAgIG5cbiAgICAgICAgKTtcbiAgICByZXR1cm4gKFxuICAgICAgay5tYXAoYywgcHQsIGwpLFxuICAgICAgbShsLm9wdHMuc3RhcnQpICYmIGwub3B0cy5zdGFydC5jYWxsKG8sIGwpLFxuICAgICAgbFxuICAgICAgICAucHJvZ3Jlc3MobC5vcHRzLnByb2dyZXNzKVxuICAgICAgICAuZG9uZShsLm9wdHMuZG9uZSwgbC5vcHRzLmNvbXBsZXRlKVxuICAgICAgICAuZmFpbChsLm9wdHMuZmFpbClcbiAgICAgICAgLmFsd2F5cyhsLm9wdHMuYWx3YXlzKSxcbiAgICAgIGsuZngudGltZXIoay5leHRlbmQodSwgeyBlbGVtOiBvLCBhbmltOiBsLCBxdWV1ZTogbC5vcHRzLnF1ZXVlIH0pKSxcbiAgICAgIGxcbiAgICApO1xuICB9XG4gIChrLkFuaW1hdGlvbiA9IGsuZXh0ZW5kKGR0LCB7XG4gICAgdHdlZW5lcnM6IHtcbiAgICAgIFwiKlwiOiBbXG4gICAgICAgIGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICB2YXIgbiA9IHRoaXMuY3JlYXRlVHdlZW4oZSwgdCk7XG4gICAgICAgICAgcmV0dXJuIGxlKG4uZWxlbSwgZSwgbmUuZXhlYyh0KSwgbiksIG47XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHR3ZWVuZXI6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgIG0oZSkgPyAoKHQgPSBlKSwgKGUgPSBbXCIqXCJdKSkgOiAoZSA9IGUubWF0Y2goUikpO1xuICAgICAgZm9yICh2YXIgbiwgciA9IDAsIGkgPSBlLmxlbmd0aDsgciA8IGk7IHIrKylcbiAgICAgICAgKG4gPSBlW3JdKSxcbiAgICAgICAgICAoZHQudHdlZW5lcnNbbl0gPSBkdC50d2VlbmVyc1tuXSB8fCBbXSksXG4gICAgICAgICAgZHQudHdlZW5lcnNbbl0udW5zaGlmdCh0KTtcbiAgICB9LFxuICAgIHByZWZpbHRlcnM6IFtcbiAgICAgIGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgdmFyIHIsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBvLFxuICAgICAgICAgIGEsXG4gICAgICAgICAgcyxcbiAgICAgICAgICB1LFxuICAgICAgICAgIGwsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBmID0gXCJ3aWR0aFwiIGluIHQgfHwgXCJoZWlnaHRcIiBpbiB0LFxuICAgICAgICAgIHAgPSB0aGlzLFxuICAgICAgICAgIGQgPSB7fSxcbiAgICAgICAgICBoID0gZS5zdHlsZSxcbiAgICAgICAgICBnID0gZS5ub2RlVHlwZSAmJiBzZShlKSxcbiAgICAgICAgICB2ID0gUS5nZXQoZSwgXCJmeHNob3dcIik7XG4gICAgICAgIGZvciAociBpbiAobi5xdWV1ZSB8fFxuICAgICAgICAgIChudWxsID09IChhID0gay5fcXVldWVIb29rcyhlLCBcImZ4XCIpKS51bnF1ZXVlZCAmJlxuICAgICAgICAgICAgKChhLnVucXVldWVkID0gMCksXG4gICAgICAgICAgICAocyA9IGEuZW1wdHkuZmlyZSksXG4gICAgICAgICAgICAoYS5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGEudW5xdWV1ZWQgfHwgcygpO1xuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgIGEudW5xdWV1ZWQrKyxcbiAgICAgICAgICBwLmFsd2F5cyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHAuYWx3YXlzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBhLnVucXVldWVkLS0sIGsucXVldWUoZSwgXCJmeFwiKS5sZW5ndGggfHwgYS5lbXB0eS5maXJlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSksXG4gICAgICAgIHQpKVxuICAgICAgICAgIGlmICgoKGkgPSB0W3JdKSwgc3QudGVzdChpKSkpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgKGRlbGV0ZSB0W3JdLFxuICAgICAgICAgICAgICAobyA9IG8gfHwgXCJ0b2dnbGVcIiA9PT0gaSksXG4gICAgICAgICAgICAgIGkgPT09IChnID8gXCJoaWRlXCIgOiBcInNob3dcIikpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaWYgKFwic2hvd1wiICE9PSBpIHx8ICF2IHx8IHZvaWQgMCA9PT0gdltyXSkgY29udGludWU7XG4gICAgICAgICAgICAgIGcgPSAhMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRbcl0gPSAodiAmJiB2W3JdKSB8fCBrLnN0eWxlKGUsIHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgaWYgKCh1ID0gIWsuaXNFbXB0eU9iamVjdCh0KSkgfHwgIWsuaXNFbXB0eU9iamVjdChkKSlcbiAgICAgICAgICBmb3IgKHIgaW4gKGYgJiZcbiAgICAgICAgICAgIDEgPT09IGUubm9kZVR5cGUgJiZcbiAgICAgICAgICAgICgobi5vdmVyZmxvdyA9IFtoLm92ZXJmbG93LCBoLm92ZXJmbG93WCwgaC5vdmVyZmxvd1ldKSxcbiAgICAgICAgICAgIG51bGwgPT0gKGwgPSB2ICYmIHYuZGlzcGxheSkgJiYgKGwgPSBRLmdldChlLCBcImRpc3BsYXlcIikpLFxuICAgICAgICAgICAgXCJub25lXCIgPT09IChjID0gay5jc3MoZSwgXCJkaXNwbGF5XCIpKSAmJlxuICAgICAgICAgICAgICAobFxuICAgICAgICAgICAgICAgID8gKGMgPSBsKVxuICAgICAgICAgICAgICAgIDogKGZlKFtlXSwgITApLFxuICAgICAgICAgICAgICAgICAgKGwgPSBlLnN0eWxlLmRpc3BsYXkgfHwgbCksXG4gICAgICAgICAgICAgICAgICAoYyA9IGsuY3NzKGUsIFwiZGlzcGxheVwiKSksXG4gICAgICAgICAgICAgICAgICBmZShbZV0pKSksXG4gICAgICAgICAgICAoXCJpbmxpbmVcIiA9PT0gYyB8fCAoXCJpbmxpbmUtYmxvY2tcIiA9PT0gYyAmJiBudWxsICE9IGwpKSAmJlxuICAgICAgICAgICAgICBcIm5vbmVcIiA9PT0gay5jc3MoZSwgXCJmbG9hdFwiKSAmJlxuICAgICAgICAgICAgICAodSB8fFxuICAgICAgICAgICAgICAgIChwLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBoLmRpc3BsYXkgPSBsO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG51bGwgPT0gbCAmJiAoKGMgPSBoLmRpc3BsYXkpLCAobCA9IFwibm9uZVwiID09PSBjID8gXCJcIiA6IGMpKSksXG4gICAgICAgICAgICAgIChoLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiKSkpLFxuICAgICAgICAgIG4ub3ZlcmZsb3cgJiZcbiAgICAgICAgICAgICgoaC5vdmVyZmxvdyA9IFwiaGlkZGVuXCIpLFxuICAgICAgICAgICAgcC5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIChoLm92ZXJmbG93ID0gbi5vdmVyZmxvd1swXSksXG4gICAgICAgICAgICAgICAgKGgub3ZlcmZsb3dYID0gbi5vdmVyZmxvd1sxXSksXG4gICAgICAgICAgICAgICAgKGgub3ZlcmZsb3dZID0gbi5vdmVyZmxvd1syXSk7XG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgKHUgPSAhMSksXG4gICAgICAgICAgZCkpXG4gICAgICAgICAgICB1IHx8XG4gICAgICAgICAgICAgICh2XG4gICAgICAgICAgICAgICAgPyBcImhpZGRlblwiIGluIHYgJiYgKGcgPSB2LmhpZGRlbilcbiAgICAgICAgICAgICAgICA6ICh2ID0gUS5hY2Nlc3MoZSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiBsIH0pKSxcbiAgICAgICAgICAgICAgbyAmJiAodi5oaWRkZW4gPSAhZyksXG4gICAgICAgICAgICAgIGcgJiYgZmUoW2VdLCAhMCksXG4gICAgICAgICAgICAgIHAuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHIgaW4gKGcgfHwgZmUoW2VdKSwgUS5yZW1vdmUoZSwgXCJmeHNob3dcIiksIGQpKVxuICAgICAgICAgICAgICAgICAgay5zdHlsZShlLCByLCBkW3JdKTtcbiAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAodSA9IHB0KGcgPyB2W3JdIDogMCwgciwgcCkpLFxuICAgICAgICAgICAgICByIGluIHYgfHxcbiAgICAgICAgICAgICAgICAoKHZbcl0gPSB1LnN0YXJ0KSwgZyAmJiAoKHUuZW5kID0gdS5zdGFydCksICh1LnN0YXJ0ID0gMCkpKTtcbiAgICAgIH1cbiAgICBdLFxuICAgIHByZWZpbHRlcjogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgdCA/IGR0LnByZWZpbHRlcnMudW5zaGlmdChlKSA6IGR0LnByZWZpbHRlcnMucHVzaChlKTtcbiAgICB9XG4gIH0pKSxcbiAgICAoay5zcGVlZCA9IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgIHZhciByID1cbiAgICAgICAgZSAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBlXG4gICAgICAgICAgPyBrLmV4dGVuZCh7fSwgZSlcbiAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgY29tcGxldGU6IG4gfHwgKCFuICYmIHQpIHx8IChtKGUpICYmIGUpLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogZSxcbiAgICAgICAgICAgICAgZWFzaW5nOiAobiAmJiB0KSB8fCAodCAmJiAhbSh0KSAmJiB0KVxuICAgICAgICAgICAgfTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGsuZngub2ZmXG4gICAgICAgICAgPyAoci5kdXJhdGlvbiA9IDApXG4gICAgICAgICAgOiBcIm51bWJlclwiICE9IHR5cGVvZiByLmR1cmF0aW9uICYmXG4gICAgICAgICAgICAoci5kdXJhdGlvbiBpbiBrLmZ4LnNwZWVkc1xuICAgICAgICAgICAgICA/IChyLmR1cmF0aW9uID0gay5meC5zcGVlZHNbci5kdXJhdGlvbl0pXG4gICAgICAgICAgICAgIDogKHIuZHVyYXRpb24gPSBrLmZ4LnNwZWVkcy5fZGVmYXVsdCkpLFxuICAgICAgICAobnVsbCAhPSByLnF1ZXVlICYmICEwICE9PSByLnF1ZXVlKSB8fCAoci5xdWV1ZSA9IFwiZnhcIiksXG4gICAgICAgIChyLm9sZCA9IHIuY29tcGxldGUpLFxuICAgICAgICAoci5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG0oci5vbGQpICYmIHIub2xkLmNhbGwodGhpcyksIHIucXVldWUgJiYgay5kZXF1ZXVlKHRoaXMsIHIucXVldWUpO1xuICAgICAgICB9KSxcbiAgICAgICAgclxuICAgICAgKTtcbiAgICB9KSxcbiAgICBrLmZuLmV4dGVuZCh7XG4gICAgICBmYWRlVG86IGZ1bmN0aW9uKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHNlKVxuICAgICAgICAgIC5jc3MoXCJvcGFjaXR5XCIsIDApXG4gICAgICAgICAgLnNob3coKVxuICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogdCB9LCBlLCBuLCByKTtcbiAgICAgIH0sXG4gICAgICBhbmltYXRlOiBmdW5jdGlvbih0LCBlLCBuLCByKSB7XG4gICAgICAgIHZhciBpID0gay5pc0VtcHR5T2JqZWN0KHQpLFxuICAgICAgICAgIG8gPSBrLnNwZWVkKGUsIG4sIHIpLFxuICAgICAgICAgIGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlID0gZHQodGhpcywgay5leHRlbmQoe30sIHQpLCBvKTtcbiAgICAgICAgICAgIChpIHx8IFEuZ2V0KHRoaXMsIFwiZmluaXNoXCIpKSAmJiBlLnN0b3AoITApO1xuICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKGEuZmluaXNoID0gYSksXG4gICAgICAgICAgaSB8fCAhMSA9PT0gby5xdWV1ZSA/IHRoaXMuZWFjaChhKSA6IHRoaXMucXVldWUoby5xdWV1ZSwgYSlcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBzdG9wOiBmdW5jdGlvbihpLCBlLCBvKSB7XG4gICAgICAgIHZhciBhID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHZhciB0ID0gZS5zdG9wO1xuICAgICAgICAgIGRlbGV0ZSBlLnN0b3AsIHQobyk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgXCJzdHJpbmdcIiAhPSB0eXBlb2YgaSAmJiAoKG8gPSBlKSwgKGUgPSBpKSwgKGkgPSB2b2lkIDApKSxcbiAgICAgICAgICBlICYmICExICE9PSBpICYmIHRoaXMucXVldWUoaSB8fCBcImZ4XCIsIFtdKSxcbiAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZSA9ICEwLFxuICAgICAgICAgICAgICB0ID0gbnVsbCAhPSBpICYmIGkgKyBcInF1ZXVlSG9va3NcIixcbiAgICAgICAgICAgICAgbiA9IGsudGltZXJzLFxuICAgICAgICAgICAgICByID0gUS5nZXQodGhpcyk7XG4gICAgICAgICAgICBpZiAodCkgclt0XSAmJiByW3RdLnN0b3AgJiYgYShyW3RdKTtcbiAgICAgICAgICAgIGVsc2UgZm9yICh0IGluIHIpIHJbdF0gJiYgclt0XS5zdG9wICYmIHV0LnRlc3QodCkgJiYgYShyW3RdKTtcbiAgICAgICAgICAgIGZvciAodCA9IG4ubGVuZ3RoOyB0LS07IClcbiAgICAgICAgICAgICAgblt0XS5lbGVtICE9PSB0aGlzIHx8XG4gICAgICAgICAgICAgICAgKG51bGwgIT0gaSAmJiBuW3RdLnF1ZXVlICE9PSBpKSB8fFxuICAgICAgICAgICAgICAgIChuW3RdLmFuaW0uc3RvcChvKSwgKGUgPSAhMSksIG4uc3BsaWNlKHQsIDEpKTtcbiAgICAgICAgICAgICghZSAmJiBvKSB8fCBrLmRlcXVldWUodGhpcywgaSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBmaW5pc2g6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAhMSAhPT0gYSAmJiAoYSA9IGEgfHwgXCJmeFwiKSxcbiAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgdCA9IFEuZ2V0KHRoaXMpLFxuICAgICAgICAgICAgICBuID0gdFthICsgXCJxdWV1ZVwiXSxcbiAgICAgICAgICAgICAgciA9IHRbYSArIFwicXVldWVIb29rc1wiXSxcbiAgICAgICAgICAgICAgaSA9IGsudGltZXJzLFxuICAgICAgICAgICAgICBvID0gbiA/IG4ubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgIHQuZmluaXNoID0gITAsXG4gICAgICAgICAgICAgICAgay5xdWV1ZSh0aGlzLCBhLCBbXSksXG4gICAgICAgICAgICAgICAgciAmJiByLnN0b3AgJiYgci5zdG9wLmNhbGwodGhpcywgITApLFxuICAgICAgICAgICAgICAgIGUgPSBpLmxlbmd0aDtcbiAgICAgICAgICAgICAgZS0tO1xuXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIGlbZV0uZWxlbSA9PT0gdGhpcyAmJlxuICAgICAgICAgICAgICAgIGlbZV0ucXVldWUgPT09IGEgJiZcbiAgICAgICAgICAgICAgICAoaVtlXS5hbmltLnN0b3AoITApLCBpLnNwbGljZShlLCAxKSk7XG4gICAgICAgICAgICBmb3IgKGUgPSAwOyBlIDwgbzsgZSsrKVxuICAgICAgICAgICAgICBuW2VdICYmIG5bZV0uZmluaXNoICYmIG5bZV0uZmluaXNoLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBkZWxldGUgdC5maW5pc2g7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBrLmVhY2goW1widG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIl0sIGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgIHZhciBpID0gay5mbltyXTtcbiAgICAgIGsuZm5bcl0gPSBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICAgIHJldHVybiBudWxsID09IGUgfHwgXCJib29sZWFuXCIgPT0gdHlwZW9mIGVcbiAgICAgICAgICA/IGkuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICAgIDogdGhpcy5hbmltYXRlKGZ0KHIsICEwKSwgZSwgdCwgbik7XG4gICAgICB9O1xuICAgIH0pLFxuICAgIGsuZWFjaChcbiAgICAgIHtcbiAgICAgICAgc2xpZGVEb3duOiBmdChcInNob3dcIiksXG4gICAgICAgIHNsaWRlVXA6IGZ0KFwiaGlkZVwiKSxcbiAgICAgICAgc2xpZGVUb2dnbGU6IGZ0KFwidG9nZ2xlXCIpLFxuICAgICAgICBmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcbiAgICAgICAgZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuICAgICAgICBmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgICAgay5mbltlXSA9IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRlKHIsIGUsIHQsIG4pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICksXG4gICAgKGsudGltZXJzID0gW10pLFxuICAgIChrLmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlLFxuICAgICAgICB0ID0gMCxcbiAgICAgICAgbiA9IGsudGltZXJzO1xuICAgICAgZm9yIChydCA9IERhdGUubm93KCk7IHQgPCBuLmxlbmd0aDsgdCsrKVxuICAgICAgICAoZSA9IG5bdF0pKCkgfHwgblt0XSAhPT0gZSB8fCBuLnNwbGljZSh0LS0sIDEpO1xuICAgICAgbi5sZW5ndGggfHwgay5meC5zdG9wKCksIChydCA9IHZvaWQgMCk7XG4gICAgfSksXG4gICAgKGsuZngudGltZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICBrLnRpbWVycy5wdXNoKGUpLCBrLmZ4LnN0YXJ0KCk7XG4gICAgfSksXG4gICAgKGsuZnguaW50ZXJ2YWwgPSAxMyksXG4gICAgKGsuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGl0IHx8ICgoaXQgPSAhMCksIGx0KCkpO1xuICAgIH0pLFxuICAgIChrLmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgIGl0ID0gbnVsbDtcbiAgICB9KSxcbiAgICAoay5meC5zcGVlZHMgPSB7IHNsb3c6IDYwMCwgZmFzdDogMjAwLCBfZGVmYXVsdDogNDAwIH0pLFxuICAgIChrLmZuLmRlbGF5ID0gZnVuY3Rpb24ociwgZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHIgPSAoay5meCAmJiBrLmZ4LnNwZWVkc1tyXSkgfHwgciksXG4gICAgICAgIChlID0gZSB8fCBcImZ4XCIpLFxuICAgICAgICB0aGlzLnF1ZXVlKGUsIGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICB2YXIgbiA9IEMuc2V0VGltZW91dChlLCByKTtcbiAgICAgICAgICB0LnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIEMuY2xlYXJUaW1lb3V0KG4pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pLFxuICAgIChvdCA9IEUuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKSxcbiAgICAoYXQgPSBFLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIikuYXBwZW5kQ2hpbGQoRS5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKSksXG4gICAgKG90LnR5cGUgPSBcImNoZWNrYm94XCIpLFxuICAgICh5LmNoZWNrT24gPSBcIlwiICE9PSBvdC52YWx1ZSksXG4gICAgKHkub3B0U2VsZWN0ZWQgPSBhdC5zZWxlY3RlZCksXG4gICAgKChvdCA9IEUuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKS52YWx1ZSA9IFwidFwiKSxcbiAgICAob3QudHlwZSA9IFwicmFkaW9cIiksXG4gICAgKHkucmFkaW9WYWx1ZSA9IFwidFwiID09PSBvdC52YWx1ZSk7XG4gIHZhciBodCxcbiAgICBndCA9IGsuZXhwci5hdHRySGFuZGxlO1xuICBrLmZuLmV4dGVuZCh7XG4gICAgYXR0cjogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgcmV0dXJuIF8odGhpcywgay5hdHRyLCBlLCB0LCAxIDwgYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgfSxcbiAgICByZW1vdmVBdHRyOiBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBrLnJlbW92ZUF0dHIodGhpcywgZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pLFxuICAgIGsuZXh0ZW5kKHtcbiAgICAgIGF0dHI6IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgdmFyIHIsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBvID0gZS5ub2RlVHlwZTtcbiAgICAgICAgaWYgKDMgIT09IG8gJiYgOCAhPT0gbyAmJiAyICE9PSBvKVxuICAgICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiID09IHR5cGVvZiBlLmdldEF0dHJpYnV0ZVxuICAgICAgICAgICAgPyBrLnByb3AoZSwgdCwgbilcbiAgICAgICAgICAgIDogKCgxID09PSBvICYmIGsuaXNYTUxEb2MoZSkpIHx8XG4gICAgICAgICAgICAgICAgKGkgPVxuICAgICAgICAgICAgICAgICAgay5hdHRySG9va3NbdC50b0xvd2VyQ2FzZSgpXSB8fFxuICAgICAgICAgICAgICAgICAgKGsuZXhwci5tYXRjaC5ib29sLnRlc3QodCkgPyBodCA6IHZvaWQgMCkpLFxuICAgICAgICAgICAgICB2b2lkIDAgIT09IG5cbiAgICAgICAgICAgICAgICA/IG51bGwgPT09IG5cbiAgICAgICAgICAgICAgICAgID8gdm9pZCBrLnJlbW92ZUF0dHIoZSwgdClcbiAgICAgICAgICAgICAgICAgIDogaSAmJiBcInNldFwiIGluIGkgJiYgdm9pZCAwICE9PSAociA9IGkuc2V0KGUsIG4sIHQpKVxuICAgICAgICAgICAgICAgICAgPyByXG4gICAgICAgICAgICAgICAgICA6IChlLnNldEF0dHJpYnV0ZSh0LCBuICsgXCJcIiksIG4pXG4gICAgICAgICAgICAgICAgOiBpICYmIFwiZ2V0XCIgaW4gaSAmJiBudWxsICE9PSAociA9IGkuZ2V0KGUsIHQpKVxuICAgICAgICAgICAgICAgID8gclxuICAgICAgICAgICAgICAgIDogbnVsbCA9PSAociA9IGsuZmluZC5hdHRyKGUsIHQpKVxuICAgICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgICAgOiByKTtcbiAgICAgIH0sXG4gICAgICBhdHRySG9va3M6IHtcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgIHNldDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgaWYgKCF5LnJhZGlvVmFsdWUgJiYgXCJyYWRpb1wiID09PSB0ICYmIEEoZSwgXCJpbnB1dFwiKSkge1xuICAgICAgICAgICAgICB2YXIgbiA9IGUudmFsdWU7XG4gICAgICAgICAgICAgIHJldHVybiBlLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgdCksIG4gJiYgKGUudmFsdWUgPSBuKSwgdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZW1vdmVBdHRyOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgIHZhciBuLFxuICAgICAgICAgIHIgPSAwLFxuICAgICAgICAgIGkgPSB0ICYmIHQubWF0Y2goUik7XG4gICAgICAgIGlmIChpICYmIDEgPT09IGUubm9kZVR5cGUpIHdoaWxlICgobiA9IGlbcisrXSkpIGUucmVtb3ZlQXR0cmlidXRlKG4pO1xuICAgICAgfVxuICAgIH0pLFxuICAgIChodCA9IHtcbiAgICAgIHNldDogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gITEgPT09IHQgPyBrLnJlbW92ZUF0dHIoZSwgbikgOiBlLnNldEF0dHJpYnV0ZShuLCBuKSwgbjtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBrLmVhY2goay5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLCBmdW5jdGlvbihlLCB0KSB7XG4gICAgICB2YXIgYSA9IGd0W3RdIHx8IGsuZmluZC5hdHRyO1xuICAgICAgZ3RbdF0gPSBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICAgIHZhciByLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbyA9IHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBuIHx8XG4gICAgICAgICAgICAoKGkgPSBndFtvXSksXG4gICAgICAgICAgICAoZ3Rbb10gPSByKSxcbiAgICAgICAgICAgIChyID0gbnVsbCAhPSBhKGUsIHQsIG4pID8gbyA6IG51bGwpLFxuICAgICAgICAgICAgKGd0W29dID0gaSkpLFxuICAgICAgICAgIHJcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIHZhciB2dCA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG4gICAgeXQgPSAvXig/OmF8YXJlYSkkL2k7XG4gIGZ1bmN0aW9uIG10KGUpIHtcbiAgICByZXR1cm4gKGUubWF0Y2goUikgfHwgW10pLmpvaW4oXCIgXCIpO1xuICB9XG4gIGZ1bmN0aW9uIHh0KGUpIHtcbiAgICByZXR1cm4gKGUuZ2V0QXR0cmlidXRlICYmIGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikpIHx8IFwiXCI7XG4gIH1cbiAgZnVuY3Rpb24gYnQoZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGUpID8gZSA6IChcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIGUubWF0Y2goUikpIHx8IFtdO1xuICB9XG4gIGsuZm4uZXh0ZW5kKHtcbiAgICBwcm9wOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICByZXR1cm4gXyh0aGlzLCBrLnByb3AsIGUsIHQsIDEgPCBhcmd1bWVudHMubGVuZ3RoKTtcbiAgICB9LFxuICAgIHJlbW92ZVByb3A6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2sucHJvcEZpeFtlXSB8fCBlXTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksXG4gICAgay5leHRlbmQoe1xuICAgICAgcHJvcDogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICB2YXIgcixcbiAgICAgICAgICBpLFxuICAgICAgICAgIG8gPSBlLm5vZGVUeXBlO1xuICAgICAgICBpZiAoMyAhPT0gbyAmJiA4ICE9PSBvICYmIDIgIT09IG8pXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICgxID09PSBvICYmIGsuaXNYTUxEb2MoZSkpIHx8XG4gICAgICAgICAgICAgICgodCA9IGsucHJvcEZpeFt0XSB8fCB0KSwgKGkgPSBrLnByb3BIb29rc1t0XSkpLFxuICAgICAgICAgICAgdm9pZCAwICE9PSBuXG4gICAgICAgICAgICAgID8gaSAmJiBcInNldFwiIGluIGkgJiYgdm9pZCAwICE9PSAociA9IGkuc2V0KGUsIG4sIHQpKVxuICAgICAgICAgICAgICAgID8gclxuICAgICAgICAgICAgICAgIDogKGVbdF0gPSBuKVxuICAgICAgICAgICAgICA6IGkgJiYgXCJnZXRcIiBpbiBpICYmIG51bGwgIT09IChyID0gaS5nZXQoZSwgdCkpXG4gICAgICAgICAgICAgID8gclxuICAgICAgICAgICAgICA6IGVbdF1cbiAgICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIHByb3BIb29rczoge1xuICAgICAgICB0YWJJbmRleDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSBrLmZpbmQuYXR0cihlLCBcInRhYmluZGV4XCIpO1xuICAgICAgICAgICAgcmV0dXJuIHRcbiAgICAgICAgICAgICAgPyBwYXJzZUludCh0LCAxMClcbiAgICAgICAgICAgICAgOiB2dC50ZXN0KGUubm9kZU5hbWUpIHx8ICh5dC50ZXN0KGUubm9kZU5hbWUpICYmIGUuaHJlZilcbiAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgIDogLTE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvcEZpeDogeyBmb3I6IFwiaHRtbEZvclwiLCBjbGFzczogXCJjbGFzc05hbWVcIiB9XG4gICAgfSksXG4gICAgeS5vcHRTZWxlY3RlZCB8fFxuICAgICAgKGsucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB2YXIgdCA9IGUucGFyZW50Tm9kZTtcbiAgICAgICAgICByZXR1cm4gdCAmJiB0LnBhcmVudE5vZGUgJiYgdC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHZhciB0ID0gZS5wYXJlbnROb2RlO1xuICAgICAgICAgIHQgJiYgKHQuc2VsZWN0ZWRJbmRleCwgdC5wYXJlbnROb2RlICYmIHQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgay5lYWNoKFxuICAgICAgW1xuICAgICAgICBcInRhYkluZGV4XCIsXG4gICAgICAgIFwicmVhZE9ubHlcIixcbiAgICAgICAgXCJtYXhMZW5ndGhcIixcbiAgICAgICAgXCJjZWxsU3BhY2luZ1wiLFxuICAgICAgICBcImNlbGxQYWRkaW5nXCIsXG4gICAgICAgIFwicm93U3BhblwiLFxuICAgICAgICBcImNvbFNwYW5cIixcbiAgICAgICAgXCJ1c2VNYXBcIixcbiAgICAgICAgXCJmcmFtZUJvcmRlclwiLFxuICAgICAgICBcImNvbnRlbnRFZGl0YWJsZVwiXG4gICAgICBdLFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIGsucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldID0gdGhpcztcbiAgICAgIH1cbiAgICApLFxuICAgIGsuZm4uZXh0ZW5kKHtcbiAgICAgIGFkZENsYXNzOiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgIG4sXG4gICAgICAgICAgcixcbiAgICAgICAgICBpLFxuICAgICAgICAgIG8sXG4gICAgICAgICAgYSxcbiAgICAgICAgICBzLFxuICAgICAgICAgIHUgPSAwO1xuICAgICAgICBpZiAobSh0KSlcbiAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGsodGhpcykuYWRkQ2xhc3ModC5jYWxsKHRoaXMsIGUsIHh0KHRoaXMpKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIGlmICgoZSA9IGJ0KHQpKS5sZW5ndGgpXG4gICAgICAgICAgd2hpbGUgKChuID0gdGhpc1t1KytdKSlcbiAgICAgICAgICAgIGlmICgoKGkgPSB4dChuKSksIChyID0gMSA9PT0gbi5ub2RlVHlwZSAmJiBcIiBcIiArIG10KGkpICsgXCIgXCIpKSkge1xuICAgICAgICAgICAgICBhID0gMDtcbiAgICAgICAgICAgICAgd2hpbGUgKChvID0gZVthKytdKSlcbiAgICAgICAgICAgICAgICByLmluZGV4T2YoXCIgXCIgKyBvICsgXCIgXCIpIDwgMCAmJiAociArPSBvICsgXCIgXCIpO1xuICAgICAgICAgICAgICBpICE9PSAocyA9IG10KHIpKSAmJiBuLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICBuLFxuICAgICAgICAgIHIsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBvLFxuICAgICAgICAgIGEsXG4gICAgICAgICAgcyxcbiAgICAgICAgICB1ID0gMDtcbiAgICAgICAgaWYgKG0odCkpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBrKHRoaXMpLnJlbW92ZUNsYXNzKHQuY2FsbCh0aGlzLCBlLCB4dCh0aGlzKSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLmF0dHIoXCJjbGFzc1wiLCBcIlwiKTtcbiAgICAgICAgaWYgKChlID0gYnQodCkpLmxlbmd0aClcbiAgICAgICAgICB3aGlsZSAoKG4gPSB0aGlzW3UrK10pKVxuICAgICAgICAgICAgaWYgKCgoaSA9IHh0KG4pKSwgKHIgPSAxID09PSBuLm5vZGVUeXBlICYmIFwiIFwiICsgbXQoaSkgKyBcIiBcIikpKSB7XG4gICAgICAgICAgICAgIGEgPSAwO1xuICAgICAgICAgICAgICB3aGlsZSAoKG8gPSBlW2ErK10pKVxuICAgICAgICAgICAgICAgIHdoaWxlICgtMSA8IHIuaW5kZXhPZihcIiBcIiArIG8gKyBcIiBcIikpXG4gICAgICAgICAgICAgICAgICByID0gci5yZXBsYWNlKFwiIFwiICsgbyArIFwiIFwiLCBcIiBcIik7XG4gICAgICAgICAgICAgIGkgIT09IChzID0gbXQocikpICYmIG4uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbihpLCB0KSB7XG4gICAgICAgIHZhciBvID0gdHlwZW9mIGksXG4gICAgICAgICAgYSA9IFwic3RyaW5nXCIgPT09IG8gfHwgQXJyYXkuaXNBcnJheShpKTtcbiAgICAgICAgcmV0dXJuIFwiYm9vbGVhblwiID09IHR5cGVvZiB0ICYmIGFcbiAgICAgICAgICA/IHRcbiAgICAgICAgICAgID8gdGhpcy5hZGRDbGFzcyhpKVxuICAgICAgICAgICAgOiB0aGlzLnJlbW92ZUNsYXNzKGkpXG4gICAgICAgICAgOiBtKGkpXG4gICAgICAgICAgPyB0aGlzLmVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICBrKHRoaXMpLnRvZ2dsZUNsYXNzKGkuY2FsbCh0aGlzLCBlLCB4dCh0aGlzKSwgdCksIHQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIGUsIHQsIG4sIHI7XG4gICAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgICAgKHQgPSAwKSwgKG4gPSBrKHRoaXMpKSwgKHIgPSBidChpKSk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKChlID0gclt0KytdKSlcbiAgICAgICAgICAgICAgICAgIG4uaGFzQ2xhc3MoZSkgPyBuLnJlbW92ZUNsYXNzKGUpIDogbi5hZGRDbGFzcyhlKTtcbiAgICAgICAgICAgICAgfSBlbHNlICh2b2lkIDAgIT09IGkgJiYgXCJib29sZWFuXCIgIT09IG8pIHx8ICgoZSA9IHh0KHRoaXMpKSAmJiBRLnNldCh0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgZSksIHRoaXMuc2V0QXR0cmlidXRlICYmIHRoaXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZSB8fCAhMSA9PT0gaSA/IFwiXCIgOiBRLmdldCh0aGlzLCBcIl9fY2xhc3NOYW1lX19cIikgfHwgXCJcIikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgaGFzQ2xhc3M6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHQsXG4gICAgICAgICAgbixcbiAgICAgICAgICByID0gMDtcbiAgICAgICAgdCA9IFwiIFwiICsgZSArIFwiIFwiO1xuICAgICAgICB3aGlsZSAoKG4gPSB0aGlzW3IrK10pKVxuICAgICAgICAgIGlmICgxID09PSBuLm5vZGVUeXBlICYmIC0xIDwgKFwiIFwiICsgbXQoeHQobikpICsgXCIgXCIpLmluZGV4T2YodCkpXG4gICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIH1cbiAgICB9KTtcbiAgdmFyIHd0ID0gL1xcci9nO1xuICBrLmZuLmV4dGVuZCh7XG4gICAgdmFsOiBmdW5jdGlvbihuKSB7XG4gICAgICB2YXIgcixcbiAgICAgICAgZSxcbiAgICAgICAgaSxcbiAgICAgICAgdCA9IHRoaXNbMF07XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICA/ICgoaSA9IG0obikpLFxuICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgIDEgPT09IHRoaXMubm9kZVR5cGUgJiZcbiAgICAgICAgICAgICAgKG51bGwgPT0gKHQgPSBpID8gbi5jYWxsKHRoaXMsIGUsIGsodGhpcykudmFsKCkpIDogbilcbiAgICAgICAgICAgICAgICA/ICh0ID0gXCJcIilcbiAgICAgICAgICAgICAgICA6IFwibnVtYmVyXCIgPT0gdHlwZW9mIHRcbiAgICAgICAgICAgICAgICA/ICh0ICs9IFwiXCIpXG4gICAgICAgICAgICAgICAgOiBBcnJheS5pc0FycmF5KHQpICYmXG4gICAgICAgICAgICAgICAgICAodCA9IGsubWFwKHQsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gZSA/IFwiXCIgOiBlICsgXCJcIjtcbiAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgKChyID1cbiAgICAgICAgICAgICAgICBrLnZhbEhvb2tzW3RoaXMudHlwZV0gfHxcbiAgICAgICAgICAgICAgICBrLnZhbEhvb2tzW3RoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pICYmXG4gICAgICAgICAgICAgICAgXCJzZXRcIiBpbiByICYmXG4gICAgICAgICAgICAgICAgdm9pZCAwICE9PSByLnNldCh0aGlzLCB0LCBcInZhbHVlXCIpKSB8fFxuICAgICAgICAgICAgICAgICh0aGlzLnZhbHVlID0gdCkpO1xuICAgICAgICAgIH0pKVxuICAgICAgICA6IHRcbiAgICAgICAgPyAociA9IGsudmFsSG9va3NbdC50eXBlXSB8fCBrLnZhbEhvb2tzW3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pICYmXG4gICAgICAgICAgXCJnZXRcIiBpbiByICYmXG4gICAgICAgICAgdm9pZCAwICE9PSAoZSA9IHIuZ2V0KHQsIFwidmFsdWVcIikpXG4gICAgICAgICAgPyBlXG4gICAgICAgICAgOiBcInN0cmluZ1wiID09IHR5cGVvZiAoZSA9IHQudmFsdWUpXG4gICAgICAgICAgPyBlLnJlcGxhY2Uod3QsIFwiXCIpXG4gICAgICAgICAgOiBudWxsID09IGVcbiAgICAgICAgICA/IFwiXCJcbiAgICAgICAgICA6IGVcbiAgICAgICAgOiB2b2lkIDA7XG4gICAgfVxuICB9KSxcbiAgICBrLmV4dGVuZCh7XG4gICAgICB2YWxIb29rczoge1xuICAgICAgICBvcHRpb246IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gay5maW5kLmF0dHIoZSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsICE9IHQgPyB0IDogbXQoay50ZXh0KGUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgIGkgPSBlLm9wdGlvbnMsXG4gICAgICAgICAgICAgIG8gPSBlLnNlbGVjdGVkSW5kZXgsXG4gICAgICAgICAgICAgIGEgPSBcInNlbGVjdC1vbmVcIiA9PT0gZS50eXBlLFxuICAgICAgICAgICAgICBzID0gYSA/IG51bGwgOiBbXSxcbiAgICAgICAgICAgICAgdSA9IGEgPyBvICsgMSA6IGkubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChyID0gbyA8IDAgPyB1IDogYSA/IG8gOiAwOyByIDwgdTsgcisrKVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKChuID0gaVtyXSkuc2VsZWN0ZWQgfHwgciA9PT0gbykgJiZcbiAgICAgICAgICAgICAgICAhbi5kaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICghbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8ICFBKG4ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiKSlcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCgodCA9IGsobikudmFsKCkpLCBhKSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgcy5wdXNoKHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgIGkgPSBlLm9wdGlvbnMsXG4gICAgICAgICAgICAgIG8gPSBrLm1ha2VBcnJheSh0KSxcbiAgICAgICAgICAgICAgYSA9IGkubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGEtLSlcbiAgICAgICAgICAgICAgKChyID0gaVthXSkuc2VsZWN0ZWQgPVxuICAgICAgICAgICAgICAgIC0xIDwgay5pbkFycmF5KGsudmFsSG9va3Mub3B0aW9uLmdldChyKSwgbykpICYmIChuID0gITApO1xuICAgICAgICAgICAgcmV0dXJuIG4gfHwgKGUuc2VsZWN0ZWRJbmRleCA9IC0xKSwgbztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSxcbiAgICBrLmVhY2goW1wicmFkaW9cIiwgXCJjaGVja2JveFwiXSwgZnVuY3Rpb24oKSB7XG4gICAgICAoay52YWxIb29rc1t0aGlzXSA9IHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodCkpXG4gICAgICAgICAgICByZXR1cm4gKGUuY2hlY2tlZCA9IC0xIDwgay5pbkFycmF5KGsoZSkudmFsKCksIHQpKTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICAgIHkuY2hlY2tPbiB8fFxuICAgICAgICAgIChrLnZhbEhvb2tzW3RoaXNdLmdldCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsID09PSBlLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID8gXCJvblwiIDogZS52YWx1ZTtcbiAgICAgICAgICB9KTtcbiAgICB9KSxcbiAgICAoeS5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiBDKTtcbiAgdmFyIFR0ID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuICAgIEN0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9O1xuICBrLmV4dGVuZChrLmV2ZW50LCB7XG4gICAgdHJpZ2dlcjogZnVuY3Rpb24oZSwgdCwgbiwgcikge1xuICAgICAgdmFyIGksXG4gICAgICAgIG8sXG4gICAgICAgIGEsXG4gICAgICAgIHMsXG4gICAgICAgIHUsXG4gICAgICAgIGwsXG4gICAgICAgIGMsXG4gICAgICAgIGYsXG4gICAgICAgIHAgPSBbbiB8fCBFXSxcbiAgICAgICAgZCA9IHYuY2FsbChlLCBcInR5cGVcIikgPyBlLnR5cGUgOiBlLFxuICAgICAgICBoID0gdi5jYWxsKGUsIFwibmFtZXNwYWNlXCIpID8gZS5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpIDogW107XG4gICAgICBpZiAoXG4gICAgICAgICgobyA9IGYgPSBhID0gbiA9IG4gfHwgRSksXG4gICAgICAgIDMgIT09IG4ubm9kZVR5cGUgJiZcbiAgICAgICAgICA4ICE9PSBuLm5vZGVUeXBlICYmXG4gICAgICAgICAgIVR0LnRlc3QoZCArIGsuZXZlbnQudHJpZ2dlcmVkKSAmJlxuICAgICAgICAgICgtMSA8IGQuaW5kZXhPZihcIi5cIikgJiYgKChkID0gKGggPSBkLnNwbGl0KFwiLlwiKSkuc2hpZnQoKSksIGguc29ydCgpKSxcbiAgICAgICAgICAodSA9IGQuaW5kZXhPZihcIjpcIikgPCAwICYmIFwib25cIiArIGQpLFxuICAgICAgICAgICgoZSA9IGVbay5leHBhbmRvXVxuICAgICAgICAgICAgPyBlXG4gICAgICAgICAgICA6IG5ldyBrLkV2ZW50KGQsIFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgJiYgZSkpLmlzVHJpZ2dlciA9IHIgPyAyIDogMyksXG4gICAgICAgICAgKGUubmFtZXNwYWNlID0gaC5qb2luKFwiLlwiKSksXG4gICAgICAgICAgKGUucm5hbWVzcGFjZSA9IGUubmFtZXNwYWNlXG4gICAgICAgICAgICA/IG5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIiArIGguam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIilcbiAgICAgICAgICAgIDogbnVsbCksXG4gICAgICAgICAgKGUucmVzdWx0ID0gdm9pZCAwKSxcbiAgICAgICAgICBlLnRhcmdldCB8fCAoZS50YXJnZXQgPSBuKSxcbiAgICAgICAgICAodCA9IG51bGwgPT0gdCA/IFtlXSA6IGsubWFrZUFycmF5KHQsIFtlXSkpLFxuICAgICAgICAgIChjID0gay5ldmVudC5zcGVjaWFsW2RdIHx8IHt9KSxcbiAgICAgICAgICByIHx8ICFjLnRyaWdnZXIgfHwgITEgIT09IGMudHJpZ2dlci5hcHBseShuLCB0KSkpXG4gICAgICApIHtcbiAgICAgICAgaWYgKCFyICYmICFjLm5vQnViYmxlICYmICF4KG4pKSB7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIHMgPSBjLmRlbGVnYXRlVHlwZSB8fCBkLCBUdC50ZXN0KHMgKyBkKSB8fCAobyA9IG8ucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICBvO1xuICAgICAgICAgICAgbyA9IG8ucGFyZW50Tm9kZVxuICAgICAgICAgIClcbiAgICAgICAgICAgIHAucHVzaChvKSwgKGEgPSBvKTtcbiAgICAgICAgICBhID09PSAobi5vd25lckRvY3VtZW50IHx8IEUpICYmXG4gICAgICAgICAgICBwLnB1c2goYS5kZWZhdWx0VmlldyB8fCBhLnBhcmVudFdpbmRvdyB8fCBDKTtcbiAgICAgICAgfVxuICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKChvID0gcFtpKytdKSAmJiAhZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKVxuICAgICAgICAgIChmID0gbyksXG4gICAgICAgICAgICAoZS50eXBlID0gMSA8IGkgPyBzIDogYy5iaW5kVHlwZSB8fCBkKSxcbiAgICAgICAgICAgIChsID0gKFEuZ2V0KG8sIFwiZXZlbnRzXCIpIHx8IHt9KVtlLnR5cGVdICYmIFEuZ2V0KG8sIFwiaGFuZGxlXCIpKSAmJlxuICAgICAgICAgICAgICBsLmFwcGx5KG8sIHQpLFxuICAgICAgICAgICAgKGwgPSB1ICYmIG9bdV0pICYmXG4gICAgICAgICAgICAgIGwuYXBwbHkgJiZcbiAgICAgICAgICAgICAgRyhvKSAmJlxuICAgICAgICAgICAgICAoKGUucmVzdWx0ID0gbC5hcHBseShvLCB0KSksXG4gICAgICAgICAgICAgICExID09PSBlLnJlc3VsdCAmJiBlLnByZXZlbnREZWZhdWx0KCkpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChlLnR5cGUgPSBkKSxcbiAgICAgICAgICByIHx8XG4gICAgICAgICAgICBlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8XG4gICAgICAgICAgICAoYy5fZGVmYXVsdCAmJiAhMSAhPT0gYy5fZGVmYXVsdC5hcHBseShwLnBvcCgpLCB0KSkgfHxcbiAgICAgICAgICAgICFHKG4pIHx8XG4gICAgICAgICAgICAodSAmJlxuICAgICAgICAgICAgICBtKG5bZF0pICYmXG4gICAgICAgICAgICAgICF4KG4pICYmXG4gICAgICAgICAgICAgICgoYSA9IG5bdV0pICYmIChuW3VdID0gbnVsbCksXG4gICAgICAgICAgICAgIChrLmV2ZW50LnRyaWdnZXJlZCA9IGQpLFxuICAgICAgICAgICAgICBlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgJiYgZi5hZGRFdmVudExpc3RlbmVyKGQsIEN0KSxcbiAgICAgICAgICAgICAgbltkXSgpLFxuICAgICAgICAgICAgICBlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgJiYgZi5yZW1vdmVFdmVudExpc3RlbmVyKGQsIEN0KSxcbiAgICAgICAgICAgICAgKGsuZXZlbnQudHJpZ2dlcmVkID0gdm9pZCAwKSxcbiAgICAgICAgICAgICAgYSAmJiAoblt1XSA9IGEpKSksXG4gICAgICAgICAgZS5yZXN1bHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNpbXVsYXRlOiBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICB2YXIgciA9IGsuZXh0ZW5kKG5ldyBrLkV2ZW50KCksIG4sIHsgdHlwZTogZSwgaXNTaW11bGF0ZWQ6ICEwIH0pO1xuICAgICAgay5ldmVudC50cmlnZ2VyKHIsIG51bGwsIHQpO1xuICAgIH1cbiAgfSksXG4gICAgay5mbi5leHRlbmQoe1xuICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGsuZXZlbnQudHJpZ2dlcihlLCB0LCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzWzBdO1xuICAgICAgICBpZiAobikgcmV0dXJuIGsuZXZlbnQudHJpZ2dlcihlLCB0LCBuLCAhMCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgeS5mb2N1c2luIHx8XG4gICAgICBrLmVhY2goeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbihuLCByKSB7XG4gICAgICAgIHZhciBpID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGsuZXZlbnQuc2ltdWxhdGUociwgZS50YXJnZXQsIGsuZXZlbnQuZml4KGUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgay5ldmVudC5zcGVjaWFsW3JdID0ge1xuICAgICAgICAgIHNldHVwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG4gICAgICAgICAgICAgIHQgPSBRLmFjY2VzcyhlLCByKTtcbiAgICAgICAgICAgIHQgfHwgZS5hZGRFdmVudExpc3RlbmVyKG4sIGksICEwKSwgUS5hY2Nlc3MoZSwgciwgKHQgfHwgMCkgKyAxKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG4gICAgICAgICAgICAgIHQgPSBRLmFjY2VzcyhlLCByKSAtIDE7XG4gICAgICAgICAgICB0XG4gICAgICAgICAgICAgID8gUS5hY2Nlc3MoZSwgciwgdClcbiAgICAgICAgICAgICAgOiAoZS5yZW1vdmVFdmVudExpc3RlbmVyKG4sIGksICEwKSwgUS5yZW1vdmUoZSwgcikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICB2YXIgRXQgPSBDLmxvY2F0aW9uLFxuICAgIGt0ID0gRGF0ZS5ub3coKSxcbiAgICBTdCA9IC9cXD8vO1xuICBrLnBhcnNlWE1MID0gZnVuY3Rpb24oZSkge1xuICAgIHZhciB0O1xuICAgIGlmICghZSB8fCBcInN0cmluZ1wiICE9IHR5cGVvZiBlKSByZXR1cm4gbnVsbDtcbiAgICB0cnkge1xuICAgICAgdCA9IG5ldyBDLkRPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhlLCBcInRleHQveG1sXCIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHQgPSB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICAodCAmJiAhdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInBhcnNlcmVycm9yXCIpLmxlbmd0aCkgfHxcbiAgICAgICAgay5lcnJvcihcIkludmFsaWQgWE1MOiBcIiArIGUpLFxuICAgICAgdFxuICAgICk7XG4gIH07XG4gIHZhciBOdCA9IC9cXFtcXF0kLyxcbiAgICBBdCA9IC9cXHI/XFxuL2csXG4gICAgRHQgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG4gICAganQgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG4gIGZ1bmN0aW9uIHF0KG4sIGUsIHIsIGkpIHtcbiAgICB2YXIgdDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSlcbiAgICAgIGsuZWFjaChlLCBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgIHIgfHwgTnQudGVzdChuKVxuICAgICAgICAgID8gaShuLCB0KVxuICAgICAgICAgIDogcXQoXG4gICAgICAgICAgICAgIG4gKyBcIltcIiArIChcIm9iamVjdFwiID09IHR5cGVvZiB0ICYmIG51bGwgIT0gdCA/IGUgOiBcIlwiKSArIFwiXVwiLFxuICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICBpXG4gICAgICAgICAgICApO1xuICAgICAgfSk7XG4gICAgZWxzZSBpZiAociB8fCBcIm9iamVjdFwiICE9PSB3KGUpKSBpKG4sIGUpO1xuICAgIGVsc2UgZm9yICh0IGluIGUpIHF0KG4gKyBcIltcIiArIHQgKyBcIl1cIiwgZVt0XSwgciwgaSk7XG4gIH1cbiAgKGsucGFyYW0gPSBmdW5jdGlvbihlLCB0KSB7XG4gICAgdmFyIG4sXG4gICAgICByID0gW10sXG4gICAgICBpID0gZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICB2YXIgbiA9IG0odCkgPyB0KCkgOiB0O1xuICAgICAgICByW3IubGVuZ3RoXSA9XG4gICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KGUpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQobnVsbCA9PSBuID8gXCJcIiA6IG4pO1xuICAgICAgfTtcbiAgICBpZiAobnVsbCA9PSBlKSByZXR1cm4gXCJcIjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSB8fCAoZS5qcXVlcnkgJiYgIWsuaXNQbGFpbk9iamVjdChlKSkpXG4gICAgICBrLmVhY2goZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGkodGhpcy5uYW1lLCB0aGlzLnZhbHVlKTtcbiAgICAgIH0pO1xuICAgIGVsc2UgZm9yIChuIGluIGUpIHF0KG4sIGVbbl0sIHQsIGkpO1xuICAgIHJldHVybiByLmpvaW4oXCImXCIpO1xuICB9KSxcbiAgICBrLmZuLmV4dGVuZCh7XG4gICAgICBzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gay5wYXJhbSh0aGlzLnNlcmlhbGl6ZUFycmF5KCkpO1xuICAgICAgfSxcbiAgICAgIHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBlID0gay5wcm9wKHRoaXMsIFwiZWxlbWVudHNcIik7XG4gICAgICAgICAgcmV0dXJuIGUgPyBrLm1ha2VBcnJheShlKSA6IHRoaXM7XG4gICAgICAgIH0pXG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy50eXBlO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgdGhpcy5uYW1lICYmXG4gICAgICAgICAgICAgICFrKHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpICYmXG4gICAgICAgICAgICAgIGp0LnRlc3QodGhpcy5ub2RlTmFtZSkgJiZcbiAgICAgICAgICAgICAgIUR0LnRlc3QoZSkgJiZcbiAgICAgICAgICAgICAgKHRoaXMuY2hlY2tlZCB8fCAhcGUudGVzdChlKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAubWFwKGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIHZhciBuID0gayh0aGlzKS52YWwoKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsID09IG5cbiAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgIDogQXJyYXkuaXNBcnJheShuKVxuICAgICAgICAgICAgICA/IGsubWFwKG4sIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7IG5hbWU6IHQubmFtZSwgdmFsdWU6IGUucmVwbGFjZShBdCwgXCJcXHJcXG5cIikgfTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICA6IHsgbmFtZTogdC5uYW1lLCB2YWx1ZTogbi5yZXBsYWNlKEF0LCBcIlxcclxcblwiKSB9O1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmdldCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB2YXIgTHQgPSAvJTIwL2csXG4gICAgSHQgPSAvIy4qJC8sXG4gICAgT3QgPSAvKFs/Jl0pXz1bXiZdKi8sXG4gICAgUHQgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL2dtLFxuICAgIFJ0ID0gL14oPzpHRVR8SEVBRCkkLyxcbiAgICBNdCA9IC9eXFwvXFwvLyxcbiAgICBJdCA9IHt9LFxuICAgIFd0ID0ge30sXG4gICAgJHQgPSBcIiovXCIuY29uY2F0KFwiKlwiKSxcbiAgICBGdCA9IEUuY3JlYXRlRWxlbWVudChcImFcIik7XG4gIGZ1bmN0aW9uIEJ0KG8pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSwgdCkge1xuICAgICAgXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSAmJiAoKHQgPSBlKSwgKGUgPSBcIipcIikpO1xuICAgICAgdmFyIG4sXG4gICAgICAgIHIgPSAwLFxuICAgICAgICBpID0gZS50b0xvd2VyQ2FzZSgpLm1hdGNoKFIpIHx8IFtdO1xuICAgICAgaWYgKG0odCkpXG4gICAgICAgIHdoaWxlICgobiA9IGlbcisrXSkpXG4gICAgICAgICAgXCIrXCIgPT09IG5bMF1cbiAgICAgICAgICAgID8gKChuID0gbi5zbGljZSgxKSB8fCBcIipcIiksIChvW25dID0gb1tuXSB8fCBbXSkudW5zaGlmdCh0KSlcbiAgICAgICAgICAgIDogKG9bbl0gPSBvW25dIHx8IFtdKS5wdXNoKHQpO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gX3QodCwgaSwgbywgYSkge1xuICAgIHZhciBzID0ge30sXG4gICAgICB1ID0gdCA9PT0gV3Q7XG4gICAgZnVuY3Rpb24gbChlKSB7XG4gICAgICB2YXIgcjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChzW2VdID0gITApLFxuICAgICAgICBrLmVhY2godFtlXSB8fCBbXSwgZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgIHZhciBuID0gdChpLCBvLCBhKTtcbiAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiAhPSB0eXBlb2YgbiB8fCB1IHx8IHNbbl1cbiAgICAgICAgICAgID8gdVxuICAgICAgICAgICAgICA/ICEociA9IG4pXG4gICAgICAgICAgICAgIDogdm9pZCAwXG4gICAgICAgICAgICA6IChpLmRhdGFUeXBlcy51bnNoaWZ0KG4pLCBsKG4pLCAhMSk7XG4gICAgICAgIH0pLFxuICAgICAgICByXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbChpLmRhdGFUeXBlc1swXSkgfHwgKCFzW1wiKlwiXSAmJiBsKFwiKlwiKSk7XG4gIH1cbiAgZnVuY3Rpb24genQoZSwgdCkge1xuICAgIHZhciBuLFxuICAgICAgcixcbiAgICAgIGkgPSBrLmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcbiAgICBmb3IgKG4gaW4gdCkgdm9pZCAwICE9PSB0W25dICYmICgoaVtuXSA/IGUgOiByIHx8IChyID0ge30pKVtuXSA9IHRbbl0pO1xuICAgIHJldHVybiByICYmIGsuZXh0ZW5kKCEwLCBlLCByKSwgZTtcbiAgfVxuICAoRnQuaHJlZiA9IEV0LmhyZWYpLFxuICAgIGsuZXh0ZW5kKHtcbiAgICAgIGFjdGl2ZTogMCxcbiAgICAgIGxhc3RNb2RpZmllZDoge30sXG4gICAgICBldGFnOiB7fSxcbiAgICAgIGFqYXhTZXR0aW5nczoge1xuICAgICAgICB1cmw6IEV0LmhyZWYsXG4gICAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICAgIGlzTG9jYWw6IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLnRlc3QoXG4gICAgICAgICAgRXQucHJvdG9jb2xcbiAgICAgICAgKSxcbiAgICAgICAgZ2xvYmFsOiAhMCxcbiAgICAgICAgcHJvY2Vzc0RhdGE6ICEwLFxuICAgICAgICBhc3luYzogITAsXG4gICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuICAgICAgICBhY2NlcHRzOiB7XG4gICAgICAgICAgXCIqXCI6ICR0LFxuICAgICAgICAgIHRleHQ6IFwidGV4dC9wbGFpblwiLFxuICAgICAgICAgIGh0bWw6IFwidGV4dC9odG1sXCIsXG4gICAgICAgICAgeG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcbiAgICAgICAgICBqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnRzOiB7IHhtbDogL1xcYnhtbFxcYi8sIGh0bWw6IC9cXGJodG1sLywganNvbjogL1xcYmpzb25cXGIvIH0sXG4gICAgICAgIHJlc3BvbnNlRmllbGRzOiB7XG4gICAgICAgICAgeG1sOiBcInJlc3BvbnNlWE1MXCIsXG4gICAgICAgICAgdGV4dDogXCJyZXNwb25zZVRleHRcIixcbiAgICAgICAgICBqc29uOiBcInJlc3BvbnNlSlNPTlwiXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRlcnM6IHtcbiAgICAgICAgICBcIiogdGV4dFwiOiBTdHJpbmcsXG4gICAgICAgICAgXCJ0ZXh0IGh0bWxcIjogITAsXG4gICAgICAgICAgXCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcbiAgICAgICAgICBcInRleHQgeG1sXCI6IGsucGFyc2VYTUxcbiAgICAgICAgfSxcbiAgICAgICAgZmxhdE9wdGlvbnM6IHsgdXJsOiAhMCwgY29udGV4dDogITAgfVxuICAgICAgfSxcbiAgICAgIGFqYXhTZXR1cDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICByZXR1cm4gdCA/IHp0KHp0KGUsIGsuYWpheFNldHRpbmdzKSwgdCkgOiB6dChrLmFqYXhTZXR0aW5ncywgZSk7XG4gICAgICB9LFxuICAgICAgYWpheFByZWZpbHRlcjogQnQoSXQpLFxuICAgICAgYWpheFRyYW5zcG9ydDogQnQoV3QpLFxuICAgICAgYWpheDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICBcIm9iamVjdFwiID09IHR5cGVvZiBlICYmICgodCA9IGUpLCAoZSA9IHZvaWQgMCkpLCAodCA9IHQgfHwge30pO1xuICAgICAgICB2YXIgYyxcbiAgICAgICAgICBmLFxuICAgICAgICAgIHAsXG4gICAgICAgICAgbixcbiAgICAgICAgICBkLFxuICAgICAgICAgIHIsXG4gICAgICAgICAgaCxcbiAgICAgICAgICBnLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbyxcbiAgICAgICAgICB2ID0gay5hamF4U2V0dXAoe30sIHQpLFxuICAgICAgICAgIHkgPSB2LmNvbnRleHQgfHwgdixcbiAgICAgICAgICBtID0gdi5jb250ZXh0ICYmICh5Lm5vZGVUeXBlIHx8IHkuanF1ZXJ5KSA/IGsoeSkgOiBrLmV2ZW50LFxuICAgICAgICAgIHggPSBrLkRlZmVycmVkKCksXG4gICAgICAgICAgYiA9IGsuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksXG4gICAgICAgICAgdyA9IHYuc3RhdHVzQ29kZSB8fCB7fSxcbiAgICAgICAgICBhID0ge30sXG4gICAgICAgICAgcyA9IHt9LFxuICAgICAgICAgIHUgPSBcImNhbmNlbGVkXCIsXG4gICAgICAgICAgVCA9IHtcbiAgICAgICAgICAgIHJlYWR5U3RhdGU6IDAsXG4gICAgICAgICAgICBnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgICAgaWYgKGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW4pIHtcbiAgICAgICAgICAgICAgICAgIG4gPSB7fTtcbiAgICAgICAgICAgICAgICAgIHdoaWxlICgodCA9IFB0LmV4ZWMocCkpKVxuICAgICAgICAgICAgICAgICAgICBuW3RbMV0udG9Mb3dlckNhc2UoKSArIFwiIFwiXSA9IChcbiAgICAgICAgICAgICAgICAgICAgICBuW3RbMV0udG9Mb3dlckNhc2UoKSArIFwiIFwiXSB8fCBbXVxuICAgICAgICAgICAgICAgICAgICApLmNvbmNhdCh0WzJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdCA9IG5bZS50b0xvd2VyQ2FzZSgpICsgXCIgXCJdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyBudWxsIDogdC5qb2luKFwiLCBcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGggPyBwIDogbnVsbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgbnVsbCA9PSBoICYmXG4gICAgICAgICAgICAgICAgICAoKGUgPSBzW2UudG9Mb3dlckNhc2UoKV0gPSBzW2UudG9Mb3dlckNhc2UoKV0gfHwgZSksXG4gICAgICAgICAgICAgICAgICAoYVtlXSA9IHQpKSxcbiAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBoICYmICh2Lm1pbWVUeXBlID0gZSksIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgICAgaWYgKGUpXG4gICAgICAgICAgICAgICAgaWYgKGgpIFQuYWx3YXlzKGVbVC5zdGF0dXNdKTtcbiAgICAgICAgICAgICAgICBlbHNlIGZvciAodCBpbiBlKSB3W3RdID0gW3dbdF0sIGVbdF1dO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhYm9ydDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICB2YXIgdCA9IGUgfHwgdTtcbiAgICAgICAgICAgICAgcmV0dXJuIGMgJiYgYy5hYm9ydCh0KSwgbCgwLCB0KSwgdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKHgucHJvbWlzZShUKSxcbiAgICAgICAgICAodi51cmwgPSAoKGUgfHwgdi51cmwgfHwgRXQuaHJlZikgKyBcIlwiKS5yZXBsYWNlKFxuICAgICAgICAgICAgTXQsXG4gICAgICAgICAgICBFdC5wcm90b2NvbCArIFwiLy9cIlxuICAgICAgICAgICkpLFxuICAgICAgICAgICh2LnR5cGUgPSB0Lm1ldGhvZCB8fCB0LnR5cGUgfHwgdi5tZXRob2QgfHwgdi50eXBlKSxcbiAgICAgICAgICAodi5kYXRhVHlwZXMgPSAodi5kYXRhVHlwZSB8fCBcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChSKSB8fCBbXCJcIl0pLFxuICAgICAgICAgIG51bGwgPT0gdi5jcm9zc0RvbWFpbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgciA9IEUuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIChyLmhyZWYgPSB2LnVybCksXG4gICAgICAgICAgICAgIChyLmhyZWYgPSByLmhyZWYpLFxuICAgICAgICAgICAgICAodi5jcm9zc0RvbWFpbiA9XG4gICAgICAgICAgICAgICAgRnQucHJvdG9jb2wgKyBcIi8vXCIgKyBGdC5ob3N0ICE9IHIucHJvdG9jb2wgKyBcIi8vXCIgKyByLmhvc3QpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHYuY3Jvc3NEb21haW4gPSAhMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICh2LmRhdGEgJiZcbiAgICAgICAgICAgIHYucHJvY2Vzc0RhdGEgJiZcbiAgICAgICAgICAgIFwic3RyaW5nXCIgIT0gdHlwZW9mIHYuZGF0YSAmJlxuICAgICAgICAgICAgKHYuZGF0YSA9IGsucGFyYW0odi5kYXRhLCB2LnRyYWRpdGlvbmFsKSksXG4gICAgICAgICAgX3QoSXQsIHYsIHQsIFQpLFxuICAgICAgICAgIGgpXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gVDtcbiAgICAgICAgZm9yIChpIGluICgoZyA9IGsuZXZlbnQgJiYgdi5nbG9iYWwpICYmXG4gICAgICAgICAgMCA9PSBrLmFjdGl2ZSsrICYmXG4gICAgICAgICAgay5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpLFxuICAgICAgICAodi50eXBlID0gdi50eXBlLnRvVXBwZXJDYXNlKCkpLFxuICAgICAgICAodi5oYXNDb250ZW50ID0gIVJ0LnRlc3Qodi50eXBlKSksXG4gICAgICAgIChmID0gdi51cmwucmVwbGFjZShIdCwgXCJcIikpLFxuICAgICAgICB2Lmhhc0NvbnRlbnRcbiAgICAgICAgICA/IHYuZGF0YSAmJlxuICAgICAgICAgICAgdi5wcm9jZXNzRGF0YSAmJlxuICAgICAgICAgICAgMCA9PT1cbiAgICAgICAgICAgICAgKHYuY29udGVudFR5cGUgfHwgXCJcIikuaW5kZXhPZihcbiAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiXG4gICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICh2LmRhdGEgPSB2LmRhdGEucmVwbGFjZShMdCwgXCIrXCIpKVxuICAgICAgICAgIDogKChvID0gdi51cmwuc2xpY2UoZi5sZW5ndGgpKSxcbiAgICAgICAgICAgIHYuZGF0YSAmJlxuICAgICAgICAgICAgICAodi5wcm9jZXNzRGF0YSB8fCBcInN0cmluZ1wiID09IHR5cGVvZiB2LmRhdGEpICYmXG4gICAgICAgICAgICAgICgoZiArPSAoU3QudGVzdChmKSA/IFwiJlwiIDogXCI/XCIpICsgdi5kYXRhKSwgZGVsZXRlIHYuZGF0YSksXG4gICAgICAgICAgICAhMSA9PT0gdi5jYWNoZSAmJlxuICAgICAgICAgICAgICAoKGYgPSBmLnJlcGxhY2UoT3QsIFwiJDFcIikpLFxuICAgICAgICAgICAgICAobyA9IChTdC50ZXN0KGYpID8gXCImXCIgOiBcIj9cIikgKyBcIl89XCIgKyBrdCsrICsgbykpLFxuICAgICAgICAgICAgKHYudXJsID0gZiArIG8pKSxcbiAgICAgICAgdi5pZk1vZGlmaWVkICYmXG4gICAgICAgICAgKGsubGFzdE1vZGlmaWVkW2ZdICYmXG4gICAgICAgICAgICBULnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBrLmxhc3RNb2RpZmllZFtmXSksXG4gICAgICAgICAgay5ldGFnW2ZdICYmIFQuc2V0UmVxdWVzdEhlYWRlcihcIklmLU5vbmUtTWF0Y2hcIiwgay5ldGFnW2ZdKSksXG4gICAgICAgICgodi5kYXRhICYmIHYuaGFzQ29udGVudCAmJiAhMSAhPT0gdi5jb250ZW50VHlwZSkgfHwgdC5jb250ZW50VHlwZSkgJiZcbiAgICAgICAgICBULnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgdi5jb250ZW50VHlwZSksXG4gICAgICAgIFQuc2V0UmVxdWVzdEhlYWRlcihcbiAgICAgICAgICBcIkFjY2VwdFwiLFxuICAgICAgICAgIHYuZGF0YVR5cGVzWzBdICYmIHYuYWNjZXB0c1t2LmRhdGFUeXBlc1swXV1cbiAgICAgICAgICAgID8gdi5hY2NlcHRzW3YuZGF0YVR5cGVzWzBdXSArXG4gICAgICAgICAgICAgICAgKFwiKlwiICE9PSB2LmRhdGFUeXBlc1swXSA/IFwiLCBcIiArICR0ICsgXCI7IHE9MC4wMVwiIDogXCJcIilcbiAgICAgICAgICAgIDogdi5hY2NlcHRzW1wiKlwiXVxuICAgICAgICApLFxuICAgICAgICB2LmhlYWRlcnMpKVxuICAgICAgICAgIFQuc2V0UmVxdWVzdEhlYWRlcihpLCB2LmhlYWRlcnNbaV0pO1xuICAgICAgICBpZiAodi5iZWZvcmVTZW5kICYmICghMSA9PT0gdi5iZWZvcmVTZW5kLmNhbGwoeSwgVCwgdikgfHwgaCkpXG4gICAgICAgICAgcmV0dXJuIFQuYWJvcnQoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgodSA9IFwiYWJvcnRcIiksXG4gICAgICAgICAgYi5hZGQodi5jb21wbGV0ZSksXG4gICAgICAgICAgVC5kb25lKHYuc3VjY2VzcyksXG4gICAgICAgICAgVC5mYWlsKHYuZXJyb3IpLFxuICAgICAgICAgIChjID0gX3QoV3QsIHYsIHQsIFQpKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKCgoVC5yZWFkeVN0YXRlID0gMSksIGcgJiYgbS50cmlnZ2VyKFwiYWpheFNlbmRcIiwgW1QsIHZdKSwgaCkpXG4gICAgICAgICAgICByZXR1cm4gVDtcbiAgICAgICAgICB2LmFzeW5jICYmXG4gICAgICAgICAgICAwIDwgdi50aW1lb3V0ICYmXG4gICAgICAgICAgICAoZCA9IEMuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgVC5hYm9ydChcInRpbWVvdXRcIik7XG4gICAgICAgICAgICB9LCB2LnRpbWVvdXQpKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgKGggPSAhMSksIGMuc2VuZChhLCBsKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoaCkgdGhyb3cgZTtcbiAgICAgICAgICAgIGwoLTEsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGwoLTEsIFwiTm8gVHJhbnNwb3J0XCIpO1xuICAgICAgICBmdW5jdGlvbiBsKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHUsXG4gICAgICAgICAgICBsID0gdDtcbiAgICAgICAgICBoIHx8XG4gICAgICAgICAgICAoKGggPSAhMCksXG4gICAgICAgICAgICBkICYmIEMuY2xlYXJUaW1lb3V0KGQpLFxuICAgICAgICAgICAgKGMgPSB2b2lkIDApLFxuICAgICAgICAgICAgKHAgPSByIHx8IFwiXCIpLFxuICAgICAgICAgICAgKFQucmVhZHlTdGF0ZSA9IDAgPCBlID8gNCA6IDApLFxuICAgICAgICAgICAgKGkgPSAoMjAwIDw9IGUgJiYgZSA8IDMwMCkgfHwgMzA0ID09PSBlKSxcbiAgICAgICAgICAgIG4gJiZcbiAgICAgICAgICAgICAgKHMgPSAoZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICAgICAgICAgIHZhciByLFxuICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgcyA9IGUuY29udGVudHMsXG4gICAgICAgICAgICAgICAgICB1ID0gZS5kYXRhVHlwZXM7XG4gICAgICAgICAgICAgICAgd2hpbGUgKFwiKlwiID09PSB1WzBdKVxuICAgICAgICAgICAgICAgICAgdS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IHIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAociA9IGUubWltZVR5cGUgfHwgdC5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKSk7XG4gICAgICAgICAgICAgICAgaWYgKHIpXG4gICAgICAgICAgICAgICAgICBmb3IgKGkgaW4gcylcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNbaV0gJiYgc1tpXS50ZXN0KHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdS51bnNoaWZ0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVbMF0gaW4gbikgbyA9IHVbMF07XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGkgaW4gbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXVbMF0gfHwgZS5jb252ZXJ0ZXJzW2kgKyBcIiBcIiArIHVbMF1dKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbyA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYSB8fCAoYSA9IGkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgbyA9IG8gfHwgYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG8pIHJldHVybiBvICE9PSB1WzBdICYmIHUudW5zaGlmdChvKSwgbltvXTtcbiAgICAgICAgICAgICAgfSkodiwgVCwgbikpLFxuICAgICAgICAgICAgKHMgPSAoZnVuY3Rpb24oZSwgdCwgbiwgcikge1xuICAgICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgICB1LFxuICAgICAgICAgICAgICAgIGwgPSB7fSxcbiAgICAgICAgICAgICAgICBjID0gZS5kYXRhVHlwZXMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgaWYgKGNbMV0pXG4gICAgICAgICAgICAgICAgZm9yIChhIGluIGUuY29udmVydGVycykgbFthLnRvTG93ZXJDYXNlKCldID0gZS5jb252ZXJ0ZXJzW2FdO1xuICAgICAgICAgICAgICBvID0gYy5zaGlmdCgpO1xuICAgICAgICAgICAgICB3aGlsZSAobylcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAoZS5yZXNwb25zZUZpZWxkc1tvXSAmJiAobltlLnJlc3BvbnNlRmllbGRzW29dXSA9IHQpLFxuICAgICAgICAgICAgICAgICAgIXUgJiYgciAmJiBlLmRhdGFGaWx0ZXIgJiYgKHQgPSBlLmRhdGFGaWx0ZXIodCwgZS5kYXRhVHlwZSkpLFxuICAgICAgICAgICAgICAgICAgKHUgPSBvKSxcbiAgICAgICAgICAgICAgICAgIChvID0gYy5zaGlmdCgpKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBpZiAoXCIqXCIgPT09IG8pIG8gPSB1O1xuICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoXCIqXCIgIT09IHUgJiYgdSAhPT0gbykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShhID0gbFt1ICsgXCIgXCIgKyBvXSB8fCBsW1wiKiBcIiArIG9dKSlcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgaW4gbClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHMgPSBpLnNwbGl0KFwiIFwiKSlbMV0gPT09IG8gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGEgPSBsW3UgKyBcIiBcIiArIHNbMF1dIHx8IGxbXCIqIFwiICsgc1swXV0pXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgITAgPT09IGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChhID0gbFtpXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICEwICE9PSBsW2ldICYmICgobyA9IHNbMF0pLCBjLnVuc2hpZnQoc1sxXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEwICE9PSBhKVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChhICYmIGVbXCJ0aHJvd3NcIl0pIHQgPSBhKHQpO1xuICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBhKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHUgKyBcIiB0byBcIiArIG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiB0IH07XG4gICAgICAgICAgICB9KSh2LCBzLCBULCBpKSksXG4gICAgICAgICAgICBpXG4gICAgICAgICAgICAgID8gKHYuaWZNb2RpZmllZCAmJlxuICAgICAgICAgICAgICAgICAgKCh1ID0gVC5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIikpICYmXG4gICAgICAgICAgICAgICAgICAgIChrLmxhc3RNb2RpZmllZFtmXSA9IHUpLFxuICAgICAgICAgICAgICAgICAgKHUgPSBULmdldFJlc3BvbnNlSGVhZGVyKFwiZXRhZ1wiKSkgJiYgKGsuZXRhZ1tmXSA9IHUpKSxcbiAgICAgICAgICAgICAgICAyMDQgPT09IGUgfHwgXCJIRUFEXCIgPT09IHYudHlwZVxuICAgICAgICAgICAgICAgICAgPyAobCA9IFwibm9jb250ZW50XCIpXG4gICAgICAgICAgICAgICAgICA6IDMwNCA9PT0gZVxuICAgICAgICAgICAgICAgICAgPyAobCA9IFwibm90bW9kaWZpZWRcIilcbiAgICAgICAgICAgICAgICAgIDogKChsID0gcy5zdGF0ZSksIChvID0gcy5kYXRhKSwgKGkgPSAhKGEgPSBzLmVycm9yKSkpKVxuICAgICAgICAgICAgICA6ICgoYSA9IGwpLCAoIWUgJiYgbCkgfHwgKChsID0gXCJlcnJvclwiKSwgZSA8IDAgJiYgKGUgPSAwKSkpLFxuICAgICAgICAgICAgKFQuc3RhdHVzID0gZSksXG4gICAgICAgICAgICAoVC5zdGF0dXNUZXh0ID0gKHQgfHwgbCkgKyBcIlwiKSxcbiAgICAgICAgICAgIGkgPyB4LnJlc29sdmVXaXRoKHksIFtvLCBsLCBUXSkgOiB4LnJlamVjdFdpdGgoeSwgW1QsIGwsIGFdKSxcbiAgICAgICAgICAgIFQuc3RhdHVzQ29kZSh3KSxcbiAgICAgICAgICAgICh3ID0gdm9pZCAwKSxcbiAgICAgICAgICAgIGcgJiYgbS50cmlnZ2VyKGkgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLCBbVCwgdiwgaSA/IG8gOiBhXSksXG4gICAgICAgICAgICBiLmZpcmVXaXRoKHksIFtULCBsXSksXG4gICAgICAgICAgICBnICYmXG4gICAgICAgICAgICAgIChtLnRyaWdnZXIoXCJhamF4Q29tcGxldGVcIiwgW1QsIHZdKSxcbiAgICAgICAgICAgICAgLS1rLmFjdGl2ZSB8fCBrLmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBUO1xuICAgICAgfSxcbiAgICAgIGdldEpTT046IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIGsuZ2V0KGUsIHQsIG4sIFwianNvblwiKTtcbiAgICAgIH0sXG4gICAgICBnZXRTY3JpcHQ6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIGsuZ2V0KGUsIHZvaWQgMCwgdCwgXCJzY3JpcHRcIik7XG4gICAgICB9XG4gICAgfSksXG4gICAgay5lYWNoKFtcImdldFwiLCBcInBvc3RcIl0sIGZ1bmN0aW9uKGUsIGkpIHtcbiAgICAgIGtbaV0gPSBmdW5jdGlvbihlLCB0LCBuLCByKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgbSh0KSAmJiAoKHIgPSByIHx8IG4pLCAobiA9IHQpLCAodCA9IHZvaWQgMCkpLFxuICAgICAgICAgIGsuYWpheChcbiAgICAgICAgICAgIGsuZXh0ZW5kKFxuICAgICAgICAgICAgICB7IHVybDogZSwgdHlwZTogaSwgZGF0YVR5cGU6IHIsIGRhdGE6IHQsIHN1Y2Nlc3M6IG4gfSxcbiAgICAgICAgICAgICAgay5pc1BsYWluT2JqZWN0KGUpICYmIGVcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH0pLFxuICAgIChrLl9ldmFsVXJsID0gZnVuY3Rpb24oZSwgdCkge1xuICAgICAgcmV0dXJuIGsuYWpheCh7XG4gICAgICAgIHVybDogZSxcbiAgICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgICAgZGF0YVR5cGU6IFwic2NyaXB0XCIsXG4gICAgICAgIGNhY2hlOiAhMCxcbiAgICAgICAgYXN5bmM6ICExLFxuICAgICAgICBnbG9iYWw6ICExLFxuICAgICAgICBjb252ZXJ0ZXJzOiB7IFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fSB9LFxuICAgICAgICBkYXRhRmlsdGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgay5nbG9iYWxFdmFsKGUsIHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KSxcbiAgICBrLmZuLmV4dGVuZCh7XG4gICAgICB3cmFwQWxsOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciB0O1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHRoaXNbMF0gJiZcbiAgICAgICAgICAgIChtKGUpICYmIChlID0gZS5jYWxsKHRoaXNbMF0pKSxcbiAgICAgICAgICAgICh0ID0gayhlLCB0aGlzWzBdLm93bmVyRG9jdW1lbnQpXG4gICAgICAgICAgICAgIC5lcSgwKVxuICAgICAgICAgICAgICAuY2xvbmUoITApKSxcbiAgICAgICAgICAgIHRoaXNbMF0ucGFyZW50Tm9kZSAmJiB0Lmluc2VydEJlZm9yZSh0aGlzWzBdKSxcbiAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGUuZmlyc3RFbGVtZW50Q2hpbGQpIGUgPSBlLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuYXBwZW5kKHRoaXMpKSxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgd3JhcElubmVyOiBmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiBtKG4pXG4gICAgICAgICAgPyB0aGlzLmVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICBrKHRoaXMpLndyYXBJbm5lcihuLmNhbGwodGhpcywgZSkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSBrKHRoaXMpLFxuICAgICAgICAgICAgICAgIHQgPSBlLmNvbnRlbnRzKCk7XG4gICAgICAgICAgICAgIHQubGVuZ3RoID8gdC53cmFwQWxsKG4pIDogZS5hcHBlbmQobik7XG4gICAgICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICB3cmFwOiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBuID0gbSh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgayh0aGlzKS53cmFwQWxsKG4gPyB0LmNhbGwodGhpcywgZSkgOiB0KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgdW53cmFwOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgdGhpcy5wYXJlbnQoZSlcbiAgICAgICAgICAgIC5ub3QoXCJib2R5XCIpXG4gICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgayh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pLFxuICAgIChrLmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gIWsuZXhwci5wc2V1ZG9zLnZpc2libGUoZSk7XG4gICAgfSksXG4gICAgKGsuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gISEoZS5vZmZzZXRXaWR0aCB8fCBlLm9mZnNldEhlaWdodCB8fCBlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoKTtcbiAgICB9KSxcbiAgICAoay5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gbmV3IEMuWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSk7XG4gIHZhciBVdCA9IHsgMDogMjAwLCAxMjIzOiAyMDQgfSxcbiAgICBYdCA9IGsuYWpheFNldHRpbmdzLnhocigpO1xuICAoeS5jb3JzID0gISFYdCAmJiBcIndpdGhDcmVkZW50aWFsc1wiIGluIFh0KSxcbiAgICAoeS5hamF4ID0gWHQgPSAhIVh0KSxcbiAgICBrLmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24oaSkge1xuICAgICAgdmFyIG8sIGE7XG4gICAgICBpZiAoeS5jb3JzIHx8IChYdCAmJiAhaS5jcm9zc0RvbWFpbikpXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2VuZDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgIHIgPSBpLnhocigpO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoci5vcGVuKGkudHlwZSwgaS51cmwsIGkuYXN5bmMsIGkudXNlcm5hbWUsIGkucGFzc3dvcmQpLFxuICAgICAgICAgICAgICBpLnhockZpZWxkcylcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgZm9yIChuIGluIGkueGhyRmllbGRzKSByW25dID0gaS54aHJGaWVsZHNbbl07XG4gICAgICAgICAgICBmb3IgKG4gaW4gKGkubWltZVR5cGUgJiZcbiAgICAgICAgICAgICAgci5vdmVycmlkZU1pbWVUeXBlICYmXG4gICAgICAgICAgICAgIHIub3ZlcnJpZGVNaW1lVHlwZShpLm1pbWVUeXBlKSxcbiAgICAgICAgICAgIGkuY3Jvc3NEb21haW4gfHxcbiAgICAgICAgICAgICAgZVtcIlgtUmVxdWVzdGVkLVdpdGhcIl0gfHxcbiAgICAgICAgICAgICAgKGVbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiKSxcbiAgICAgICAgICAgIGUpKVxuICAgICAgICAgICAgICByLnNldFJlcXVlc3RIZWFkZXIobiwgZVtuXSk7XG4gICAgICAgICAgICAobyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIG8gJiZcbiAgICAgICAgICAgICAgICAgICgobyA9IGEgPSByLm9ubG9hZCA9IHIub25lcnJvciA9IHIub25hYm9ydCA9IHIub250aW1lb3V0ID0gci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgIFwiYWJvcnRcIiA9PT0gZVxuICAgICAgICAgICAgICAgICAgICA/IHIuYWJvcnQoKVxuICAgICAgICAgICAgICAgICAgICA6IFwiZXJyb3JcIiA9PT0gZVxuICAgICAgICAgICAgICAgICAgICA/IFwibnVtYmVyXCIgIT0gdHlwZW9mIHIuc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICAgPyB0KDAsIFwiZXJyb3JcIilcbiAgICAgICAgICAgICAgICAgICAgICA6IHQoci5zdGF0dXMsIHIuc3RhdHVzVGV4dClcbiAgICAgICAgICAgICAgICAgICAgOiB0KFxuICAgICAgICAgICAgICAgICAgICAgICAgVXRbci5zdGF0dXNdIHx8IHIuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgci5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0XCIgIT09IChyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiAhPSB0eXBlb2Ygci5yZXNwb25zZVRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7IGJpbmFyeTogci5yZXNwb25zZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogeyB0ZXh0OiByLnJlc3BvbnNlVGV4dCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChyLm9ubG9hZCA9IG8oKSksXG4gICAgICAgICAgICAgIChhID0gci5vbmVycm9yID0gci5vbnRpbWVvdXQgPSBvKFwiZXJyb3JcIikpLFxuICAgICAgICAgICAgICB2b2lkIDAgIT09IHIub25hYm9ydFxuICAgICAgICAgICAgICAgID8gKHIub25hYm9ydCA9IGEpXG4gICAgICAgICAgICAgICAgOiAoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgNCA9PT0gci5yZWFkeVN0YXRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgQy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbyAmJiBhKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8gPSBvKFwiYWJvcnRcIikpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgci5zZW5kKChpLmhhc0NvbnRlbnQgJiYgaS5kYXRhKSB8fCBudWxsKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgaWYgKG8pIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvICYmIG8oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSksXG4gICAgay5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUuY3Jvc3NEb21haW4gJiYgKGUuY29udGVudHMuc2NyaXB0ID0gITEpO1xuICAgIH0pLFxuICAgIGsuYWpheFNldHVwKHtcbiAgICAgIGFjY2VwdHM6IHtcbiAgICAgICAgc2NyaXB0OlxuICAgICAgICAgIFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuICAgICAgfSxcbiAgICAgIGNvbnRlbnRzOiB7IHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvIH0sXG4gICAgICBjb252ZXJ0ZXJzOiB7XG4gICAgICAgIFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiBrLmdsb2JhbEV2YWwoZSksIGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSxcbiAgICBrLmFqYXhQcmVmaWx0ZXIoXCJzY3JpcHRcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdm9pZCAwID09PSBlLmNhY2hlICYmIChlLmNhY2hlID0gITEpLCBlLmNyb3NzRG9tYWluICYmIChlLnR5cGUgPSBcIkdFVFwiKTtcbiAgICB9KSxcbiAgICBrLmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIiwgZnVuY3Rpb24obikge1xuICAgICAgdmFyIHIsIGk7XG4gICAgICBpZiAobi5jcm9zc0RvbWFpbiB8fCBuLnNjcmlwdEF0dHJzKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNlbmQ6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIChyID0gayhcIjxzY3JpcHQ+XCIpXG4gICAgICAgICAgICAgIC5hdHRyKG4uc2NyaXB0QXR0cnMgfHwge30pXG4gICAgICAgICAgICAgIC5wcm9wKHsgY2hhcnNldDogbi5zY3JpcHRDaGFyc2V0LCBzcmM6IG4udXJsIH0pXG4gICAgICAgICAgICAgIC5vbihcbiAgICAgICAgICAgICAgICBcImxvYWQgZXJyb3JcIixcbiAgICAgICAgICAgICAgICAoaSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgIHIucmVtb3ZlKCksXG4gICAgICAgICAgICAgICAgICAgIChpID0gbnVsbCksXG4gICAgICAgICAgICAgICAgICAgIGUgJiYgdChcImVycm9yXCIgPT09IGUudHlwZSA/IDQwNCA6IDIwMCwgZS50eXBlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgRS5oZWFkLmFwcGVuZENoaWxkKHJbMF0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaSAmJiBpKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuICB2YXIgVnQsXG4gICAgR3QgPSBbXSxcbiAgICBZdCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG4gIGsuYWpheFNldHVwKHtcbiAgICBqc29ucDogXCJjYWxsYmFja1wiLFxuICAgIGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSBHdC5wb3AoKSB8fCBrLmV4cGFuZG8gKyBcIl9cIiArIGt0Kys7XG4gICAgICByZXR1cm4gKHRoaXNbZV0gPSAhMCksIGU7XG4gICAgfVxuICB9KSxcbiAgICBrLmFqYXhQcmVmaWx0ZXIoXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgIHZhciByLFxuICAgICAgICBpLFxuICAgICAgICBvLFxuICAgICAgICBhID1cbiAgICAgICAgICAhMSAhPT0gZS5qc29ucCAmJlxuICAgICAgICAgIChZdC50ZXN0KGUudXJsKVxuICAgICAgICAgICAgPyBcInVybFwiXG4gICAgICAgICAgICA6IFwic3RyaW5nXCIgPT0gdHlwZW9mIGUuZGF0YSAmJlxuICAgICAgICAgICAgICAwID09PVxuICAgICAgICAgICAgICAgIChlLmNvbnRlbnRUeXBlIHx8IFwiXCIpLmluZGV4T2YoXG4gICAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiXG4gICAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICBZdC50ZXN0KGUuZGF0YSkgJiZcbiAgICAgICAgICAgICAgXCJkYXRhXCIpO1xuICAgICAgaWYgKGEgfHwgXCJqc29ucFwiID09PSBlLmRhdGFUeXBlc1swXSlcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAociA9IGUuanNvbnBDYWxsYmFjayA9IG0oZS5qc29ucENhbGxiYWNrKVxuICAgICAgICAgICAgPyBlLmpzb25wQ2FsbGJhY2soKVxuICAgICAgICAgICAgOiBlLmpzb25wQ2FsbGJhY2spLFxuICAgICAgICAgIGFcbiAgICAgICAgICAgID8gKGVbYV0gPSBlW2FdLnJlcGxhY2UoWXQsIFwiJDFcIiArIHIpKVxuICAgICAgICAgICAgOiAhMSAhPT0gZS5qc29ucCAmJlxuICAgICAgICAgICAgICAoZS51cmwgKz0gKFN0LnRlc3QoZS51cmwpID8gXCImXCIgOiBcIj9cIikgKyBlLmpzb25wICsgXCI9XCIgKyByKSxcbiAgICAgICAgICAoZS5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvIHx8IGsuZXJyb3IociArIFwiIHdhcyBub3QgY2FsbGVkXCIpLCBvWzBdO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIChlLmRhdGFUeXBlc1swXSA9IFwianNvblwiKSxcbiAgICAgICAgICAoaSA9IENbcl0pLFxuICAgICAgICAgIChDW3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvID0gYXJndW1lbnRzO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIG4uYWx3YXlzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdm9pZCAwID09PSBpID8gayhDKS5yZW1vdmVQcm9wKHIpIDogKENbcl0gPSBpKSxcbiAgICAgICAgICAgICAgZVtyXSAmJiAoKGUuanNvbnBDYWxsYmFjayA9IHQuanNvbnBDYWxsYmFjayksIEd0LnB1c2gocikpLFxuICAgICAgICAgICAgICBvICYmIG0oaSkgJiYgaShvWzBdKSxcbiAgICAgICAgICAgICAgKG8gPSBpID0gdm9pZCAwKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBcInNjcmlwdFwiXG4gICAgICAgICk7XG4gICAgfSksXG4gICAgKHkuY3JlYXRlSFRNTERvY3VtZW50ID0gKCgoVnQgPSBFLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKVxuICAgICAgLmJvZHkpLmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIiksXG4gICAgMiA9PT0gVnQuY2hpbGROb2Rlcy5sZW5ndGgpKSxcbiAgICAoay5wYXJzZUhUTUwgPSBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIiAhPSB0eXBlb2YgZVxuICAgICAgICA/IFtdXG4gICAgICAgIDogKFwiYm9vbGVhblwiID09IHR5cGVvZiB0ICYmICgobiA9IHQpLCAodCA9ICExKSksXG4gICAgICAgICAgdCB8fFxuICAgICAgICAgICAgKHkuY3JlYXRlSFRNTERvY3VtZW50XG4gICAgICAgICAgICAgID8gKCgociA9ICh0ID0gRS5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXG4gICAgICAgICAgICAgICAgICBcIlwiXG4gICAgICAgICAgICAgICAgKSkuY3JlYXRlRWxlbWVudChcImJhc2VcIikpLmhyZWYgPSBFLmxvY2F0aW9uLmhyZWYpLFxuICAgICAgICAgICAgICAgIHQuaGVhZC5hcHBlbmRDaGlsZChyKSlcbiAgICAgICAgICAgICAgOiAodCA9IEUpKSxcbiAgICAgICAgICAobyA9ICFuICYmIFtdKSxcbiAgICAgICAgICAoaSA9IEQuZXhlYyhlKSlcbiAgICAgICAgICAgID8gW3QuY3JlYXRlRWxlbWVudChpWzFdKV1cbiAgICAgICAgICAgIDogKChpID0gd2UoW2VdLCB0LCBvKSksXG4gICAgICAgICAgICAgIG8gJiYgby5sZW5ndGggJiYgayhvKS5yZW1vdmUoKSxcbiAgICAgICAgICAgICAgay5tZXJnZShbXSwgaS5jaGlsZE5vZGVzKSkpO1xuICAgICAgdmFyIHIsIGksIG87XG4gICAgfSksXG4gICAgKGsuZm4ubG9hZCA9IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgIHZhciByLFxuICAgICAgICBpLFxuICAgICAgICBvLFxuICAgICAgICBhID0gdGhpcyxcbiAgICAgICAgcyA9IGUuaW5kZXhPZihcIiBcIik7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAtMSA8IHMgJiYgKChyID0gbXQoZS5zbGljZShzKSkpLCAoZSA9IGUuc2xpY2UoMCwgcykpKSxcbiAgICAgICAgbSh0KVxuICAgICAgICAgID8gKChuID0gdCksICh0ID0gdm9pZCAwKSlcbiAgICAgICAgICA6IHQgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgdCAmJiAoaSA9IFwiUE9TVFwiKSxcbiAgICAgICAgMCA8IGEubGVuZ3RoICYmXG4gICAgICAgICAga1xuICAgICAgICAgICAgLmFqYXgoeyB1cmw6IGUsIHR5cGU6IGkgfHwgXCJHRVRcIiwgZGF0YVR5cGU6IFwiaHRtbFwiLCBkYXRhOiB0IH0pXG4gICAgICAgICAgICAuZG9uZShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIChvID0gYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICBhLmh0bWwoXG4gICAgICAgICAgICAgICAgICByXG4gICAgICAgICAgICAgICAgICAgID8gayhcIjxkaXY+XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGsucGFyc2VIVE1MKGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQocilcbiAgICAgICAgICAgICAgICAgICAgOiBlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWx3YXlzKFxuICAgICAgICAgICAgICBuICYmXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgICAgYS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBuLmFwcGx5KHRoaXMsIG8gfHwgW2UucmVzcG9uc2VUZXh0LCB0LCBlXSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0pLFxuICAgIGsuZWFjaChcbiAgICAgIFtcbiAgICAgICAgXCJhamF4U3RhcnRcIixcbiAgICAgICAgXCJhamF4U3RvcFwiLFxuICAgICAgICBcImFqYXhDb21wbGV0ZVwiLFxuICAgICAgICBcImFqYXhFcnJvclwiLFxuICAgICAgICBcImFqYXhTdWNjZXNzXCIsXG4gICAgICAgIFwiYWpheFNlbmRcIlxuICAgICAgXSxcbiAgICAgIGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgay5mblt0XSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vbih0LCBlKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICApLFxuICAgIChrLmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBrLmdyZXAoay50aW1lcnMsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIHQgPT09IGUuZWxlbTtcbiAgICAgIH0pLmxlbmd0aDtcbiAgICB9KSxcbiAgICAoay5vZmZzZXQgPSB7XG4gICAgICBzZXRPZmZzZXQ6IGZ1bmN0aW9uKGUsIHQsIG4pIHtcbiAgICAgICAgdmFyIHIsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBvLFxuICAgICAgICAgIGEsXG4gICAgICAgICAgcyxcbiAgICAgICAgICB1LFxuICAgICAgICAgIGwgPSBrLmNzcyhlLCBcInBvc2l0aW9uXCIpLFxuICAgICAgICAgIGMgPSBrKGUpLFxuICAgICAgICAgIGYgPSB7fTtcbiAgICAgICAgXCJzdGF0aWNcIiA9PT0gbCAmJiAoZS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIiksXG4gICAgICAgICAgKHMgPSBjLm9mZnNldCgpKSxcbiAgICAgICAgICAobyA9IGsuY3NzKGUsIFwidG9wXCIpKSxcbiAgICAgICAgICAodSA9IGsuY3NzKGUsIFwibGVmdFwiKSksXG4gICAgICAgICAgKFwiYWJzb2x1dGVcIiA9PT0gbCB8fCBcImZpeGVkXCIgPT09IGwpICYmIC0xIDwgKG8gKyB1KS5pbmRleE9mKFwiYXV0b1wiKVxuICAgICAgICAgICAgPyAoKGEgPSAociA9IGMucG9zaXRpb24oKSkudG9wKSwgKGkgPSByLmxlZnQpKVxuICAgICAgICAgICAgOiAoKGEgPSBwYXJzZUZsb2F0KG8pIHx8IDApLCAoaSA9IHBhcnNlRmxvYXQodSkgfHwgMCkpLFxuICAgICAgICAgIG0odCkgJiYgKHQgPSB0LmNhbGwoZSwgbiwgay5leHRlbmQoe30sIHMpKSksXG4gICAgICAgICAgbnVsbCAhPSB0LnRvcCAmJiAoZi50b3AgPSB0LnRvcCAtIHMudG9wICsgYSksXG4gICAgICAgICAgbnVsbCAhPSB0LmxlZnQgJiYgKGYubGVmdCA9IHQubGVmdCAtIHMubGVmdCArIGkpLFxuICAgICAgICAgIFwidXNpbmdcIiBpbiB0ID8gdC51c2luZy5jYWxsKGUsIGYpIDogYy5jc3MoZik7XG4gICAgICB9XG4gICAgfSksXG4gICAgay5mbi5leHRlbmQoe1xuICAgICAgb2Zmc2V0OiBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IHRcbiAgICAgICAgICAgID8gdGhpc1xuICAgICAgICAgICAgOiB0aGlzLmVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGsub2Zmc2V0LnNldE9mZnNldCh0aGlzLCB0LCBlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgIG4sXG4gICAgICAgICAgciA9IHRoaXNbMF07XG4gICAgICAgIHJldHVybiByXG4gICAgICAgICAgPyByLmdldENsaWVudFJlY3RzKCkubGVuZ3RoXG4gICAgICAgICAgICA/ICgoZSA9IHIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLFxuICAgICAgICAgICAgICAobiA9IHIub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyksXG4gICAgICAgICAgICAgIHsgdG9wOiBlLnRvcCArIG4ucGFnZVlPZmZzZXQsIGxlZnQ6IGUubGVmdCArIG4ucGFnZVhPZmZzZXQgfSlcbiAgICAgICAgICAgIDogeyB0b3A6IDAsIGxlZnQ6IDAgfVxuICAgICAgICAgIDogdm9pZCAwO1xuICAgICAgfSxcbiAgICAgIHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXNbMF0pIHtcbiAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIHQsXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgciA9IHRoaXNbMF0sXG4gICAgICAgICAgICBpID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgICAgICAgICBpZiAoXCJmaXhlZFwiID09PSBrLmNzcyhyLCBcInBvc2l0aW9uXCIpKSB0ID0gci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICh0ID0gdGhpcy5vZmZzZXQoKSksXG4gICAgICAgICAgICAgIChuID0gci5vd25lckRvY3VtZW50KSxcbiAgICAgICAgICAgICAgKGUgPSByLm9mZnNldFBhcmVudCB8fCBuLmRvY3VtZW50RWxlbWVudCk7XG4gICAgICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgICAgIGUgJiZcbiAgICAgICAgICAgICAgKGUgPT09IG4uYm9keSB8fCBlID09PSBuLmRvY3VtZW50RWxlbWVudCkgJiZcbiAgICAgICAgICAgICAgXCJzdGF0aWNcIiA9PT0gay5jc3MoZSwgXCJwb3NpdGlvblwiKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBlID0gZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgZSAmJlxuICAgICAgICAgICAgICBlICE9PSByICYmXG4gICAgICAgICAgICAgIDEgPT09IGUubm9kZVR5cGUgJiZcbiAgICAgICAgICAgICAgKCgoaSA9IGsoZSkub2Zmc2V0KCkpLnRvcCArPSBrLmNzcyhlLCBcImJvcmRlclRvcFdpZHRoXCIsICEwKSksXG4gICAgICAgICAgICAgIChpLmxlZnQgKz0gay5jc3MoZSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgITApKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IHQudG9wIC0gaS50b3AgLSBrLmNzcyhyLCBcIm1hcmdpblRvcFwiLCAhMCksXG4gICAgICAgICAgICBsZWZ0OiB0LmxlZnQgLSBpLmxlZnQgLSBrLmNzcyhyLCBcIm1hcmdpbkxlZnRcIiwgITApXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZSA9IHRoaXMub2Zmc2V0UGFyZW50O1xuICAgICAgICAgIHdoaWxlIChlICYmIFwic3RhdGljXCIgPT09IGsuY3NzKGUsIFwicG9zaXRpb25cIikpIGUgPSBlLm9mZnNldFBhcmVudDtcbiAgICAgICAgICByZXR1cm4gZSB8fCBpZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSksXG4gICAgay5lYWNoKHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbihcbiAgICAgIHQsXG4gICAgICBpXG4gICAgKSB7XG4gICAgICB2YXIgbyA9IFwicGFnZVlPZmZzZXRcIiA9PT0gaTtcbiAgICAgIGsuZm5bdF0gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBfKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICAgICAgdmFyIHI7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICh4KGUpID8gKHIgPSBlKSA6IDkgPT09IGUubm9kZVR5cGUgJiYgKHIgPSBlLmRlZmF1bHRWaWV3KSxcbiAgICAgICAgICAgICAgdm9pZCAwID09PSBuKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZXR1cm4gciA/IHJbaV0gOiBlW3RdO1xuICAgICAgICAgICAgclxuICAgICAgICAgICAgICA/IHIuc2Nyb2xsVG8obyA/IHIucGFnZVhPZmZzZXQgOiBuLCBvID8gbiA6IHIucGFnZVlPZmZzZXQpXG4gICAgICAgICAgICAgIDogKGVbdF0gPSBuKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHQsXG4gICAgICAgICAgZSxcbiAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH0pLFxuICAgIGsuZWFjaChbXCJ0b3BcIiwgXCJsZWZ0XCJdLCBmdW5jdGlvbihlLCBuKSB7XG4gICAgICBrLmNzc0hvb2tzW25dID0gemUoeS5waXhlbFBvc2l0aW9uLCBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgIGlmICh0KVxuICAgICAgICAgIHJldHVybiAodCA9IF9lKGUsIG4pKSwgJGUudGVzdCh0KSA/IGsoZSkucG9zaXRpb24oKVtuXSArIFwicHhcIiA6IHQ7XG4gICAgICB9KTtcbiAgICB9KSxcbiAgICBrLmVhY2goeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oYSwgcykge1xuICAgICAgay5lYWNoKHsgcGFkZGluZzogXCJpbm5lclwiICsgYSwgY29udGVudDogcywgXCJcIjogXCJvdXRlclwiICsgYSB9LCBmdW5jdGlvbihcbiAgICAgICAgcixcbiAgICAgICAgb1xuICAgICAgKSB7XG4gICAgICAgIGsuZm5bb10gPSBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoICYmIChyIHx8IFwiYm9vbGVhblwiICE9IHR5cGVvZiBlKSxcbiAgICAgICAgICAgIGkgPSByIHx8ICghMCA9PT0gZSB8fCAhMCA9PT0gdCA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiKTtcbiAgICAgICAgICByZXR1cm4gXyhcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICAgICAgICAgIHZhciByO1xuICAgICAgICAgICAgICByZXR1cm4geChlKVxuICAgICAgICAgICAgICAgID8gMCA9PT0gby5pbmRleE9mKFwib3V0ZXJcIilcbiAgICAgICAgICAgICAgICAgID8gZVtcImlubmVyXCIgKyBhXVxuICAgICAgICAgICAgICAgICAgOiBlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtcImNsaWVudFwiICsgYV1cbiAgICAgICAgICAgICAgICA6IDkgPT09IGUubm9kZVR5cGVcbiAgICAgICAgICAgICAgICA/ICgociA9IGUuZG9jdW1lbnRFbGVtZW50KSxcbiAgICAgICAgICAgICAgICAgIE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICBlLmJvZHlbXCJzY3JvbGxcIiArIGFdLFxuICAgICAgICAgICAgICAgICAgICByW1wic2Nyb2xsXCIgKyBhXSxcbiAgICAgICAgICAgICAgICAgICAgZS5ib2R5W1wib2Zmc2V0XCIgKyBhXSxcbiAgICAgICAgICAgICAgICAgICAgcltcIm9mZnNldFwiICsgYV0sXG4gICAgICAgICAgICAgICAgICAgIHJbXCJjbGllbnRcIiArIGFdXG4gICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgIDogdm9pZCAwID09PSBuXG4gICAgICAgICAgICAgICAgPyBrLmNzcyhlLCB0LCBpKVxuICAgICAgICAgICAgICAgIDogay5zdHlsZShlLCB0LCBuLCBpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgbiA/IGUgOiB2b2lkIDAsXG4gICAgICAgICAgICBuXG4gICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pLFxuICAgIGsuZWFjaChcbiAgICAgIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiLnNwbGl0KFxuICAgICAgICBcIiBcIlxuICAgICAgKSxcbiAgICAgIGZ1bmN0aW9uKGUsIG4pIHtcbiAgICAgICAgay5mbltuXSA9IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICByZXR1cm4gMCA8IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgID8gdGhpcy5vbihuLCBudWxsLCBlLCB0KVxuICAgICAgICAgICAgOiB0aGlzLnRyaWdnZXIobik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgKSxcbiAgICBrLmZuLmV4dGVuZCh7XG4gICAgICBob3ZlcjogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb3VzZWVudGVyKGUpLm1vdXNlbGVhdmUodCB8fCBlKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBrLmZuLmV4dGVuZCh7XG4gICAgICBiaW5kOiBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uKGUsIG51bGwsIHQsIG4pO1xuICAgICAgfSxcbiAgICAgIHVuYmluZDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmYoZSwgbnVsbCwgdCk7XG4gICAgICB9LFxuICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub24odCwgZSwgbiwgcik7XG4gICAgICB9LFxuICAgICAgdW5kZWxlZ2F0ZTogZnVuY3Rpb24oZSwgdCwgbikge1xuICAgICAgICByZXR1cm4gMSA9PT0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgID8gdGhpcy5vZmYoZSwgXCIqKlwiKVxuICAgICAgICAgIDogdGhpcy5vZmYodCwgZSB8fCBcIioqXCIsIG4pO1xuICAgICAgfVxuICAgIH0pLFxuICAgIChrLnByb3h5ID0gZnVuY3Rpb24oZSwgdCkge1xuICAgICAgdmFyIG4sIHIsIGk7XG4gICAgICBpZiAoKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgKChuID0gZVt0XSksICh0ID0gZSksIChlID0gbikpLCBtKGUpKSlcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAociA9IHMuY2FsbChhcmd1bWVudHMsIDIpKSxcbiAgICAgICAgICAoKGkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlLmFwcGx5KHQgfHwgdGhpcywgci5jb25jYXQocy5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgICB9KS5ndWlkID0gZS5ndWlkID0gZS5ndWlkIHx8IGsuZ3VpZCsrKSxcbiAgICAgICAgICBpXG4gICAgICAgICk7XG4gICAgfSksXG4gICAgKGsuaG9sZFJlYWR5ID0gZnVuY3Rpb24oZSkge1xuICAgICAgZSA/IGsucmVhZHlXYWl0KysgOiBrLnJlYWR5KCEwKTtcbiAgICB9KSxcbiAgICAoay5pc0FycmF5ID0gQXJyYXkuaXNBcnJheSksXG4gICAgKGsucGFyc2VKU09OID0gSlNPTi5wYXJzZSksXG4gICAgKGsubm9kZU5hbWUgPSBBKSxcbiAgICAoay5pc0Z1bmN0aW9uID0gbSksXG4gICAgKGsuaXNXaW5kb3cgPSB4KSxcbiAgICAoay5jYW1lbENhc2UgPSBWKSxcbiAgICAoay50eXBlID0gdyksXG4gICAgKGsubm93ID0gRGF0ZS5ub3cpLFxuICAgIChrLmlzTnVtZXJpYyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciB0ID0gay50eXBlKGUpO1xuICAgICAgcmV0dXJuIChcIm51bWJlclwiID09PSB0IHx8IFwic3RyaW5nXCIgPT09IHQpICYmICFpc05hTihlIC0gcGFyc2VGbG9hdChlKSk7XG4gICAgfSksXG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiZcbiAgICAgIGRlZmluZS5hbWQgJiZcbiAgICAgIGRlZmluZShcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBrO1xuICAgICAgfSk7XG4gIHZhciBRdCA9IEMualF1ZXJ5LFxuICAgIEp0ID0gQy4kO1xuICByZXR1cm4gKFxuICAgIChrLm5vQ29uZmxpY3QgPSBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gQy4kID09PSBrICYmIChDLiQgPSBKdCksIGUgJiYgQy5qUXVlcnkgPT09IGsgJiYgKEMualF1ZXJ5ID0gUXQpLCBrO1xuICAgIH0pLFxuICAgIGUgfHwgKEMualF1ZXJ5ID0gQy4kID0gayksXG4gICAga1xuICApO1xufSk7XG4iXX0=
